import sys, os
if hasattr(sys.stdout, "reconfigure"):
    try:
        sys.stdout.reconfigure(encoding="utf-8", errors="replace")
    except (ValueError, AttributeError):
        pass
if hasattr(sys.stderr, "reconfigure"):
    try:
        sys.stderr.reconfigure(encoding="utf-8", errors="replace")
    except (ValueError, AttributeError):
        pass
if sys.stdout is None:
    sys.stdout = open(os.devnull, 'w')
if sys.stderr is None:
    sys.stderr = open(os.devnull, 'w')

#imports #tweak
import alphashape, base64, cc3d, fiona, functools, geopandas as gpd,heapq, inspect, laspy, math, numba, numpy as np, open3d as o3d, pandas as pd, psutil, pyvista as pv, platform, rasterio, re, shapely, shutil, subprocess, warnings, tempfile, tkinter as tk, threading, time, traceback
from plyfile import PlyData

from concurrent.futures import ThreadPoolExecutor, as_completed
from queue import Queue, Empty
from datetime import datetime, timezone
from functools import wraps
from numba import njit, jit, prange
from io import BytesIO
from PIL import Image, ImageTk 
from pyproj import CRS
from pyproj.exceptions import CRSError
from rasterio.enums import Resampling
from rasterio.features import shapes
from rasterio.transform import from_origin, Affine
from rasterio.warp import Resampling
from scipy.ndimage import gaussian_filter, binary_closing, binary_fill_holes
from scipy.optimize import least_squares
from scipy.spatial import cKDTree, Delaunay, ConvexHull
from shapely.affinity import translate
from shapely.geometry import MultiPolygon,MultiPoint , Point, Polygon, shape, mapping
from shapely.ops import unary_union
from skimage.segmentation import watershed
from skimage.feature import peak_local_max
from tkinter import filedialog, BooleanVar, font, messagebox, simpledialog, ttk, TclError
from typing import Iterable, Union, Optional, Sequence


try:
    from tkinterdnd2 import DND_FILES, TkinterDnD
except ImportError:
    DND_FILES = None
    TkinterDnD = None


#global variables #tweak
globalprocessing = False
pause_event = threading.Event()
pause_event.set()
shiftby = None

DEFAULT_RANSAC_ITERATIONS = 1000
DEFAULT_RANSAC_OUTLIER_THRESHOLD = 0.01
DEFAULT_WATERSHED_MIN_HEIGHT = 5.0
DEFAULT_SEGMENTATION_MIN_HEIGHT = 1.0

if getattr(sys, "frozen", False):
    proj_path = os.path.join(sys._MEIPASS, r"pyproj\proj_dir\share\proj")
    os.environ["PROJ_DATA"] = proj_path
    os.environ["PROJ_LIB"]  = proj_path
else:
    # Regular venv: point PROJ to pyproj’s bundled data
    try:
        import pyproj, rasterio
        proj_path = pyproj.datadir.get_data_dir()
        os.environ.setdefault("PROJ_DATA", proj_path)
        os.environ.setdefault("PROJ_LIB",  proj_path)
        # Rasterio’s GDAL data (helps on some Windows setups)
        gdal_data = os.path.join(os.path.dirname(rasterio.__file__), "gdal_data")
        os.environ.setdefault("GDAL_DATA", gdal_data)
    except Exception:
        pass
    
###Wrappers###
def MeasureProcessingTime(func):
    """Decorator that prints the wrapped function runtime in hours, minutes, and seconds.

    Parameters
    ----------
    func : Callable
        Function whose execution time is reported.

    Returns
    -------
    Callable
        Wrapped callable emitting a duration message on completion.
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        processing_time = end_time - start_time

        hours, rem = divmod(processing_time, 3600)
        minutes, seconds = divmod(rem, 60)

        print(f"Processed in {int(hours)} hours, {int(minutes)} minutes, and {seconds:.2f} seconds.")
        return result
    return wrapper

def timedone(func):
    """Decorator that prints the completion time of the wrapped callable.

    Parameters
    ----------
    func : Callable
        Function whose completion time is logged.

    Returns
    -------
    Callable
        Wrapped callable emitting a completion summary on exit.
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        elapsed = time.time() - start
        hrs, rem = divmod(elapsed, 3600)
        mins, secs = divmod(rem, 60)
        print(f"{func.__name__}: Done in {int(hrs)}h {int(mins)}m {secs:.2f}s.")
        return result
    return wrapper

###Custom###
@timedone
def filter_and_transform(grouped_data, max_d=2.0):
    """Reduce grouped disc fits into a deduplicated, typed table.

    Parameters
    ----------
    grouped_data : dict[Any, np.ndarray]
        Mapping of group identifiers to disc-fit arrays. Each array is expected to
        expose the tree metadata in its trailing columns (tree height, identifier,
        disc height, centroid, radius, fit error, perimeter).
    max_d : float, optional
        Maximum allowed disc diameter (in metres) before scaling. Values above
        ``max_d / 2`` or non-positive radii are discarded. Default is ``2.0``.

    Returns
    -------
    pandas.DataFrame
        Deduplicated disc catalogue ordered by ``ID_TREE`` and ``DISC_H`` with the
        columns ``[ID_TREE, DISC_X, DISC_Y, DISC_H, DISC_D, TREE_H, DISC_ERROR,
        h/d_index, perimeter]``. Empty input yields an empty frame with the same
        column layout.
    """

    output_columns = (
        "ID_TREE",
        "DISC_X",
        "DISC_Y",
        "DISC_H",
        "DISC_D",
        "TREE_H",
        "DISC_ERROR",
        "h/d_index",
        "perimeter",
    )

    def _empty_frame():
        return pd.DataFrame(
            {
                "ID_TREE": np.empty(0, dtype=np.int32),
                "DISC_X": np.empty(0, dtype=np.float64),
                "DISC_Y": np.empty(0, dtype=np.float64),
                "DISC_H": np.empty(0, dtype=np.float32),
                "DISC_D": np.empty(0, dtype=np.float32),
                "TREE_H": np.empty(0, dtype=np.float32),
                "DISC_ERROR": np.empty(0, dtype=np.float32),
                "h/d_index": np.empty(0, dtype=np.float32),
                "perimeter": np.empty(0, dtype=np.float32),
            }
        )

    if not grouped_data:
        return _empty_frame()

    candidate_arrays = [
        np.asarray(array) for array in grouped_data.values() if isinstance(array, np.ndarray) and array.size
    ]
    if not candidate_arrays:
        return _empty_frame()

    combined = np.vstack(candidate_arrays)
    if combined.ndim != 2 or combined.shape[1] < 9:
        raise ValueError("filter_and_transform expects 2D arrays with at least 9 columns.")

    tree_height_index = -9
    id_tree_index = -8
    disc_h_index = -6
    disc_x_index = -5
    disc_y_index = -4
    disc_d_index = -3
    disc_error_index = -2
    perimeter_index = -1

    id_tree = combined[:, id_tree_index].astype(np.int64, copy=False)
    tree_height = combined[:, tree_height_index].astype(np.float32, copy=False)
    disc_h_raw = combined[:, disc_h_index].astype(np.float32, copy=False)
    disc_x = combined[:, disc_x_index].astype(np.float64, copy=False)
    disc_y = combined[:, disc_y_index].astype(np.float64, copy=False)
    disc_d_raw = combined[:, disc_d_index].astype(np.float32, copy=False)
    disc_error = combined[:, disc_error_index].astype(np.float32, copy=False)
    perimeter = combined[:, perimeter_index].astype(np.float32, copy=False)

    valid_mask = (disc_d_raw > 0) & (disc_d_raw <= (max_d / 2.0))
    if not np.any(valid_mask):
        return _empty_frame()

    df = pd.DataFrame(
        {
            "ID_TREE": id_tree[valid_mask],
            "TREE_H": tree_height[valid_mask],
            "DISC_H_RAW": disc_h_raw[valid_mask],
            "DISC_X": disc_x[valid_mask],
            "DISC_Y": disc_y[valid_mask],
            "DISC_D_RAW": disc_d_raw[valid_mask],
            "DISC_ERROR": disc_error[valid_mask],
            "perimeter": perimeter[valid_mask],
        }
    )

    df = df.drop_duplicates(
        subset=["ID_TREE", "DISC_H_RAW", "DISC_D_RAW", "DISC_X", "DISC_Y", "DISC_ERROR", "perimeter"],
        ignore_index=True,
    )

    disc_h = df.pop("DISC_H_RAW").round(2).astype(np.float32, copy=False)
    disc_d = (df.pop("DISC_D_RAW") * 200.0).astype(np.float32, copy=False)

    with np.errstate(divide="ignore", invalid="ignore"):
        h_over_d = np.divide(
            disc_h,
            disc_d,
            out=np.zeros_like(disc_d, dtype=np.float32),
            where=disc_d != 0,
        ).astype(np.float32)

    df["DISC_H"] = disc_h
    df["DISC_D"] = disc_d
    df["h/d_index"] = h_over_d

    df["ID_TREE"] = df["ID_TREE"].astype(np.int32, copy=False)
    df["TREE_H"] = df["TREE_H"].astype(np.float32, copy=False)
    df["DISC_X"] = df["DISC_X"].astype(np.float64, copy=False)
    df["DISC_Y"] = df["DISC_Y"].astype(np.float64, copy=False)
    df["DISC_ERROR"] = df["DISC_ERROR"].astype(np.float32, copy=False)
    df["perimeter"] = df["perimeter"].astype(np.float32, copy=False)

    df.sort_values(["ID_TREE", "DISC_H"], kind="mergesort", inplace=True)
    df.reset_index(drop=True, inplace=True)

    return df.loc[:, output_columns]

@timedone
def filter_disc_height(df, target_height=1.3, dbhlim = 2):
    """Filter discs to a target height, estimating missing diameters if necessary.

    Parameters
    ----------
    df : pandas.DataFrame
        Disc catalogue as produced by :func:`filter_and_transform`.
    target_height : float, optional
        Height (in metres) at which the target diameter is required. Defaults to ``1.3``.
    dbhlim : float, optional
        Maximum permissible diameter (in the same units as ``DISC_D``) that the linear
        prediction may return. Defaults to ``2``.

    Returns
    -------
    pandas.DataFrame
        Table that contains one row per tree at ``target_height`` with predicted
        diameters inserted when no measurement was present.
    """
    if not {'ID_TREE', 'DISC_X', 'DISC_Y', 'DISC_H', 'DISC_D'}.issubset(df.columns):
        raise ValueError("The input DataFrame must contain 'ID_TREE', 'DISC_X', 'DISC_Y', 'DISC_H', and 'DISC_D' columns.")

    # Separate DataFrame into those with and without the target DISC_H
    with_target = df[df['DISC_H'] == target_height]
    without_target = df[df['DISC_H'] != target_height]

    # Get IDs of trees that already have DISC_H == target_height
    existing_trees = set(with_target['ID_TREE'])

    # Process trees missing the target DISC_H
    missing_target_trees = without_target[~without_target['ID_TREE'].isin(existing_trees)].groupby('ID_TREE')
    new_records = []

    for id_tree, group in missing_target_trees:
        if len(group) >= 2:
            # Calculate average DISC_X and DISC_Y
            avg_disc_x = group['DISC_X'].mean()
            avg_disc_y = group['DISC_Y'].mean()

            # Fit a linear model for DISC_D against DISC_H
            slope, intercept = np.polyfit(group['DISC_H'], group['DISC_D'], 1)

            # Predict DISC_D for the target height
            predicted_disc_d = slope * target_height + intercept

            if predicted_disc_d <= 0 or predicted_disc_d > dbhlim:
                continue
            perimeter = group['perimeter'].mean()
            # Create a new record
            new_record = {
                'ID_TREE': id_tree,
                'DISC_X': avg_disc_x,
                'DISC_Y': avg_disc_y,
                'DISC_H': target_height,
                'DISC_D': predicted_disc_d,
                'TREE_H': group['TREE_H'].iloc[0],  # Assuming TREE_H is constant per ID_TREE
                'DISC_ERROR': 999,  # Using average DISC_ERROR
                'h/d_index': group['TREE_H'].iloc[0] / predicted_disc_d,
                'perimeter': perimeter
            }
            new_records.append(new_record)

    # Combine the original with_target DataFrame and the new records
    new_records_df = pd.DataFrame(new_records)
    result = pd.concat([with_target, new_records_df], ignore_index=True)

    return result

def initial_cleanup(pointcloudpath, debug, reevaluate, keepfields="xyz"):
    """Prepare processing folders and load the base cloud for a run.

    Parameters
    ----------
    pointcloudpath : str
        Path to the source point cloud file.
    debug : bool
        If ``True`` emits progress information to stdout.
    reevaluate : bool
        ``True`` to reuse previously computed artefacts from the processing folder,
        copying crown intermediates and loading the density cloud instead of the
        original file.
    keepfields : str or Iterable[str], optional
        Field selection forwarded to :func:`LoadPointCloud` when ``reevaluate`` is
        false. Defaults to ``"xyz"``.

    Returns
    -------
    tuple[np.ndarray, str]
        Loaded point cloud and the directory path where further outputs should be
        written.
    """

    folder = os.path.dirname(pointcloudpath)
    filename = os.path.splitext(os.path.basename(pointcloudpath))[0]
    processingfolder = os.path.join(folder, f"{filename}-Processing")
    reprocessingfolder = os.path.join(folder, f"{filename}-Processing-reevaluate")

    if not reevaluate:
        if os.path.isdir(processingfolder):
            if debug:
                print(
                    f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: "
                    f"Deleting existing processing folder: {processingfolder}"
                )
            shutil.rmtree(processingfolder)
        os.makedirs(processingfolder, exist_ok=True)
        if debug:
            print(
                f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: "
                f"Created processing folder: {processingfolder}"
            )
        cloud = LoadPointCloud(pointcloudpath, return_type="np", fields=keepfields)
        return cloud, processingfolder

    if os.path.isdir(reprocessingfolder):
        if debug:
            print(
                f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: "
                f"Deleting existing reprocessing folder: {reprocessingfolder}"
            )
        shutil.rmtree(reprocessingfolder)
    os.makedirs(reprocessingfolder, exist_ok=True)

    if os.path.isdir(processingfolder):
        for fname in os.listdir(processingfolder):
            if "_TreeCrowns." in fname:
                src = os.path.join(processingfolder, fname)
                dst = os.path.join(
                    reprocessingfolder, f"TreeCrowns{os.path.splitext(fname)[1]}"
                )
                shutil.copy2(src, dst)
    elif debug:
        print(
            f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: "
            f"Processing folder missing, crown geometries will not be copied."
        )

    if debug:
        print(
            f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: "
            f"Created reprocessing folder: {reprocessingfolder}"
        )

    density_candidates = [
        os.path.join(processingfolder, f"{filename}_cloud_density.laz"),
        os.path.join(processingfolder, "13ComputeDensity-CloudDensity.txt"),
    ]

    cloud = None
    last_error = None
    for candidate in density_candidates:
        if not os.path.isfile(candidate):
            continue
        try:
            cloud = LoadPointCloud(candidate, return_type="np")
            if debug:
                print(
                    f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: "
                    f"Loaded density cloud from {candidate}"
                )
            break
        except Exception as exc:  # noqa: BLE001 - propagate after retry
            last_error = exc
            if debug:
                print(
                    f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: "
                    f"Failed to load {candidate}: {exc}"
                )

    if cloud is None:
        missing = ", ".join(density_candidates)
        raise FileNotFoundError(
            f"No density cloud could be loaded. Checked: {missing}" +
            (f"; last error: {last_error}" if last_error else "")
        )

    return cloud, reprocessingfolder

@timedone
def process_discsall(discsall, output_dir, debug=False, shiftby=(0, 0, 0), outpcdformat="txt"):
    """Group disc points by tree label and optionally persist debug exports.

    Parameters
    ----------
    discsall : Iterable[np.ndarray]
        Collection of disc point sets, each containing the same column layout.
    output_dir : str
        Directory that receives grouped exports.
    debug : bool, optional
        When ``True`` saves the merged disc catalogue for inspection. Defaults to ``False``.
    shiftby : Sequence[float], optional
        Translation applied when persisting debug point clouds. Defaults to ``(0, 0, 0)``.
    outpcdformat : str, optional
        File extension used for debug outputs (for example ``\"txt\"`` or ``\"laz\"``).
        Defaults to ``\"txt\"``.

    Returns
    -------
    dict[Any, np.ndarray]
        Mapping of group identifiers to their corresponding stacked disc arrays.
    """
    def group_and_export(data, output_dir, column_index=-5, debug=False):
        """Group an array by a column and optionally write each block to disk.

        Parameters
        ----------
        data : np.ndarray
            Source catalogue with a last-column label to group by.
        output_dir : str
            Directory where grouped exports should be written.
        column_index : int, optional
            Column index used for grouping. Defaults to ``-5`` (tree identifier).
        debug : bool, optional
            When ``True`` emits additional progress information. Defaults to ``False``.

        Returns
        -------
        dict[Any, np.ndarray]
            Mapping from grouping value to the corresponding row subset.
        """
        # Ensure output directory exists
        os.makedirs(output_dir, exist_ok=True)

        # Get the column name using the index
        grouping_column = data[:, column_index]
        unique_values = np.unique(grouping_column)

        print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Found {len(unique_values)} unique groups in column index {column_index}.")

        # Dictionary to store the contents of each group
        grouped_contents = {}

        for value in unique_values:
            group = data[grouping_column == value]
            grouped_contents[value] = group

        # Iterate through each group and export to a file
            if debug == "Nothing": #this may return a lot of data for debugging and should be fully disabled upon release
                output_file = os.path.join(output_dir, f"grouped_{round(value,2)}.txt")
                SavePointCloud(group, output_file, shiftby=shiftby)
                print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Exported {len(group)} rows to {output_file}.")

        return grouped_contents

    def flatten_list(discs):
        """
        Flatten a list of NumPy arrays into a single NumPy array.

        Parameters
        ----------
        discs : list of np.ndarray
            List of arrays with the same number of columns.

        Returns
        -------
        np.ndarray or None
            Stacked array, or None if nothing valid was provided.
        """
        # Keep only non-empty NumPy arrays
        valid = [disc for disc in discs if isinstance(disc, np.ndarray) and disc.size > 0]

        if not valid:
            print("No valid arrays to concatenate.")
            return None

        # Stack into one array
        return np.vstack(valid)


    # Ensure the main output directory exists
    os.makedirs(output_dir, exist_ok=True)

    flat_discsall = flatten_list(discsall)
    if flat_discsall is None or flat_discsall.size == 0:
        if debug:
            print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: No disc data available for grouping.")
        return {}

    combined_data = flat_discsall
    if debug == True:
        SavePointCloud(combined_data, os.path.join(output_dir, f"StemDiscsProcessed.{outpcdformat}"), shiftby=shiftby)

    # Call the grouping and export function and collect grouped contents
    grouped_data_contents = group_and_export(combined_data, output_dir, column_index=-6, debug=debug)

    return grouped_data_contents

def build_mesh_height_index(mesh_or_path, grid_resolution=100):
    """Convert a surface mesh to a 2-D KD-tree index for fast terrain lookup.

    Parameters
    ----------
    mesh_or_path : str or pyvista.PolyData
        Mesh object or path to a mesh readable by ``pyvista``.
    grid_resolution : int, optional
        Number of samples per axis used to rasterize the mesh. Defaults to ``100``.

    Returns
    -------
    tuple
        ``(kd_tree_2d, grid_xy_valid, grid_z_valid, bounds, resolution)`` where the
        first element is a ``scipy.spatial.cKDTree`` over XY coordinates and the
        remaining entries store the sampled grid and bounding box.
    """
    # Load mesh
    mesh = pv.read(mesh_or_path) if isinstance(mesh_or_path, str) else mesh_or_path
    if not isinstance(mesh, pv.PolyData):
        raise ValueError("build_mesh_height_index: mesh_or_path must be a path or pv.PolyData")

    # Bounds and uniform XY grid
    x0, x1, y0, y1, z0, z1 = mesh.bounds
    x_vals = np.linspace(x0, x1, grid_resolution)
    y_vals = np.linspace(y0, y1, grid_resolution)
    xv, yv = np.meshgrid(x_vals, y_vals)

    # ---- Faces ->face means (vectorized) ----
    # Assume a triangle mesh (most DTM/terrain meshes are triangles). For mixed polygons,
    # pv.PolyData can be triangulated before this step: mesh = mesh.triangulate()
    faces_arr = mesh.faces
    # faces are encoded [3, i, j, k, 3, i, j, k, ...] for triangles
    if faces_arr.size % 4 != 0:
        # Triangulate for safety
        mesh = mesh.triangulate()
        faces_arr = mesh.faces
    tri = faces_arr.reshape(-1, 4)[:, 1:]     # (F, 3) triangle vertex indices
    tri_pts = mesh.points[tri]                # (F, 3, 3) -> F faces, 3 verts, 3 coords
    face_means = tri_pts.mean(axis=1)         # (F, 3): [mx, my, mz]
    mx, my, mz = face_means[:, 0], face_means[:, 1], face_means[:, 2]

    # ---- Map face means to grid indices (vectorized, no argmin loops) ----
    gx = np.rint((mx - x0) / (x1 - x0) * (grid_resolution - 1)).astype(np.int64)
    gy = np.rint((my - y0) / (y1 - y0) * (grid_resolution - 1)).astype(np.int64)
    # clip to grid bounds
    gx = np.clip(gx, 0, grid_resolution - 1)
    gy = np.clip(gy, 0, grid_resolution - 1)

    # ---- Aggregate face Z to grid cells (use max to represent terrain at that XY) ----
    # Work on a flat array; initialize with -inf so np.maximum.at works (NaN would propagate)
    grid_z_flat = np.full(grid_resolution * grid_resolution, -np.inf, dtype=np.float64)
    lin = gy * grid_resolution + gx
    np.maximum.at(grid_z_flat, lin, mz)

    # Valid cells (those that received at least one face)
    valid_mask = grid_z_flat > -np.inf

    # Flattened XY grid coordinates
    grid_xy_flat = np.column_stack((xv.ravel(), yv.ravel()))
    grid_xy_valid = grid_xy_flat[valid_mask]
    grid_z_valid = grid_z_flat[valid_mask]

    # KDTree over valid XY cells
    kd_tree_2d = cKDTree(grid_xy_valid)

    return kd_tree_2d, grid_xy_valid, grid_z_valid, (x0, x1, y0, y1, z0, z1), grid_resolution

def CloudToMeshVerticalDistance(input_data, meshpath_or_mesh=None, *,
                                      prebuilt_index=None,
                                      outputdir=None, shiftby=(0,0,0),
                                      max_dist=np.inf):
    """Attach terrain-normal vertical distances to each point in a cloud.

    Parameters
    ----------
    input_data : str or np.ndarray
        Source point cloud or path understood by :func:`LoadPointCloud`.
    meshpath_or_mesh : str or pyvista.PolyData, optional
        Surface representation of the terrain. Required when ``prebuilt_index`` is
        not supplied.
    prebuilt_index : tuple, optional
        Output of :func:`build_mesh_height_index`. Bypasses the mesh loading cost when
        provided.
    outputdir : str, optional
        Directory where the augmented cloud is written. Skipped when ``None``.
    shiftby : Sequence[float], optional
        Translation applied when persisting the output cloud. Defaults to ``(0, 0, 0)``.
    max_dist : float, optional
        Maximum accepted vertical separation. Points further away receive ``max_dist``.

    Returns
    -------
    np.ndarray
        Input cloud with an additional column storing ``Z - terrain_Z`` distances.
    """
    # Load cloud as NumPy
    pts = LoadPointCloud(input_data, return_type="np", fields="all").astype(np.float64, copy=False)
    if pts.shape[1] < 3:
        raise ValueError("Cloud must have at least 3 columns (X,Y,Z).")

    # Build or unpack index
    if prebuilt_index is None:
        if meshpath_or_mesh is None:
            raise ValueError("Provide meshpath_or_mesh or prebuilt_index.")
        kd_tree_2d, grid_xy_valid, grid_z_valid, _, _ = build_mesh_height_index(meshpath_or_mesh)
    else:
        kd_tree_2d, grid_xy_valid, grid_z_valid, _, _ = prebuilt_index

    # Query nearest XY cell for all points (C-optimized)
    _, nn_idx = kd_tree_2d.query(pts[:, :2], workers=-1)
    terrain_z = grid_z_valid[nn_idx]

    # Vertical distances (cap by max_dist and require terrain below or equal)
    vdist = np.full(pts.shape[0], float(max_dist), dtype=np.float64)
    dz = pts[:, 2] - terrain_z
    mask = (dz >= 0.0) & (dz <= max_dist)
    vdist[mask] = dz[mask]

    out = np.hstack((pts, vdist[:, None]))

    if outputdir is not None:
        os.makedirs(outputdir, exist_ok=True)
        SavePointCloud(out, os.path.join(outputdir, "CloudToMeshVerticalDistance.txt"),
                       fields="all", shiftby=shiftby)
    return out


def GetTerrainDistances(repopulated_trees: np.ndarray,
                              shiftby,
                              unique_labels: Iterable,
                              dtmmesh,
                              disc_heights,
                              XSectionThickness,
                              debugdir=None,
                              grid_resolution=100, outpcdformat="txt"):
    """Compute terrain-relative metrics for each tree label in a merged cloud.

    Parameters
    ----------
    repopulated_trees : np.ndarray
        Dense point cloud containing tree IDs in the last column.
    shiftby : Sequence[float]
        Translation applied when saving intermediate clouds.
    unique_labels : Iterable
        Collection of tree identifiers to process.
    dtmmesh : str or pyvista.PolyData
        Digital terrain model used to evaluate ground elevation.
    disc_heights : Iterable[float]
        Heights at which discs were extracted; used to constrain acceptable offsets.
    XSectionThickness : float
        Thickness of the vertical slicing window for disc extraction.
    debugdir : str, optional
        Directory where diagnostic outputs are written. No files are produced when ``None``.
    grid_resolution : int, optional
        Sampling resolution passed to :func:`build_mesh_height_index`. Defaults to ``100``.
    outpcdformat : str, optional
        Extension used for diagnostic point clouds. Defaults to ``\"txt\"``.

    Returns
    -------
    np.ndarray
        Concatenated array containing per-point terrain distances and tree heights.
    """
    def _compute_tree_height(points_np):
        """Estimate tree height as the distance between the lowest and highest points.

        Parameters
        ----------
        points_np : np.ndarray
            Array of shape ``(N, M)`` with XYZ coordinates in the first three columns.

        Returns
        -------
        numpy.float32
            Euclidean distance between the points with minimum and maximum ``Z``.
        """
        if points_np.shape[0] == 0:
            return np.float32(0.0)
        zs = points_np[:, 2]
        i_min = int(np.argmin(zs))
        i_max = int(np.argmax(zs))
        return np.float32(np.linalg.norm(points_np[i_max, :3] - points_np[i_min, :3]))

    # Prebuild mesh index once
    prebuilt = build_mesh_height_index(dtmmesh, grid_resolution=grid_resolution)

    results = []
    max_allow = (float(np.max(disc_heights)) + 0.5 * float(XSectionThickness)) + 0.01

    for label in unique_labels:
        check_stop()

        # 1) Subset by tree label
        treecloud = repopulated_trees[repopulated_trees[:, -1] == label]
        if treecloud.shape[0] == 0:
            continue

        # 2) Refine by 3D connected component and keep only the lowest-Z component
        refined = LabelConnectedComponents(input_data=treecloud, voxel_size=0.4, min_points=10)
        if refined.shape[0] == 0:
            continue
        lowest_idx = int(np.argmin(refined[:, 2]))
        lowest_ccid = refined[lowest_idx, -1]
        low_component = refined[refined[:, -1] == lowest_ccid]

        # 3) Terrain vertical distances (reusing prebuilt mesh index)
        distances = CloudToMeshVerticalDistance(
            low_component,
            prebuilt_index=prebuilt,
            max_dist=max_allow,
        )  # -> (N, M+1)

        # 4) Tree height in 3D between minZ and maxZ points
        tree_h = _compute_tree_height(distances)

        # 5) Append height as last column
        hcol = np.full((distances.shape[0], 1), tree_h, dtype=np.float32)
        out = np.hstack((distances.astype(np.float32, copy=False), hcol))
        results.append(out)

    if not results:
        return np.empty((0, repopulated_trees.shape[1] + 2), dtype=np.float32)

    terrain_data = np.concatenate(results, axis=0)

    if debugdir is not None:
        os.makedirs(debugdir, exist_ok=True)
        debug_path = os.path.join(debugdir, f"CloudTerrainDistances.{outpcdformat}")
        SavePointCloud(terrain_data, debug_path, shiftby=shiftby)

    return terrain_data


@timedone
def ExtractCrossSections(repopulated_trees, shiftby, disc_heights, XSectionThickness, debug=False, folder=None, outpcdformat = "txt"):
    """Slice a Z-sorted point cloud into horizontal discs at specified heights.

    Parameters
    ----------
    repopulated_trees : str or np.ndarray
        Path to a point cloud file or an in-memory array containing tree data.
    shiftby : Sequence[float]
        Translation applied when persisting debug exports.
    disc_heights : Iterable[float]
        Heights (in metres) at which to extract cross sections.
    XSectionThickness : float
        Thickness of the vertical window centred on each height.
    debug : bool, optional
        When ``True`` writes intermediate outputs to ``folder``. Defaults to ``False``.
    folder : str, optional
        Directory receiving debug outputs when ``debug`` is enabled.
    outpcdformat : str, optional
        File extension used for debug point clouds. Defaults to ``\"txt\"``.

    Returns
    -------
    np.ndarray
        Concatenated disc catalogue whose final column stores the slice height.
    """
    if XSectionThickness <= 0:
        raise ValueError("XSectionThickness must be > 0")

    # Load once (works for path or ndarray)
    data = LoadPointCloud(repopulated_trees, return_type="np", fields="all")
    ncols = data.shape[1]

    # Use column as Z 
    zcol = ncols - 1
    z = data[:, zcol]

    # Sort once by Z; stable sort preserves relative order among equal Z
    order = np.argsort(z, kind="mergesort")
    z_sorted = z[order]
    data_sorted = data[order, :]

    t_half = 0.5 * XSectionThickness
    discs_list = []

    # Ensure we can iterate efficiently
    disc_heights = np.asarray(disc_heights, dtype=float)

    for h in disc_heights:
        lo = h - t_half
        hi = h + t_half

        # Find contiguous Z slice in the sorted array
        left = np.searchsorted(z_sorted, lo, side="left")
        right = np.searchsorted(z_sorted, hi, side="right")

        if right <= left:
            continue  # no points in this disc

        block = data_sorted[left:right]

        # Append constant column h
        # Use same dtype as data where possible
        h_col = np.full((block.shape[0], 1), h, dtype=block.dtype if np.issubdtype(block.dtype, np.number) else float)
        discs_h = np.column_stack((block, h_col))
        discs_list.append(discs_h)

        if debug and folder == "Yeees":
            SavePointCloud(discs_h, os.path.join(folder, f"StemDiscsUnprocessed_{h}.{outpcdformat}"), shiftby=shiftby)

    if discs_list:
        discsall = np.vstack(discs_list)
        if debug and folder:
            SavePointCloud(discsall, os.path.join(folder, f"StemDiscsUnprocessed.{outpcdformat}"), shiftby=shiftby)
        return discsall

    # Return an empty array with the right shape (M+1 columns)
    return np.empty((0, ncols + 1), dtype=data.dtype if np.issubdtype(data.dtype, np.number) else float)


@njit(parallel=True, fastmath=True, cache=True)
def _evaluate_circle_candidates(x, y, seeds):
    n_candidates = seeds.shape[0]
    n_points = x.shape[0]

    errors = np.empty(n_candidates, dtype=np.float64)
    centers = np.empty((n_candidates, 3), dtype=np.float64)

    for i in prange(n_candidates):
        i0 = seeds[i, 0]
        i1 = seeds[i, 1]
        i2 = seeds[i, 2]

        x1 = x[i0]
        y1 = y[i0]
        x2 = x[i1]
        y2 = y[i1]
        x3 = x[i2]
        y3 = y[i2]

        bc = 0.5 * (x1 * x1 + y1 * y1 - x2 * x2 - y2 * y2)
        cd = 0.5 * (x2 * x2 + y2 * y2 - x3 * x3 - y3 * y3)
        det = (x1 - x2) * (y2 - y3) - (x2 - x3) * (y1 - y2)

        if math.fabs(det) < 1e-12:
            errors[i] = math.inf
            centers[i, 0] = centers[i, 1] = centers[i, 2] = 0.0
            continue

        inv_det = 1.0 / det
        xc = (bc * (y2 - y3) - cd * (y1 - y2)) * inv_det
        yc = ((x1 - x2) * cd - (x2 - x3) * bc) * inv_det

        dx = x2 - xc
        dy = y2 - yc
        radius_sq = dx * dx + dy * dy
        if radius_sq <= 0.0:
            errors[i] = math.inf
            centers[i, 0] = centers[i, 1] = centers[i, 2] = 0.0
            continue

        radius = math.sqrt(radius_sq)
        err_sum = 0.0
        for j in range(n_points):
            dxj = x[j] - xc
            dyj = y[j] - yc
            dist = math.sqrt(dxj * dxj + dyj * dyj)
            diff = dist - radius
            err_sum += diff * diff

        errors[i] = math.sqrt(err_sum / n_points)
        centers[i, 0] = xc
        centers[i, 1] = yc
        centers[i, 2] = radius

    return errors, centers


def _fit_circle_ransac_fallback(x, y, seeds):
    best_error = math.inf
    best_params = (0.0, 0.0, 0.0)
    n_points = x.shape[0]

    for row in seeds:
        i0, i1, i2 = int(row[0]), int(row[1]), int(row[2])
        x1, y1 = x[i0], y[i0]
        x2, y2 = x[i1], y[i1]
        x3, y3 = x[i2], y[i2]

        bc = 0.5 * (x1 * x1 + y1 * y1 - x2 * x2 - y2 * y2)
        cd = 0.5 * (x2 * x2 + y2 * y2 - x3 * x3 - y3 * y3)
        det = (x1 - x2) * (y2 - y3) - (x2 - x3) * (y1 - y2)
        if abs(det) < 1e-12:
            continue

        inv_det = 1.0 / det
        xc = (bc * (y2 - y3) - cd * (y1 - y2)) * inv_det
        yc = ((x1 - x2) * cd - (x2 - x3) * bc) * inv_det

        dx = x2 - xc
        dy = y2 - yc
        radius_sq = dx * dx + dy * dy
        if radius_sq <= 0.0:
            continue

        radius = math.sqrt(radius_sq)
        err_sum = 0.0
        for j in range(n_points):
            dxj = x[j] - xc
            dyj = y[j] - yc
            dist = math.sqrt(dxj * dxj + dyj * dyj)
            diff = dist - radius
            err_sum += diff * diff

        error = math.sqrt(err_sum / n_points)
        if error < best_error:
            best_error = error
            best_params = (xc, yc, radius)

    return best_params[0], best_params[1], best_params[2], best_error


def FitCircleRANSAC(input_data, n=1000, d=0.01):
    """Fit a circle to a disc slice using a Numba-accelerated RANSAC routine.

    Parameters
    ----------
    input_data : str or np.ndarray
        Point set representing a single tree disc, or path to a compatible file.
    n : int, optional
        Number of random samples drawn during RANSAC. Defaults to ``1000``.
    d : float, optional
        Maximum inlier distance from the candidate circle. Defaults to ``0.01``.

    Returns
    -------
    tuple[float, float, float, float]
        ``(xc, yc, radius, rmse)`` where ``(xc, yc)`` is the circle centre in the
        original coordinate system, ``radius`` is expressed in the same units as the
        input, and ``rmse`` is the fit residual.
    """
    points = LoadPointCloud(input_data, "np")
    points = np.asarray(points, dtype=np.float64)

    if points.shape[0] < 3:
        raise ValueError("FitCircleRANSAC requires at least three points.")

    centroid = points.mean(axis=0)
    points_centered = points - centroid
    x = points_centered[:, 0]
    y = points_centered[:, 1]

    n_points = x.shape[0]
    if n_points < 3:
        raise ValueError("FitCircleRANSAC requires at least three points.")

    rng = np.random.default_rng()
    iterations = max(1, int(n))
    seeds = np.empty((iterations, 3), dtype=np.int64)
    indices = np.arange(n_points, dtype=np.int64)
    for i in range(iterations):
        seeds[i, :] = rng.choice(indices, size=3, replace=False)

    errors, centers = _evaluate_circle_candidates(x, y, seeds)
    best_idx = int(np.argmin(errors))
    best_error = float(errors[best_idx])

    if not math.isfinite(best_error):
        xc_rel, yc_rel, radius_rel, best_error = _fit_circle_ransac_fallback(x, y, seeds)
    else:
        xc_rel = centers[best_idx, 0]
        yc_rel = centers[best_idx, 1]
        radius_rel = centers[best_idx, 2]

    radius_rel = float(radius_rel)
    if not math.isfinite(radius_rel) or radius_rel <= 0.0:
        xc_rel, yc_rel, radius_rel, best_error = _fit_circle_ransac_fallback(x, y, seeds)

    if (not math.isfinite(best_error)) or (not math.isfinite(radius_rel)) or radius_rel <= 0.0:
        return float(centroid[0]), float(centroid[1]), 0.0, float("inf")

    radius = round(float(radius_rel), 3)
    xc = float(xc_rel + centroid[0])
    yc = float(yc_rel + centroid[1])
    return xc, yc, radius, float(best_error)

def process_fit_cross_section(disc, RANSACn, RANSACd, CCfinestep, ptsfilter, datatype, XSectionThickness, segmentate):
    """Clean a single disc slice and fit a circle returning augmented attributes.

    Parameters
    ----------
    disc : np.ndarray
        Input cross-section points for a single tree slice.
    RANSACn : int
        Number of iterations forwarded to :func:`FitCircleRANSAC`.
    RANSACd : float
        Inlier tolerance used during the RANSAC circle fit.
    CCfinestep : float
        Voxel size for :func:`LabelConnectedComponents`.
    ptsfilter : int
        Minimum component size to keep after connected-component filtering.
    datatype : str
        Input data classification controlling verticality and SOR parameters.
    XSectionThickness : float
        Slice thickness used when "datatype" corresponds to UAV LiDAR.
    segmentate : bool
        ``True`` to compute a concave hull perimeter for segmentated crowns.

    Returns
    -------
    np.ndarray or None
        Disc with appended circle-fit fields, or ``None`` if processing fails.
    """
    check_stop()
    if disc is None or disc.shape[0] == 0:
        print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Skipping empty or invalid disc.")
        return None
    
    # Set parameters based on datatype.
    if datatype in ("MLS Raw", "MLS Cropped", "CRP", "iPhone LiDAR"):
        vradius = 0.05
        sornpoints = 12
    elif datatype == "UAV LiDAR":
        vradius = XSectionThickness
        sornpoints = 3
    else:
        vradius = 0.05
        sornpoints = 12

    try:
        if segmentate:
            xy = disc[:, :2]
            hullperimeter = concave_hull_perimeter(xy)
        else:
            hullperimeter = np.nan

        disc = SORFilter(disc, npoints=sornpoints, sd=1)
        disc = ComputeVerticality(disc, radius=vradius)
        disc = FilterByValue(disc, -1, 0.5, 1)
        disc = RemoveField(disc, -1)
        disc = LabelConnectedComponents(disc, voxel_size=CCfinestep, min_points=ptsfilter, keep_indices=1)
        disc = RemoveField(disc, -1)

        # Fit a circle to the disc using RANSAC.
        x_center, y_center, radius, error = FitCircleRANSAC(disc, n=RANSACn, d=RANSACd)
        disc = AddConstantFields(disc, x_center, y_center, radius, error, hullperimeter, field_dtype=np.float32)
        return disc
    except Exception as e:
        print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Failed to fit circle to disc: {e}. Disc removed.")
        return None

@timedone
def FitCrossSections(
    discsall,
    RANSACn,
    RANSACd,
    CCfinestep,
    ptsfilter,
    datatype,
    XSectionThickness,
    segmentate,
    prefer_threads=True,
):
    """Fit circles on each cross-sectional disc using Numba-accelerated kernels.

    Parameters
    ----------
    discsall : Iterable[np.ndarray]
        Sequence of cross-section arrays to process.
    RANSACn : int
        Number of RANSAC iterations forwarded to :func:`process_fit_cross_section`.
    RANSACd : float
        Inlier tolerance forwarded to :func:`process_fit_cross_section`.
    CCfinestep : float
        Voxel size used by the connected-component filter.
    ptsfilter : int
        Minimum component size retained after filtering.
    datatype : str
        Input data classification controlling downstream filtering heuristics.
    XSectionThickness : float
        Thickness of the slicing window used when ``datatype`` requires it.
    segmentate : bool
        When ``True`` computes concave hull perimeters for each disc.
    prefer_threads : bool, optional
        Retained for backwards compatibility; has no effect in the new implementation.

    Returns
    -------
    list[np.ndarray]
        Disc arrays augmented with circle-fit attributes. Invalid discs are omitted.
    """

    if not discsall:
        return []

    valid_discs = [disc for disc in discsall if isinstance(disc, np.ndarray) and disc.size]
    if not valid_discs:
        return []

    worker = functools.partial(
        process_fit_cross_section,
        RANSACn=RANSACn,
        RANSACd=RANSACd,
        CCfinestep=CCfinestep,
        ptsfilter=ptsfilter,
        datatype=datatype,
        XSectionThickness=XSectionThickness,
        segmentate=segmentate,
    )

    _ = prefer_threads  # compatibility placeholder; no effect in the current implementation

    results = []
    for disc in valid_discs:
        result = worker(disc)
        if result is not None:
            results.append(result)

    return results


def RenameFilesInDirectory(pcdpath):
    """Prefix artefacts in processing folders with the source cloud name.

    Parameters
    ----------
    pcdpath : str
        Path to the source point cloud whose processing directories should be renamed.
    """
    main_folder_path = os.path.dirname(pcdpath)
    main_file_name = os.path.splitext(os.path.basename(pcdpath))[0]  # Get the main file name

    for root, dirs, files in os.walk(main_folder_path):
        # Check if the current folder contains the main file name
        if f"{main_file_name}-Processing" in os.path.basename(root) or f"{main_file_name}-Processing-reevaluate" in os.path.basename(root):
            # Process each file in the directory
            for file in files:
                # Skip files that already contain the main file name
                if main_file_name in file or "processing.log" in file:
                    continue

                # Get the full file path
                old_file_path = os.path.join(root, file)

                # Create the new file name
                new_file_name = f"{main_file_name}_{file}"

                # Get the new file path
                new_file_path = os.path.join(root, new_file_name)

                # Rename the file
                os.rename(old_file_path, new_file_path)
                # Uncomment the line below for debugging
                # print(f"Renamed: {old_file_path} to {new_file_path}")

def SaveToShapefile(filtered_np, output_dir, output_file, epsg=32633, shiftby=(0, 0)):
    """Write disc centroids to a shapefile with the requested CRS.

    Parameters
    ----------
    filtered_np : pandas.DataFrame
        Tabular representation of discs containing at least ``DISC_X`` and ``DISC_Y``.
    output_dir : str
        Directory where the shapefile is written.
    output_file : str
        Target file name, with or without the ``.shp`` extension.
    epsg : int, optional
        EPSG code for the output coordinate reference system. Defaults to ``32633``.
    shiftby : Sequence[float], optional
        XY offset applied before export. Defaults to ``(0, 0)``.
    """
    # Ensure the output file ends with '.shp'
    if not output_file.endswith('.shp'):
        output_file += '.shp'

    # Full path to the shapefile
    output_path = os.path.join(output_dir, output_file)

    # Check if required columns are present
    required_columns = {'DISC_X', 'DISC_Y'}
    if not required_columns.issubset(filtered_np.columns):
        raise ValueError(f"Filtered DataFrame must contain {required_columns} columns.")

    # Apply the shift to coordinates
    shift_x, shift_y = shiftby[:2]
    filtered_np.loc[:, 'DISC_X'] = filtered_np['DISC_X'] + shift_x
    filtered_np.loc[:, 'DISC_Y'] = filtered_np['DISC_Y'] + shift_y
    # filtered_df['DISC_X'] = filtered_df['DISC_X'] + shift_x
    # filtered_df['DISC_Y'] = filtered_df['DISC_Y'] + shift_y

    # Convert DataFrame to GeoDataFrame
    gdf = gpd.GeoDataFrame(
        filtered_np,
        geometry=[Point(xy) for xy in zip(filtered_np['DISC_X'], filtered_np['DISC_Y'])],
        crs=f'epsg:{epsg}'
    )

    # Save GeoDataFrame to a shapefile
    gdf.to_file(output_path, driver='ESRI Shapefile')
    print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Shapefile saved as: {output_path}")


    ####UNFLATTEN
    #print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Completed.")

@timedone
def UpdateCrownIDs(trees_path, crowns_path, epsg_code=3067):
    """Update crown polygons with IDs derived from contained tree points.

    Parameters
    ----------
    trees_path : str
        Path to the tree point shapefile containing the ``ID_TREE`` field.
    crowns_path : str
        Path to the crown polygon shapefile containing the ``CrownID`` field.
    epsg_code : int, optional
        EPSG code used to project both layers before matching. Defaults to ``3067``.
    """
    try:
        # Load the shapefiles and ensure correct CRS
        trees_gdf = gpd.read_file(trees_path).to_crs(epsg=epsg_code)
        crowns_gdf = gpd.read_file(crowns_path).to_crs(epsg=epsg_code)

        updated_crown_ids = []

        for _, crown in crowns_gdf.iterrows():
            crown_geom = crown.geometry
            original_crown_id = crown['CrownID']
            tree_ids = []

            for _, tree in trees_gdf.iterrows():
                tree_geom = tree.geometry
                tree_id = int(tree['ID_TREE'])

                # Check if tree point is within the crown polygon
                if crown_geom.contains(tree_geom):
                    tree_ids.append(str(tree_id))

            # Determine new CrownID
            if tree_ids:
                new_crown_id = "_".join(tree_ids)
            else:
                new_crown_id = f"{original_crown_id}x"

            updated_crown_ids.append(new_crown_id)

        # Update the CrownID field in the GeoDataFrame
        crowns_gdf["CrownID"] = updated_crown_ids

        # Overwrite the crowns shapefile with updated data
        crowns_gdf.to_file(crowns_path)
        print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Updated crowns shapefile saved to: {crowns_path}")

    except Exception as e:
        print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Error: {e}")

###General###
def CheckEPSGIsMetric(epsg_code=None):
    """Ensure the provided EPSG code resolves to a projected CRS with metric units.

    Parameters
    ----------
    epsg_code : int or str, optional
        EPSG identifier to validate. Must correspond to a projected CRS expressed in
        metres.

    Returns
    -------
    int
        Normalized EPSG code.
    """

    if epsg_code is None:
        raise ValueError("An EPSG code must be provided.")

    try:
        code = int(epsg_code)
    except (TypeError, ValueError) as exc:
        raise ValueError("EPSG code must be an integer.") from exc

    try:
        crs = CRS.from_epsg(code)
    except CRSError as exc:
        raise ValueError(f"Invalid EPSG code: {code}") from exc

    if not crs.is_projected:
        raise ValueError(
            f"EPSG {code} corresponds to a geographic CRS with angular units. "
            "Please use a projected CRS with metric units."
        )

    print(
        f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: "
        f"Valid EPSG code ({code}) for metric coordinates."
    )
    return code

def RenameFile(pathtofile, newname):
    """Rename a file in-place while preserving its directory.

    Parameters
    ----------
    pathtofile : str
        Full path to the existing file.
    newname : str
        Desired file name (extension optional).

    Returns
    -------
    str
        Path to the renamed file.
    """
    # Ensure the file exists
    if not os.path.isfile(pathtofile):
        raise FileNotFoundError(f"The file '{pathtofile}' does not exist.")

    # Extract the directory and current file extension
    dir_name = os.path.dirname(pathtofile)
    _, ext = os.path.splitext(pathtofile)

    # Ensure the new name includes the extension
    if not os.path.splitext(newname)[1]:
        newname += ext

    # Create the new file path
    new_path = os.path.join(dir_name, newname)

    # Check if a file with the new name already exists
    if os.path.exists(new_path):
        raise FileExistsError(f"A file with the name '{newname}' already exists in the directory '{dir_name}'.")

    # Rename the file
    os.rename(pathtofile, new_path)
    print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: File renamed to '{new_path}'")

    return new_path

def StopDropbox():
    """Stop the Dropbox sync client to release locked files."""

    system = platform.system()
    commands = {
        "Windows": [["taskkill", "/f", "/im", "Dropbox.exe"]],
        "Darwin": [["pkill", "Dropbox"]],
        "Linux": [["pkill", "dropbox"]],
    }

    if system not in commands:
        print(f"Warning: Unsupported platform for StopDropbox: {system}")
        return

    for cmd in commands[system]:
        subprocess.run(cmd, check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def StopGoogleDrive():
    """Terminate Google Drive sync processes to prevent file locking."""

    system = platform.system()
    commands = {
        "Windows": [["taskkill", "/f", "/im", "googledrivesync.exe"],
                     ["taskkill", "/f", "/im", "GoogleDriveFS.exe"]],
        "Darwin": [["pkill", "Google Drive"]],
        "Linux": [["pkill", "google-drive"]],
    }

    if system not in commands:
        print(f"Warning: Unsupported platform for StopGoogleDrive: {system}")
        return

    for cmd in commands[system]:
        subprocess.run(cmd, check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def StopiCloud():
    """Terminate Apple iCloud sync clients when present."""

    system = platform.system()
    commands = {
        "Windows": [["taskkill", "/f", "/im", "iCloud.exe"]],
        "Darwin": [["pkill", "iCloud"]],
    }

    if system not in commands:
        print(f"Info: iCloud has no native support on this platform: {system}")
        return

    for cmd in commands[system]:
        subprocess.run(cmd, check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def StopOnedrive():
    """Terminate Microsoft OneDrive clients across supported platforms."""

    system = platform.system()
    commands = {
        "Windows": [["taskkill", "/f", "/im", "OneDrive.exe"]],
        "Darwin": [["pkill", "OneDrive"]],
        "Linux": [["pkill", "onedrive"]],
    }

    if system not in commands:
        print(f"Warning: Unsupported platform for StopOnedrive: {system}")
        return

    for cmd in commands[system]:
        subprocess.run(cmd, check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def TimeNow():
    """Return the current local time (HH:MM:SS) as a string."""
    return datetime.now().strftime("%H:%M:%S")

###GUI###
def check_stop():
    """
    Checks for stop and pause flags. If stop is triggered, raise an exception. 
    If paused, wait for the pause to be cleared before continuing.
    """
    global stop_processing
    if stop_processing:  # Check for stop flag
        raise StopProcessException("Processing was stopped by user.")
    
    # Check for pause flag and wait until it is cleared
    while not pause_event.is_set():
        # Check for stop while paused
        if stop_processing:
            raise StopProcessException("Processing was stopped by user.")
        time.sleep(0.1)  # Avoid busy-waiting

class StopProcessException(Exception):
    """Custom exception to stop the processing."""
    pass

global stop_processing
stop_processing = False

###Point Clouds###
def AddConstantFields(input_data, *fieldvalues, field_dtype=None):
    """
    Append multiple constant-valued columns to a point cloud (NumPy array or file path).

    Parameters
    ----------
    input_data : str or np.ndarray
        Path to the point cloud file or a NumPy array (NxM).
    fieldvalues : float | Sequence[float]
        Positional values appended as constant columns. Provide them either as
        separate positional arguments or as a single iterable.
    field_dtype : np.dtype, optional
        Data type for the new columns. Defaults to the input array's dtype.

    Returns
    -------
    np.ndarray
        Updated array with the new columns appended at the end.
    """
    # Load as NumPy
    data = LoadPointCloud(input_data, return_type="np", fields="all")

    # Allow a single iterable or varargs
    if len(fieldvalues) == 1 and not np.isscalar(fieldvalues[0]):
        values = list(fieldvalues[0])
    else:
        values = list(fieldvalues)

    if not values:
        return data  # nothing to add

    # Build all-new columns at once
    n_rows = data.shape[0]
    dtype_out = field_dtype if field_dtype is not None else data.dtype
    newcols = np.column_stack(
        [np.full((n_rows, 1), v, dtype=dtype_out) for v in values]
    )

    return np.hstack((data, newcols))

def CalculateMeshArea(mesh):
    """Calculate the surface area of a given mesh.

    Parameters
    ----------
    mesh : pyvista.PolyData
        Surface mesh whose area should be measured.

    Returns
    -------
    float
        Total surface area of the mesh.
    """
    if not isinstance(mesh, pv.PolyData):
        raise TypeError("The input must be a PyVista PolyData object.")

    # Use PyVista's built-in area calculation
    area = mesh.area

    print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: The total surface area of the mesh is {area:.6f} units^m.")
    return area

@timedone
def ChunkPointCloudBySize(points, chunk_size=10):
    """
    Chunks a point cloud into pieces of approximately `chunk_size` meters based on the XY bounding box.
    
    Parameters
    ----------
    points : np.ndarray
        An (N, 3) numpy array (or (N, 2)) representing the point cloud. Only the first two
        columns (X and Y) are used for chunking.
    chunk_size : float, optional
        Desired size of each chunk in meters (default is 10 meters).
        
    Returns
    -------
    list[np.ndarray]
        Arrays of points belonging to each spatial chunk.
    """
    points = LoadPointCloud(points, "np")
    # Compute the bounding box for the x and y coordinates
    x_min, x_max = np.min(points[:, 0]), np.max(points[:, 0])
    y_min, y_max = np.min(points[:, 1]), np.max(points[:, 1])
    
    # Determine the number of chunks needed along each axis
    n_x = max(1, int(np.ceil((x_max - x_min) / chunk_size)))
    n_y = max(1, int(np.ceil((y_max - y_min) / chunk_size)))
    
    # Create grid edges
    x_edges = np.linspace(x_min, x_max, n_x + 1)
    y_edges = np.linspace(y_min, y_max, n_y + 1)
    
    chunks = []
    
    # Loop over each cell in the grid
    for i in range(n_x):
        for j in range(n_y):
            # Define the boundaries for the current chunk
            x0, x1 = x_edges[i], x_edges[i + 1]
            y0, y1 = y_edges[j], y_edges[j + 1]
            
            # Create masks to filter points within the chunk
            x_mask = (points[:, 0] >= x0) & (points[:, 0] < x1)
            y_mask = (points[:, 1] >= y0) & (points[:, 1] < y1)
            
            # Include the upper boundary for the final bins
            if i == n_x - 1:
                x_mask = (points[:, 0] >= x0) & (points[:, 0] <= x1)
            if j == n_y - 1:
                y_mask = (points[:, 1] >= y0) & (points[:, 1] <= y1)
            
            mask = x_mask & y_mask
            chunk = points[mask]
            chunks.append(chunk)
    
    print(f"[{inspect.currentframe().f_code.co_name}]: Done")  
    return chunks

@timedone
def ComputeDensity(input_data, radius=0.1, outputdir=None, shiftby=[0,0,0], mode="3D", outpcdformat = "txt"):
    """
    Compute per-point neighbor counts within 'radius' (density) for a point cloud.

    Parameters
    ----------
    input_data : str or np.ndarray
        File path or NxM NumPy array.
        - For mode="3D": at least 3 columns (X,Y,Z).
        - For mode="2D": at least 2 columns (X,Y). Z is ignored if present.
    radius : float
        Neighborhood radius.
    outputdir : str or None
        If set (or input is a path), saves the result alongside the input.
    shiftby : sequence of 3 floats
        Passed through to SavePointCloud when saving.
    mode : {"3D","2D"}
        "3D" (default): density in XYZ space.
        "2D": density in XY plane (works with Nx2 or Nx>=3 arrays).
    outpcdformat : str, optional
        File extension to use when persisting the augmented cloud. Defaults to ``"txt"``.

    Returns
    -------
    np.ndarray
        Input array with an extra last column containing integer neighbor counts.
        (The dtype of the whole array may upcast to accommodate mixed types.)
    """
    # Load as NumPy
    data = LoadPointCloud(input_data, return_type="np", fields="all")
    mode_up = str(mode).upper()
    if mode_up not in ("2D", "3D"):
        raise ValueError("mode must be '2D' or '3D'.")

    # Validate columns by mode
    required_cols = 2 if mode_up == "2D" else 3
    if data.shape[1] < required_cols:
        raise ValueError(f"Point cloud must have at least {required_cols} columns for mode='{mode_up}'.")

    # Coordinates for KD-tree
    dims = 2 if mode_up == "2D" else 3
    coords = np.ascontiguousarray(data[:, :dims], dtype=np.float64)

    # KD-tree and parallel radius query
    tree = cKDTree(coords)
    try:
        counts = tree.query_ball_point(coords, r=float(radius), return_length=True, workers=-1)
    except TypeError:  # fallback for older SciPy without 'workers'
        counts = tree.query_ball_point(coords, r=float(radius), return_length=True)

    counts = np.asarray(counts, dtype=np.int32)

    # Append density column (keeps returned arrays unshifted)
    out = np.hstack((data, counts[:, None]))

    # Save if requested
    if isinstance(input_data, str) or outputdir is not None:
        if isinstance(input_data, str):
            dir_name, base_name = os.path.split(input_data)
            file_name, ext = os.path.splitext(base_name)
        else:
            dir_name, file_name, ext = outputdir, "cloud", f".{outpcdformat}"

        if dir_name and not os.path.isdir(dir_name):
            os.makedirs(dir_name, exist_ok=True)

        output_file = os.path.join(dir_name, f"{file_name}_density{ext}")

        # If original data was purely 2D (no Z), pad Z=0 ONLY for saving so SavePointCloud gets XYZ first.
        save_arr = out
        if data.shape[1] < 3:
            N = out.shape[0]
            z = np.zeros((N, 1), dtype=out.dtype)
            # out currently = [X,Y, (maybe other attrs...), Density]; for 2D inputs it's [X,Y,Density]
            # Insert Z as the 3rd column so XYZ stay first, then any attributes (including Density)
            # Rebuild from original XY to preserve any non-XYZ columns order if ever added later.
            # For plain 2D, this becomes [X, Y, Z=0, Density].
            save_arr = np.hstack((data[:, :2], z, out[:, 2:]))

        SavePointCloud(save_arr, output_file, shiftby=shiftby)
        print(f"[{TimeNow()}] ComputeDensity: saved to {output_file}")

    return out

@njit(parallel=True, fastmath=True, cache=True)
def _verticality_from_neighbors(coords, neighbors, offsets):
    n_points = coords.shape[0]
    result = np.zeros(n_points, dtype=np.float32)

    for i in prange(n_points):
        start = offsets[i]
        end = offsets[i + 1]
        count = end - start

        if count < 3:
            result[i] = np.nan
            continue

        sum_x = 0.0
        sum_y = 0.0
        sum_z = 0.0
        for j in range(start, end):
            idx = neighbors[j]
            px = coords[idx, 0]
            py = coords[idx, 1]
            pz = coords[idx, 2]
            sum_x += px
            sum_y += py
            sum_z += pz

        inv_count = 1.0 / count
        mean_x = sum_x * inv_count
        mean_y = sum_y * inv_count
        mean_z = sum_z * inv_count

        sxx = 0.0
        syy = 0.0
        szz = 0.0
        sxy = 0.0
        sxz = 0.0
        syz = 0.0

        for j in range(start, end):
            idx = neighbors[j]
            dx = coords[idx, 0] - mean_x
            dy = coords[idx, 1] - mean_y
            dz = coords[idx, 2] - mean_z
            sxx += dx * dx
            syy += dy * dy
            szz += dz * dz
            sxy += dx * dy
            sxz += dx * dz
            syz += dy * dz

        scale = 1.0 / count
        cov = np.empty((3, 3), dtype=np.float64)
        cov[0, 0] = sxx * scale
        cov[0, 1] = sxy * scale
        cov[0, 2] = sxz * scale
        cov[1, 0] = sxy * scale
        cov[1, 1] = syy * scale
        cov[1, 2] = syz * scale
        cov[2, 0] = sxz * scale
        cov[2, 1] = syz * scale
        cov[2, 2] = szz * scale

        _, eigvecs = np.linalg.eigh(cov)
        result[i] = 1.0 - abs(eigvecs[2, 0])

    return result

def ComputeVerticality(points, radius=0.01):
    """Compute a verticality metric for each point in a cloud.

    Parameters
    ----------
    points : str or np.ndarray
        Point cloud as an array or path loadable by :func:`LoadPointCloud`.
    radius : float, optional
        Neighborhood radius used to evaluate principal directions. Defaults to ``0.01``.

    Returns
    -------
    numpy.ndarray
        Array augmented with a final column storing the verticality score.
    """

    if radius <= 0:
        raise ValueError("radius must be positive")

    data = LoadPointCloud(points, "np", "all")
    coords = np.ascontiguousarray(data[:, :3], dtype=np.float64)

    tree = cKDTree(coords)
    neighbor_lists = tree.query_ball_point(coords, r=float(radius))

    n_points = coords.shape[0]
    offsets = np.empty(n_points + 1, dtype=np.int64)
    offsets[0] = 0
    total = 0
    for i, neighbors in enumerate(neighbor_lists):
        total += len(neighbors)
        offsets[i + 1] = total

    if total == 0:
        verticality = np.full(n_points, np.nan, dtype=np.float32)
    else:
        flat_neighbors = np.empty(total, dtype=np.int64)
        position = 0
        for neighbors in neighbor_lists:
            length = len(neighbors)
            flat_neighbors[position : position + length] = neighbors
            position += length

        verticality = _verticality_from_neighbors(coords, flat_neighbors, offsets)

    verticality = verticality.astype(data.dtype, copy=False)
    return np.hstack((data, verticality.reshape(-1, 1)))

@njit(parallel=True, fastmath=True)
def _points_in_poly(xs, ys, vx, vy, tol=1e-12):
    """Vectorized even-odd rule point-in-polygon test with edge inclusion.

    Parameters
    ----------
    xs : np.ndarray
        X coordinates of the query points.
    ys : np.ndarray
        Y coordinates of the query points.
    vx : np.ndarray
        X coordinates of polygon vertices.
    vy : np.ndarray
        Y coordinates of polygon vertices.
    tol : float, optional
        Tolerance used for edge inclusion tests. Defaults to ``1e-12``.

    Returns
    -------
    np.ndarray
        Boolean mask indicating whether each point lies inside the polygon.
    """
    n = xs.shape[0]
    m = vx.shape[0]
    res = np.zeros(n, dtype=np.bool_)

    for i in prange(n):
        x = xs[i]; y = ys[i]
        inside = False
        j = m - 1
        for k in range(m):
            xk = vx[k]; yk = vy[k]
            xj = vx[j]; yj = vy[j]

            # Edge check (inclusive)
            # colinear with segment?
            dx = xj - xk
            dy = yj - yk
            cross = (x - xk) * dy - (y - yk) * dx
            if abs(cross) <= tol:
                # within bounding rectangle of the segment?
                if (min(xk, xj) - tol <= x <= max(xk, xj) + tol and
                    min(yk, yj) - tol <= y <= max(yk, yj) + tol):
                    res[i] = True
                    inside = True
                    break

            # Ray crossing (even-odd)
            cond = ( (yk > y) != (yj > y) )
            if cond:
                xinters = xk + (y - yk) * (xj - xk) / (yj - yk)
                if xinters >= x:  # cast ray to +X; >= gives boundary inclusion
                    inside = not inside
            j = k

        if not res[i]:  # if not already set by edge check
            res[i] = inside

    return res

def _as_xy_vertices_from_extent(extent_data, method="convex", alpha=1.0):
    """Normalize supported extent inputs into ordered XY polygon vertices.

    Parameters
    ----------
    extent_data : Any
        Extent description such as a mesh path, raster path, shapely geometry, or an
        array with at least two columns.
    method : {"convex", "concave"}, optional
        Hull extraction approach. ``"concave"`` requires ``alpha``. Defaults to ``"convex"``.
    alpha : float, optional
        Alpha parameter supplied to :func:`compute_concave_hull` when ``method`` is
        ``"concave"``. Defaults to ``1.0``.

    Returns
    -------
    np.ndarray
        Array of vertex coordinates with shape ``(N, 2)``.
    """
    # 1) Get raw 2D points describing the extent
    if isinstance(extent_data, str) and extent_data.lower().endswith(".ply"):
        mesh = o3d.io.read_triangle_mesh(extent_data)
        pts2 = np.asarray(mesh.vertices, dtype=np.float64)[:, :2]
    elif isinstance(extent_data, str) and extent_data.lower().endswith((".tif", ".tiff")):
        pts2 = RasterToPointCloud(extent_data).astype(np.float64)[:, :2]
    elif isinstance(extent_data, Polygon):
        # use given polygon directly
        poly = extent_data
        # fall through to polygon handling below
        pts2 = None
    elif isinstance(extent_data, MultiPolygon):
        # choose largest polygon
        poly = max(list(extent_data.geoms), key=lambda p: p.area)
        pts2 = None
    elif isinstance(extent_data, np.ndarray):
        if extent_data.shape[1] < 2:
            raise ValueError("extent_data ndarray must have at least 2 columns.")
        pts2 = np.ascontiguousarray(extent_data[:, :2], dtype=np.float64)
    else:
        # try to load as point cloud
        arr = LoadPointCloud(extent_data, return_type="np", fields="xyz")
        pts2 = np.ascontiguousarray(arr[:, :2], dtype=np.float64)

    # 2) Build polygon vertices
    if 'poly' in locals() and isinstance(poly, (Polygon, MultiPolygon)):
        # we already have a polygon (from shapely)
        exterior = np.asarray(poly.exterior.coords, dtype=np.float64)
        # drop possible closing duplicate
        if exterior.shape[0] >= 2 and np.allclose(exterior[0], exterior[-1]):
            exterior = exterior[:-1]
        return np.ascontiguousarray(exterior, dtype=np.float64)

    if pts2 is None or pts2.shape[0] < 3:
        raise ValueError("Not enough points to build a polygon extent.")

    if method == "convex":
        hull = ConvexHull(pts2)
        verts = pts2[hull.vertices]
        return np.ascontiguousarray(verts, dtype=np.float64)
    elif method == "concave":
        hull = compute_concave_hull(pts2, alpha=alpha)
        if hull is None or hull.is_empty:
            # fallback to convex
            hullc = ConvexHull(pts2)
            verts = pts2[hullc.vertices]
        else:
            # choose largest polygon if multipolygon
            if isinstance(hull, MultiPolygon):
                hull = max(list(hull.geoms), key=lambda p: p.area)
            verts = np.asarray(hull.exterior.coords, dtype=np.float64)
            # remove closing duplicate if present
            if verts.shape[0] >= 2 and np.allclose(verts[0], verts[-1]):
                verts = verts[:-1]
        return np.ascontiguousarray(verts, dtype=np.float64)
    else:
        raise ValueError("method must be 'convex' or 'concave'.")
@timedone
def CropCloudByExtent(cloud_data, extent_data, method="convex", alpha=1.0, output_path=None, shiftby=None):
    """Crop a point cloud by a convex or concave polygonal extent.

    Parameters
    ----------
    cloud_data : str or np.ndarray
        Source point cloud or path loadable by :func:`LoadPointCloud`.
    extent_data : Any
        Polygon description forwarded to :func:`_as_xy_vertices_from_extent`.
    method : {"convex", "concave"}, optional
        Hull extraction mode. Defaults to ``"convex"``.
    alpha : float, optional
        Alpha parameter when ``method`` equals ``"concave"``. Defaults to ``1.0``.
    output_path : str, optional
        Destination path for the cropped cloud. When ``None``, the result is returned
        only in memory.
    shiftby : Sequence[float], optional
        Translation applied if the cropped cloud is written to disk.

    Returns
    -------
    np.ndarray
        Cropped subset of ``cloud_data``.
    """
    # Load cloud as NumPy
    pts = LoadPointCloud(cloud_data, return_type="np", fields="all")
    if pts.shape[1] < 2:
        raise ValueError("cloud_data must have at least 2 columns (X,Y).")
    pts = np.ascontiguousarray(pts, dtype=np.float64)

    # Build polygon vertices (Nx2)
    poly_xy = _as_xy_vertices_from_extent(extent_data, method=method, alpha=alpha)
    vx = np.ascontiguousarray(poly_xy[:, 0], dtype=np.float64)
    vy = np.ascontiguousarray(poly_xy[:, 1], dtype=np.float64)

    # Fast prefilter by polygon bounding box
    minx, maxx = vx.min(), vx.max()
    miny, maxy = vy.min(), vy.max()
    pts_xy = pts[:, :2]
    bbox_mask = (pts_xy[:, 0] >= minx) & (pts_xy[:, 0] <= maxx) & (pts_xy[:, 1] >= miny) & (pts_xy[:, 1] <= maxy)
    if not np.any(bbox_mask):
        cropped = pts[:0]  # empty
    else:
        # Numba PIP on bbox subset
        sub = pts_xy[bbox_mask]
        inside_sub = _points_in_poly(sub[:, 0], sub[:, 1], vx, vy)
        final_mask = np.zeros(pts.shape[0], dtype=bool)
        final_mask[np.where(bbox_mask)[0][inside_sub]] = True
        cropped = pts[final_mask]

    # Optional save
    if output_path is not None or isinstance(cloud_data, str):
        if output_path is None:
            directory = os.path.dirname(cloud_data)
            name = os.path.basename(cloud_data)
            root, ext = os.path.splitext(name)
            output_path = os.path.join(directory, f"{root}_cropped{ext or '.txt'}")
        SavePointCloud(cropped, output_path, shiftby=shiftby)

    return cropped

def compute_concave_hull(points, alpha=1.0):
    """Compute an alpha-shape (concave hull) from planar points.

    Parameters
    ----------
    points : np.ndarray
        Array of shape ``(N, 2)`` containing XY coordinates.
    alpha : float, optional
        Alpha parameter controlling hull tightness. Smaller values produce tighter hulls.

    Returns
    -------
    shapely.Polygon or shapely.MultiPolygon or None
        Concave hull geometry, or ``None`` when the input cannot form a valid hull.
    """
    if points.shape[0] < 3:
        # Not enough points to form a hull
        return None

    # Compute the concave hull
    hull = alphashape.alphashape(points, alpha)

    # Ensure the hull is a valid Shapely Polygon or MultiPolygon
    if isinstance(hull, (Polygon, MultiPolygon)) and not hull.is_empty:
        return hull

    # Return None if the hull is invalid or empty
    return None

def concave_hull_perimeter(points, alpha=1.0, include_holes=False):
    """Return the perimeter of an alpha-shape hull derived from the input points.

    Parameters
    ----------
    points : np.ndarray
        XY coordinates of the sample points.
    alpha : float, optional
        Alpha parameter passed to :func:`compute_concave_hull`. Defaults to ``1.0``.
    include_holes : bool, optional
        ``True`` to include interior holes in the perimeter calculation. Defaults to ``False``.

    Returns
    -------
    float
        Hull perimeter length.
    """
    hull = compute_concave_hull(points, alpha)
    if hull is None:
        return 0.0

    if include_holes:
        # Shapely's .length = perimeter incl. holes; MultiPolygon sums components
        return hull.length

    # Outer boundary only
    if isinstance(hull, Polygon):
        return hull.exterior.length
    if isinstance(hull, MultiPolygon):
        return sum(p.exterior.length for p in hull.geoms)
    return 0.0

@timedone
def DelaunayMesh25D(input_data, shiftby=None, outputdir=None):
    """
    Perform 2.5D Delaunay triangulation on a point cloud (XY plane) 
    and save the resulting surface mesh.

    Parameters
    ----------
    input_data : str | np.ndarray
        File path or NxM NumPy array (at least 3 columns: X,Y,Z).
    shiftby : sequence of 3 floats, optional
        Shift applied only for the saved mesh (not internally).
    outputdir : str, optional
        Directory to save the resulting mesh file.

    Returns
    -------
    pv.PolyData
        The resulting PyVista mesh object.
    """
    # Load as NumPy
    data = LoadPointCloud(input_data, return_type="np", fields="all")
    if data.shape[1] < 3:
        raise ValueError("The input data must have at least three columns (X, Y, Z).")

    # Extract XY and Z
    points_xy = np.ascontiguousarray(data[:, :2], dtype=np.float64)
    z_values = np.ascontiguousarray(data[:, 2], dtype=np.float64)

    # Perform 2D Delaunay triangulation in XY
    delaunay = Delaunay(points_xy)

    # Combine XY with Z for 3D vertices
    points_xyz = np.column_stack((points_xy, z_values))

    # Build faces array for PyVista
    simplices = delaunay.simplices
    faces = np.hstack([np.insert(s, 0, 3) for s in simplices]).astype(np.int32)

    # Create PyVista mesh
    mesh = pv.PolyData(points_xyz, faces)
    mesh.compute_normals(inplace=True)

    # Save if requested
    if isinstance(input_data, str) or outputdir is not None:
        if isinstance(input_data, str):
            dir_name, base_name = os.path.split(input_data)
            file_name, ext = os.path.splitext(base_name)
        else:
            dir_name, file_name, ext = outputdir, "cloud", ".ply"

        # Save non-shifted mesh
        output_file_shift = os.path.join(dir_name, f"{file_name}_delaunay_SHIFT{ext or '.vtk'}")
        mesh.save(output_file_shift)

        # Shifted version
        if shiftby is None:
            shiftby = globals().get('shiftby', [0,0,0])
        mesh_shifted = mesh.copy()
        mesh_shifted.translate(shiftby, inplace=True)

        output_file = os.path.join(dir_name, f"{file_name}_delaunay{ext or '.vtk'}")
        mesh_shifted.save(output_file)

        print(f"[{TimeNow()}] DelaunayMesh25D: saved to {output_file} and {output_file_shift}")

    return mesh

def FilterByValue(input_data, column, minvalue, maxvalue, outputdir=None, shiftby=None):
    """
    Filters points in a point cloud (NumPy-based) by value range in a column.
    Supports positive and negative indexing, numeric ranges, or percentage strings.

    Parameters
    ----------
    input_data : str or np.ndarray
        File path or point cloud array (NxM).
    column : int
        Column index (positive or negative). -1 means last column, etc.
    minvalue : float or str
        Lower bound for the accepted range. Percentage strings (e.g. ``"10%"``) are
        interpreted relative to the column range.
    maxvalue : float or str
        Upper bound for the accepted range, with the same percentage semantics.
    outputdir : str, optional
        If given, saves filtered cloud there.
    shiftby : tuple or None
        Passed through to SavePointCloud if saving.

    Returns
    -------
    np.ndarray
        Filtered point cloud.
    """
    # Load as numpy
    data = LoadPointCloud(input_data, return_type="np", fields="all")
    ncols = data.shape[1]

    # Normalize column index (support negative indexing)
    if not isinstance(column, int):
        raise TypeError("Column must be an integer index for NumPy arrays.")
    if column < 0:
        column = ncols + column
    if column < 0 or column >= ncols:
        raise IndexError(f"Column index {column} out of bounds for {ncols} columns.")

    col_values = data[:, column]

    # Convert % strings ->numeric values
    vmin, vmax = col_values.min(), col_values.max()
    if isinstance(minvalue, str) and minvalue.endswith('%'):
        frac = float(minvalue.strip('%')) / 100.0
        minvalue = vmin + frac * (vmax - vmin)
    if isinstance(maxvalue, str) and maxvalue.endswith('%'):
        frac = float(maxvalue.strip('%')) / 100.0
        maxvalue = vmin + frac * (vmax - vmin)

    # Apply filter
    mask = (col_values >= minvalue) & (col_values <= maxvalue)
    filtered = data[mask]

    # Save if requested
    if isinstance(input_data, str) or outputdir is not None:
        if isinstance(input_data, str):
            dir_name, base_name = os.path.split(input_data)
            file_name, ext = os.path.splitext(base_name)
        else:
            dir_name, file_name, ext = outputdir, "cloud", ".txt"

        suffix = f"_filtered_col{column}"
        output_file = os.path.join(dir_name, f"{file_name}{suffix}{ext}")
        SavePointCloud(filtered, output_file, shiftby=shiftby)
        print(f"[{TimeNow()}] Filtered point cloud has been saved to {output_file}")

    return filtered

@timedone
def FlattenPointCloud(input_data, outputdir=None, shiftby=(0, 0), outpcdformat="txt"):
    """Zero the Z axis of a cloud while preserving the original elevation as an attribute.

    Parameters
    ----------
    input_data : str or np.ndarray
        Path to a point cloud or an array containing XYZ coordinates.
    outputdir : str, optional
        Target directory for the flattened export. Defaults to the input location.
    shiftby : Sequence[float], optional
        XY shift applied when saving. Defaults to ``(0, 0)``.
    outpcdformat : str, optional
        Extension used when writing the flattened cloud. Defaults to ``"txt"``.

    Returns
    -------
    np.ndarray
        Modified array where the third column is flattened to zero and the original
        Z is appended as column four.
    """
    # Load point cloud as NumPy array
    data = LoadPointCloud(input_data, "np")  # shape: (N, 3) or more

    # Preserve original Z
    original_z = data[:, 2].copy()

    # Flatten Z
    data[:, 2] = 0

    # Append original Z as a new column
    data = np.insert(data, 3, original_z, axis=1)

    # Determine output path if saving
    save_output = False
    if isinstance(input_data, str):
        dir_name, base_name = os.path.split(input_data)
        file_name, ext = os.path.splitext(base_name)
        save_output = True
    elif outputdir:
        dir_name = outputdir
        file_name, ext = "cloud", f".{outpcdformat}"
        save_output = True

    # Save flattened point cloud
    if save_output:
        output_file = os.path.join(dir_name, f"{file_name}_flat{ext}")
        SavePointCloud(data, output_file, shiftby=shiftby)
        print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Point cloud saved to {output_file}")

    return data

def GetBoundingBox(input_data):
    """Calculate the axis-aligned bounding box of a point cloud.

    Parameters
    ----------
    input_data : str or np.ndarray
        Path to a point cloud file or an array with XYZ columns.

    Returns
    -------
    list[float]
        List containing ``[xmin, xmax, ymin, ymax, zmin, zmax]``.
    """
    input_data = LoadPointCloud(input_data, "np", "xyz")
    
    # Calculate min and max for each axis
    xmin, ymin, zmin = np.min(input_data, axis=0)
    xmax, ymax, zmax = np.max(input_data, axis=0)
    
    # Return the bounding box as a list
    bbox = [xmin, xmax, ymin, ymax, zmin, zmax]
    return bbox

@timedone
def IdentifyDiscs(discsall, min_points=15, labelsindex=-3, heightsindex=-1, height_decimals=None):
    """Group discs by label and height, returning only sufficiently populated groups.

    Parameters
    ----------
    discsall : np.ndarray
        Stack of disc records with label and height columns.
    min_points : int, optional
        Minimum number of records per group. Defaults to ``15``.
    labelsindex : int, optional
        Column index storing the tree label. Defaults to ``-3``.
    heightsindex : int, optional
        Column index storing disc height. Defaults to ``-1``.
    height_decimals : int or None, optional
        When provided, heights are rounded to this precision before grouping to reduce floating-point jitter.

    Returns
    -------
    list[np.ndarray]
        Disc groups meeting the ``min_points`` threshold.
    """
    if discsall.size == 0:
        return []

    # Columns: label at -3, height at -1 (as in your pipeline)
    labels  = discsall[:, labelsindex]
    heights = discsall[:, heightsindex]

    # Ensure dtypes without extra copying if already correct
    labels  = labels.astype(np.int64, copy=False)
    heights = heights.astype(np.float64, copy=False)

    # Optional: stabilize float grouping if needed
    if height_decimals is not None:
        hkey = np.round(heights, height_decimals)
    else:
        hkey = heights

    # Sort once: primary key = labels, secondary = height
    # (last key is primary for lexsort)
    idx = np.lexsort((hkey, labels))

    Ls = labels[idx]
    Hs = hkey[idx]

    # Run-length encode on consecutive (label, height) pairs
    n = Ls.size
    if n == 0:
        return []

    # Where a new group starts (change in label or height)
    change = (Ls[1:] != Ls[:-1]) | (Hs[1:] != Hs[:-1])
    starts = np.empty(change.sum() + 1 + 1, dtype=np.int64)  # +1 for first, +1 for sentinel end
    starts[0] = 0
    starts[1:-1] = np.nonzero(change)[0] + 1
    starts[-1] = n

    counts = np.diff(starts)
    keep = counts >= min_points
    if not np.any(keep):
        return []

    kept_starts = starts[:-1][keep]
    kept_ends   = starts[1:][keep]

    # Build result; each is a contiguous slice *in the sorted index*.
    # (This is a copy, same as your original; but we avoid extra intermediates.)
    out = [discsall[idx[s:e]] for s, e in zip(kept_starts, kept_ends)]
    return out

def LabelConnectedComponents(input_data, voxel_size=0.1, min_points=10, keep_indices=-1):
    """Perform connected-components analysis on a voxelized point cloud without dense grids.

    Parameters
    ----------
    input_data : str or np.ndarray
        Point cloud to segment (XYZ plus optional attributes).
    voxel_size : float, optional
        Side length of voxels used during connected-component analysis. Defaults to ``0.1``.
    min_points : int, optional
        Minimum number of points required for a component to be kept. Defaults to ``10``.
    keep_indices : int, optional
        When non-negative, retain only the largest ``keep_indices`` components. Defaults to ``-1`` (keep all).

    Returns
    -------
    np.ndarray
        Augmented cloud where the last column stores the component identifier.
    """

    # ---------- Helpers ----------
    def voxelize_point_cloud(points, voxel_size):
        # Snap to grid (non-negative indices)
        min_coords = points.min(axis=0)
        vox = np.floor((points - min_coords) / voxel_size).astype(np.int32)
        return vox, min_coords

    class DSU:
        __slots__ = ("parent", "rank")
        def __init__(self, n):
            self.parent = np.arange(n, dtype=np.int32)
            self.rank = np.zeros(n, dtype=np.int8)
        def find(self, x):
            # Path compression
            p = self.parent
            while x != p[x]:
                p[x] = p[p[x]]
                x = p[x]
            return x
        def union(self, a, b):
            p = self.parent
            r = self.rank
            ra = self.find(a)
            rb = self.find(b)
            if ra == rb:
                return
            if r[ra] < r[rb]:
                p[ra] = rb
            elif r[ra] > r[rb]:
                p[rb] = ra
            else:
                p[rb] = ra
                r[ra] += 1

    # # If numba is available, you can replace DSU with a Numba-friendly version and jit the neighbor loop.

    # Only check "forward" half of the 26-neighborhood (13 offsets) to avoid duplicate unions
    def halfspace_neighbor_offsets():
        off = []
        for dz in (-1, 0, 1):
            for dy in (-1, 0, 1):
                for dx in (-1, 0, 1):
                    if dx == 0 and dy == 0 and dz == 0:
                        continue
                    if (dz > 0) or (dz == 0 and dy > 0) or (dz == 0 and dy == 0 and dx > 0):
                        off.append((dx, dy, dz))
        return off

    neighbors13 = halfspace_neighbor_offsets()

    # ---------- Load & split ----------
    pts = LoadPointCloud(input_data, "np", "all")
    original_dtype = pts.dtype

    additional_fields = pts[:, 3:] if pts.shape[1] > 3 else None
    xyz = pts[:, :3].astype(np.float64, copy=False)  # keep numeric stability for voxelization
    del pts

    # ---------- Voxelization (no dense grid) ----------
    voxel_idx, min_coords = voxelize_point_cloud(xyz, voxel_size)
    # Pack 3D voxel indices into 1D keys: k = ix + nx*(iy + ny*iz)
    # This lets us use np.unique efficiently on a 1D array.
    mins = voxel_idx.min(axis=0)  # should be [0,0,0]
    maxs = voxel_idx.max(axis=0)
    nx, ny, nz = (maxs - mins + 1).astype(np.int64)
    sx = np.int64(1)
    sy = np.int64(nx)
    sz = np.int64(nx) * np.int64(ny)

    # Ensure int64 keys to avoid overflow
    ix = voxel_idx[:, 0].astype(np.int64)
    iy = voxel_idx[:, 1].astype(np.int64)
    iz = voxel_idx[:, 2].astype(np.int64)
    keys = ix + sy * iy + sz * iz  # 1D packed keys for each point
    del voxel_idx, ix, iy, iz

    # Unique occupied voxels and inverse mapping (point -> unique voxel id)
    unique_keys, inverse = np.unique(keys, return_inverse=True)
    del keys

    M = unique_keys.shape[0]  # number of occupied voxels
    if M == 0:
        # No points
        return np.empty((0, (3 + (additional_fields.shape[1] if additional_fields is not None else 0) + 1)), dtype=original_dtype)

    # Recover voxel coordinates for each unique voxel (needed for bounds checks)
    # ix = key % nx; iy = (key // nx) % ny; iz = key // (nx*ny)
    iz_u = unique_keys // sz
    rem = unique_keys - iz_u * sz
    iy_u = rem // sy
    ix_u = rem - iy_u * sy
    ix_u = ix_u.astype(np.int64, copy=False)
    iy_u = iy_u.astype(np.int64, copy=False)
    iz_u = iz_u.astype(np.int64, copy=False)

    # Map key -> unique index for O(1) neighbor lookup
    # (Python dict with int64 keys; memory ~ 16 bytes/key + overhead)
    key_to_uid = {int(k): i for i, k in enumerate(unique_keys.tolist())}

    # ---------- Union-Find over occupied voxels (26-connectivity via 13 forward checks) ----------
    dsu = DSU(M)
    # Precompute neighbor strides
    nstrides = [(dx * sx + dy * sy + dz * sz, dx, dy, dz) for (dx, dy, dz) in neighbors13]

    # Iterate voxels; for each, look up only "forward" neighbors
    # NOTE: This is Python-level iteration over M; typically M << number of points.
    for i in range(M):
        x = ix_u[i]; y = iy_u[i]; z = iz_u[i]
        base_key = unique_keys[i]
        for delta, dx, dy, dz in nstrides:
            nx_ = x + dx
            if nx_ < 0 or nx_ >= nx:
                continue
            ny_ = y + dy
            if ny_ < 0 or ny_ >= ny:
                continue
            nz_ = z + dz
            if nz_ < 0 or nz_ >= nz:
                continue
            neigh_key = int(base_key + delta)
            j = key_to_uid.get(neigh_key, None)
            if j is not None:
                dsu.union(i, j)

    # ---------- Point-level labels via voxel roots ----------
    # Count points per unique voxel (to later aggregate per component)
    pts_per_uid = np.bincount(inverse, minlength=M)

    # Find root for each unique voxel id
    roots_per_uid = np.empty(M, dtype=np.int32)
    for i in range(M):
        roots_per_uid[i] = dsu.find(i)

    # Map each point to its component root
    point_roots = roots_per_uid[inverse]
    del roots_per_uid

    # Count points per root (component size in POINTS, not voxels)
    # Root ids are in [0, M), but many indices won't be roots; bincount on full range is fine.
    comp_point_counts = np.bincount(point_roots, minlength=M)

    # Keep only components with >= min_points, and renumber by descending size (largest -> 1)
    valid_roots = np.flatnonzero(comp_point_counts >= int(min_points))
    if valid_roots.size == 0:
        # Nothing passes threshold
        out = np.hstack((
            xyz.astype(original_dtype, copy=False),
            additional_fields.astype(original_dtype, copy=False) if additional_fields is not None else np.empty((xyz.shape[0], 0)),
            np.zeros((xyz.shape[0], 1), dtype=original_dtype)
        ))
        if keep_indices != -1:
            out = out[0:0]  # empty
        return out[0:0]  # empty

    # Sort valid components by size desc
    order = valid_roots[np.argsort(-comp_point_counts[valid_roots])]
    # Build root->new_label map
    root_to_new = np.zeros(M, dtype=np.int32)
    for new_label, r in enumerate(order, start=1):
        root_to_new[r] = new_label

    # Final new labels for each point (0 for filtered components)
    new_labels = root_to_new[point_roots]
    del point_roots, root_to_new, comp_point_counts, valid_roots, order, pts_per_uid

    # Apply min_points filter (label==0 -> drop)
    mask = new_labels > 0
    if keep_indices != -1:
        # After renumbering, keep only a specific component id
        mask &= (new_labels == int(keep_indices))

    if not np.any(mask):
        return np.empty((0, (3 + (additional_fields.shape[1] if additional_fields is not None else 0) + 1)), dtype=original_dtype)

    # ---------- Assemble output: [xyz, additional_fields..., ccid] ----------
    xyz_f = xyz[mask]
    del xyz
    if additional_fields is not None:
        add_f = additional_fields[mask]
        out = np.hstack((xyz_f, add_f, new_labels[mask].reshape(-1, 1)))
        del add_f
    else:
        out = np.hstack((xyz_f, new_labels[mask].reshape(-1, 1)))
    del xyz_f

    # Cast back to original dtype to match your function's behavior
    return out.astype(original_dtype, copy=False)

def LoadPointCloud(input_data, return_type="np", fields="all"):
    """
    Load point cloud data

    Parameters:
    input_data : str or np.ndarray or o3d.geometry.PointCloud or pandas.DataFrame
        The input point cloud data.
    return_type : str, optional
        Output format: "np" (default) for numpy, "pddf" for DataFrame array, or "o3d" for Open3D PointCloud.
    fields : str or list of int, optional
        Fields to load: "xyz", "all", "nonull", or a list of column indices (positive or negative).

    Returns:
    pandas.DataFrame or numpy.ndarray or o3d.geometry.PointCloud
        The loaded point cloud data.
    """
    def ensure_writable(array):
        if not array.flags.writeable:
            array = array.copy()
        return array

    def normalize_indices(idx_list, ncols):
        """Convert possibly-negative indices to valid positives."""
        norm = []
        for idx in idx_list:
            if idx < 0:
                idx = ncols + idx
            if idx < 0 or idx >= ncols:
                raise IndexError(f"Field index {idx} out of range for data with {ncols} columns.")
            norm.append(idx)
        return norm

    def _parse_pcd_viewpoint(path):
        """Return the translation and quaternion stored in a PCD VIEWPOINT header."""
        shift_vec = None
        quat = None
        try:
            with open(path, "rb") as fh:
                while True:
                    line = fh.readline()
                    if not line:
                        break
                    try:
                        decoded = line.decode("utf-8").strip()
                    except UnicodeDecodeError:
                        decoded = line.decode("latin-1").strip()
                    if decoded.startswith("VIEWPOINT"):
                        parts = decoded.split()
                        if len(parts) == 8:
                            shift_vec = np.array(
                                [float(parts[1]), float(parts[2]), float(parts[3])],
                                dtype=np.float64,
                            )
                            quat = np.array(
                                [float(parts[4]), float(parts[5]), float(parts[6]), float(parts[7])],
                                dtype=np.float64,
                            )
                        break
                    if decoded.startswith("DATA"):
                        break
        except OSError:
            pass
        return shift_vec, quat

    def Load3d(path, fields):
        ext = path.split('.')[-1].lower()
        if ext in ["las", "laz"]:
            with laspy.open(path) as f:
                las = f.read()
                # Convert PointFormat to a list for iteration
                dimensions = list(las.point_format.dimensions)
                nfmt = len(dimensions)
                # Determine which indices to load
                if isinstance(fields, str):
                    if fields == "all":
                        inds = list(range(nfmt))
                    elif fields == "xyz":
                        inds = [i for i, dim in enumerate(dimensions) if dim.name in ['X','Y','Z']]
                    elif fields == "nonull":
                        inds = [i for i, dim in enumerate(dimensions)
                                if not (np.all(las[dim.name] == 0) or np.all(np.isnan(las[dim.name])))]
                    else:
                        raise ValueError(
                            "Invalid fields string for LAS. Use 'all', 'xyz', 'nonull', or list of indices."
                        )
                else:
                    inds = normalize_indices(fields, nfmt)
                # Assemble selected columns
                cols = []
                for i in inds:
                    dim = dimensions[i]
                    vals = las[dim.name]
                    if dim.name in ['X','Y','Z']:
                        vals = vals * las.header.scale[i] + las.header.offset[i]
                    cols.append(vals)
                data = np.vstack(cols).T
                return ensure_writable(data)
        elif ext in ["asc", "txt", "xyz"]:
            data = np.loadtxt(path)
        elif ext == "e57":
            data = _load_e57_points(path)
        elif ext in ["ply", "pcd", "xyzrgb", "xyzn"]:
            shift_vec = quat = None
            if ext == "pcd":
                shift_vec, quat = _parse_pcd_viewpoint(path)
            pcd = o3d.io.read_point_cloud(path)
            points = np.asarray(pcd.points)
            if points.size:
                points = np.array(points, dtype=np.float64, copy=True)
                if shift_vec is not None and not np.allclose(shift_vec, 0.0):
                    shift_magnitude = np.linalg.norm(shift_vec, ord=np.inf)
                    max_abs_point = np.linalg.norm(points, ord=np.inf)
                    quat_identity = (
                        quat is None
                        or np.allclose(quat, np.array([1.0, 0.0, 0.0, 0.0], dtype=np.float64), atol=1e-6)
                    )
                    # CloudCompare writes its global shift into VIEWPOINT; reapply it when points are near origin.
                    if quat_identity and shift_magnitude > 1e3 and max_abs_point < 1e3:
                        points[:, :3] += shift_vec
            else:
                points = np.empty((0, 3), dtype=np.float64)
            data = points
            extras = []
            if pcd.has_colors():
                extras.append(np.asarray(pcd.colors))
            if pcd.has_normals():
                extras.append(np.asarray(pcd.normals))
            if extras:
                extras = [arr if arr.ndim == 2 else arr.reshape(-1, 1) for arr in extras]
                data = np.hstack([data] + extras) if data.size else data
        else:
            raise ValueError(f"Unsupported format: {ext}")
        return ensure_writable(data)

    def _load_e57_points(path):
        """Return XY Z (+ optional extras) from an E57 file using pye57."""
        try:
            import pye57
        except ImportError as exc:
            raise ImportError(
                "Reading '.e57' files requires the 'pye57' package. Install it via `pip install pye57`."
            ) from exc

        def _as_array(raw):
            if raw is None:
                return None
            arr = np.asarray(raw)
            if np.ma.isMaskedArray(arr):
                arr = np.ma.filled(arr, np.nan)
            return arr.astype(np.float64, copy=False)

        arrays = []
        with pye57.E57(path) as e57:
            try:
                scan_count = e57.scan_count
            except AttributeError:
                scan_count = len(getattr(e57, "scans", []))
            if not scan_count:
                scan_count = 1
            for idx in range(scan_count):
                try:
                    scan = e57.read_scan(
                        idx,
                        intensity=True,
                        colors=True,
                        row_column=False,
                        transform=True,
                        ignore_missing_fields=True,
                    )
                except TypeError:
                    scan = e57.read_scan(idx)
                if not scan:
                    continue
                x = _as_array(scan.get("cartesianX"))
                y = _as_array(scan.get("cartesianY"))
                z = _as_array(scan.get("cartesianZ"))
                if x is None or y is None or z is None:
                    continue
                xyz = np.column_stack((x, y, z))
                extras = []
                intensity = _as_array(scan.get("intensity"))
                if intensity is not None:
                    extras.append(intensity.reshape(-1, 1))
                r = _as_array(scan.get("colorRed"))
                g = _as_array(scan.get("colorGreen"))
                b = _as_array(scan.get("colorBlue"))
                if r is not None and g is not None and b is not None:
                    extras.append(np.column_stack((r, g, b)))
                if extras:
                    xyz = np.hstack([xyz] + extras)
                arrays.append(xyz)

        if not arrays:
            return np.empty((0, 3), dtype=np.float64)
        stacked = np.vstack(arrays)
        return stacked.astype(np.float64, copy=False)

    # Load raw data
    if isinstance(input_data, str):
        data = Load3d(input_data, fields)
    elif isinstance(input_data, np.ndarray):
        data = ensure_writable(input_data)
    elif isinstance(input_data, o3d.geometry.PointCloud):
        data = ensure_writable(np.asarray(input_data.points))
    elif isinstance(input_data, pd.DataFrame):
        data = input_data.to_numpy()
    else:
        raise ValueError("Unsupported input type.")

    # For non-LAS inputs, apply fields-based filtering
    if not (isinstance(input_data, str) and input_data.lower().endswith(('.las', '.laz'))):
        ncols = data.shape[1]
        if isinstance(fields, str):
            if fields == "all":
                cols_to_keep = None
            elif fields == "xyz":
                cols_to_keep = [0, 1, 2] if ncols >= 3 else list(range(ncols))
            elif fields == "nonull":
                mask = ~np.all((data == 0) | np.isnan(data), axis=0)
                cols_to_keep = np.nonzero(mask)[0].tolist()
            else:
                raise ValueError(
                    "Invalid fields string. Use 'all', 'xyz', 'nonull', or list of indices."
                )
        else:
            cols_to_keep = normalize_indices(fields, ncols)
        if cols_to_keep is not None:
            data = data[:, cols_to_keep]

    # Return in requested format
    if return_type == "np":
        return data
    elif return_type == "pddf":
        return pd.DataFrame(data)
    elif return_type == "o3d":
        pcd = o3d.geometry.PointCloud()
        pcd.points = o3d.utility.Vector3dVector(data[:, :3])
        return pcd
    else:
        raise ValueError("Invalid return_type. Use 'pddf', 'np', or 'o3d'.")

@timedone
def MapScalarFields(
    source_pc,
    target_pc,
    field_indices=None,
    distance_threshold=None,
    save_path=None,
    drop_nan=False,
    shiftby=None
):
    """Map selected scalar fields from a source point cloud to a target point cloud.

    Parameters
    ----------
    source_pc : str or np.ndarray
        Source point cloud with coordinates followed by scalar attributes.
    target_pc : str or np.ndarray
        Target point cloud receiving the mapped attributes.
    field_indices : Sequence[int], optional
        Indices of source scalar columns to transfer. ``None`` maps all non-empty scalars.
    distance_threshold : float, optional
        Maximum allowed nearest-neighbour distance. Results beyond this value are filled with ``NaN``.
    save_path : str, optional
        Path to persist the combined point cloud. Skipped when ``None``.
    drop_nan : bool, optional
        ``True`` to remove target rows whose mapped values are ``NaN``. Defaults to ``False``.
    shiftby : Sequence[float], optional
        Translation applied when saving the result.

    Returns
    -------
    np.ndarray
        Target coordinates augmented with original and mapped scalar attributes.
    """
    # Load source and target as NumPy arrays
    src_data = LoadPointCloud(source_pc, return_type="np", fields="all")
    tgt_data = LoadPointCloud(target_pc, return_type="np", fields="all")

    # Split into coords and scalars
    src_coords, src_scalars = src_data[:, :3], src_data[:, 3:]
    tgt_coords, tgt_scalars = tgt_data[:, :3], tgt_data[:, 3:]

    # Identify valid source scalar indices
    num_scalars = src_scalars.shape[1]
    nan_mask = np.all(np.isnan(src_scalars), axis=0)
    zero_mask = np.all(np.nan_to_num(src_scalars) == 0, axis=0)
    valid_indices = np.nonzero(~(nan_mask | zero_mask))[0]

    # Process field_indices, supporting negatives
    if field_indices is not None:
        idxs = np.array(field_indices, dtype=int)
        idxs = np.where(idxs < 0, num_scalars + idxs, idxs)
        idxs = idxs[(idxs >= 0) & (idxs < num_scalars)]
        map_indices = np.intersect1d(idxs, valid_indices)
    else:
        map_indices = valid_indices

    # If nothing to map, optionally save original and return
    if map_indices.size == 0:
        if save_path:
            SavePointCloud(tgt_data, save_path, shiftby=shiftby)
        return tgt_data

    # Subset of source scalars
    src_sub = src_scalars[:, map_indices]

    # KD-tree nearest-neighbor query
    tree = cKDTree(src_coords)
    try:
        distances, nn_idx = tree.query(tgt_coords, k=1, workers=-1)
    except TypeError:
        distances, nn_idx = tree.query(tgt_coords, k=1)

    # Gather mapped values
    mapped = src_sub[nn_idx]
    if distance_threshold is not None:
        far_mask = distances > distance_threshold
        mapped[far_mask, :] = np.nan

    # Optionally drop rows with any NaN in mapped fields
    if drop_nan:
        valid_rows = ~np.isnan(mapped).any(axis=1)
        tgt_coords = tgt_coords[valid_rows]
        tgt_scalars = tgt_scalars[valid_rows]
        mapped = mapped[valid_rows]

    # Preallocate combined array: coords + original scalars + mapped scalars
    m = tgt_coords.shape[0]
    orig_q = tgt_scalars.shape[1]
    map_q = mapped.shape[1]
    dtype = np.result_type(tgt_data, mapped)
    combined_pc = np.empty((m, 3 + orig_q + map_q), dtype=dtype)

    # Fill in-place to avoid multiple concatenations
    combined_pc[:, :3] = tgt_coords
    if orig_q > 0:
        combined_pc[:, 3:3+orig_q] = tgt_scalars
    combined_pc[:, 3+orig_q:] = mapped

    # Save if requested as text
    if save_path:
        SavePointCloud(combined_pc, save_path, shiftby=shiftby)

    return combined_pc

def _ensure_tail_order(arr, src_indices):
    """Reorder the last three columns of ``arr`` based on ``src_indices``.

    Parameters
    ----------
    arr : np.ndarray
        Array whose final three columns should be rewritten in place.
    src_indices : Sequence[int]
        Column indices (positive or negative) indicating the desired source order.

    Returns
    -------
    np.ndarray
        The same array instance with reordered trailing columns.
    """
    arr = np.asarray(arr)
    if arr.ndim != 2 or arr.shape[1] < 3:
        return arr

    ncols = arr.shape[1]
    resolved = []
    for idx in src_indices:
        resolved.append(idx if idx >= 0 else ncols + idx)

    arr[:, -3:] = arr[:, resolved]
    return arr

def PointcloudToRaster(input_data, gridsize=1, epsg=32633, shiftby=None, outputdir=None):
    """Rasterize a point cloud into a GeoTIFF using minimum Z per grid cell.

    Parameters
    ----------
    input_data : str or np.ndarray
        Source cloud or path containing XYZ coordinates.
    gridsize : float, optional
        Width of each raster cell in map units. Defaults to ``1``.
    epsg : int, optional
        EPSG code assigned to the output raster. Defaults to ``32633``.
    shiftby : Sequence[float], optional
        Optional XYZ shift applied when exporting. The Z component offsets cell values,
        while X/Y adjust the output geotransform.
    outputdir : str, optional
        Directory where the GeoTIFF is written. When omitted, the raster is not saved.

    Returns
    -------
    str or None
        Path to the generated raster, or ``None`` if no file was written.
    """
    # Apply Z shift if needed
    points = LoadPointCloud(input_data, "np")
    points = np.asarray(points, dtype=np.float64)

    shift_vec = np.zeros(3, dtype=np.float64)
    if shiftby is not None:
        shift_vec = np.asarray(shiftby, dtype=np.float64)
        if shift_vec.size < 3:
            shift_vec = np.pad(shift_vec, (0, 3 - shift_vec.size), constant_values=0.0)
        elif shift_vec.size > 3:
            shift_vec = shift_vec[:3]
    shift_x, shift_y, shift_z = shift_vec

    z_values = points[:, 2] + shift_z  # restore global elevation when shifted

    # Compute grid indices
    grid_x = (points[:, 0] // gridsize).astype(int)
    grid_y = (points[:, 1] // gridsize).astype(int)

    # Normalize grid to start from (0,0)
    x_min, y_min = grid_x.min(), grid_y.min()
    grid_x -= x_min
    grid_y -= y_min

    width = grid_x.max() + 1
    height = grid_y.max() + 1

    # Initialize raster with NaNs
    raster = np.full((height, width), np.nan, dtype=np.float32)

    # Fill raster with minimum Z per cell
    for xg, yg, z in zip(grid_x, grid_y, z_values):
        current = raster[yg, xg]
        if np.isnan(current) or z < current:
            raster[yg, xg] = z

    # Save to GeoTIFF
    if outputdir is not None:
        os.makedirs(outputdir, exist_ok=True)
        base_filename = "cloud_raster.tif"
        file_path = os.path.join(outputdir, base_filename)
        suffix = 1
        while os.path.exists(file_path):
            file_path = os.path.join(outputdir, f"cloud_raster_{suffix}.tif")
            suffix += 1

        # Affine transform: origin at top-left
        west = (x_min * gridsize) + shift_x
        north = ((y_min + height) * gridsize) + shift_y
        transform = from_origin(west, north, gridsize, gridsize)
        raster = np.flipud(raster)
        with rasterio.open(
            file_path,
            'w',
            driver='GTiff',
            height=height,
            width=width,
            count=1,
            dtype=raster.dtype,
            crs=f"EPSG:{epsg}",
            transform=transform
        ) as dst:
            dst.write(raster, 1)

        print(f"Raster saved to: {file_path}")
        return file_path
    else:
        print("Output directory not specified. Raster was not saved.")
        return None

@timedone
def RasterizeZminZmax(input_data, gridsize=1.0, outputdir=None, shiftby=(0,0), outpcdformat = "xyz"):
    """Rasterize a cloud into coarse z-min and fine z-max samples.

    Parameters
    ----------
    input_data : str or np.ndarray
        Source point cloud containing at least XYZ columns.
    gridsize : float, optional
        Base grid size used for z-min aggregation. A finer grid at ``gridsize / 4`` is
        used for z-max. Defaults to ``1.0``.
    outputdir : str, optional
        Directory for saving the rasterized point samples. When omitted, nothing is saved.
    shiftby : Sequence[float], optional
        XY shift applied when exporting the samples. Defaults to ``(0, 0)``.
    outpcdformat : str, optional
        Extension applied to exported point files. Defaults to ``"xyz"``.

    Returns
    -------
    tuple[np.ndarray, np.ndarray]
        Tuple of ``(z_min_points, z_max_points)`` arrays.
    """
    pts = LoadPointCloud(input_data, "np", "all").astype(np.float64, copy=False)
    if pts.shape[1] < 3:
        raise ValueError("Need at least X,Y,Z")

    # Z-min on coarse grid
    gx = np.floor_divide(pts[:,0], gridsize).astype(np.int64)
    gy = np.floor_divide(pts[:,1], gridsize).astype(np.int64)
    gid = gx * (10**9) + gy

    order = np.lexsort((pts[:,2], gid))              # sort by gid then z asc
    gid_sorted = gid[order]
    boundaries = np.r_[True, gid_sorted[1:] != gid_sorted[:-1]]
    min_indices = order[boundaries]
    rasterized_min = pts[min_indices]

    # Z-max on 4x finer grid
    fgs = gridsize / 4.0
    gx = np.floor_divide(pts[:,0], fgs).astype(np.int64)
    gy = np.floor_divide(pts[:,1], fgs).astype(np.int64)
    gid = gx * (10**9) + gy

    order = np.lexsort((-pts[:,2], gid))             # gid then -z (desc z)
    gid_sorted = gid[order]
    boundaries = np.r_[True, gid_sorted[1:] != gid_sorted[:-1]]
    max_indices = order[boundaries]
    rasterized_max = pts[max_indices]

    if isinstance(input_data, str) or outputdir is not None:
        if isinstance(input_data, str):
            dir_name, base = os.path.split(input_data); stem, ext = os.path.splitext(base)
        else:
            dir_name, stem, ext = outputdir, "cloud", f".{outpcdformat}"
        SavePointCloud(rasterized_min, os.path.join(dir_name, f"{stem}_rasterize_min{ext}"), shiftby=shiftby)
        SavePointCloud(rasterized_max, os.path.join(dir_name, f"{stem}_rasterize_max{ext}"), shiftby=shiftby)

    return rasterized_min, rasterized_max

def RemoveField(input_data, field_index=-1):
    """Remove a column from a NumPy array or pandas DataFrame.

    Parameters
    ----------
    input_data : np.ndarray or pandas.DataFrame
        Point cloud representation to adjust.
    field_index : int or str, optional
        Column index or name to drop. Defaults to ``-1`` (last column).

    Returns
    -------
    np.ndarray or pandas.DataFrame
        Data with the specified column removed.
    """
    input_data = LoadPointCloud(input_data, "np")
    if isinstance(input_data, np.ndarray):
        if not isinstance(field_index, int):
            raise ValueError("For NumPy arrays, field_index must be an integer.")
        #print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Done")
        return np.delete(input_data, field_index, axis=1)
    elif isinstance(input_data, pd.DataFrame):
        if isinstance(field_index, int):
            field_index = input_data.columns[field_index]
        #print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Done")
        return input_data.drop(columns=[field_index])
    else:
        raise TypeError("Input data must be a NumPy array or Pandas DataFrame.")

def SavePointCloud(input_data, savepath, fields="all", shiftby = [0,0,0]):
    """Persist a point cloud in the format implied by ``savepath``.

    Parameters
    ----------
    input_data : str or array-like
        Point cloud data or path loadable by :func:`LoadPointCloud`.
    savepath : str
        Destination path whose extension determines the output format.
    fields : str or Sequence[int], optional
        Field selection forwarded to :func:`LoadPointCloud`. Defaults to ``"all"``.
    shiftby : Sequence[float], optional
        XYZ translation applied before writing. Defaults to ``[0, 0, 0]``.
    """
    if shiftby is None:
        global_shift = globals().get("shiftby")
        shiftby = global_shift if global_shift not in (None, []) else [0, 0, 0]
    shiftby = np.asarray(shiftby, dtype=np.float64)
    if shiftby.size < 3:
        shiftby = np.pad(shiftby, (0, 3 - shiftby.size), constant_values=0.0)
    elif shiftby.size > 3:
        shiftby = shiftby[:3]

    input_data = LoadPointCloud(input_data, "np", fields = fields)  # Ensure input_data is a DataFrame
    # Create a copy to avoid modifying the original data
    #input_data = input_data.copy()

    # Apply shifting to x and y coordinates
    input_data = np.array(input_data, dtype="float64")
    input_data[:, :3] = input_data[:, :3] + shiftby
    # input_data[:, 0] += shiftby[0]  # Shift x #######
    # input_data[:, 1] += shiftby[1]  # Shift y
    # input_data[:, 2] += shiftby[2]  # Shift z

    # Detect file extension and infer format
    _, file_extension = os.path.splitext(savepath)
    format = file_extension.lower()[1:]  # Remove the leading dot

    if format in ["ply", "pcd", "pts", "xyzn", "xyzrgb"]: #WARNING: this if doesnt work #######
        # Convert DataFrame to Open3D PointCloud
        point_cloud = o3d.geometry.PointCloud()
        points = input_data[:, :3]
        point_cloud.points = o3d.utility.Vector3dVector(points)  # Use x, y, z columns

        if input_data.shape[1] >= 6:  # Assuming 4th, 5th, and 6th columns are RGB
            colors = input_data[:, 3:6] / 255.0  # Normalize to [0, 1]
            point_cloud.colors = o3d.utility.Vector3dVector(colors) 

        o3d.io.write_point_cloud(savepath, point_cloud)

    elif format in ["txt", "xyz", "asc"]: #######
        # Save as space-delimited text including all fields 
        np.savetxt(savepath, input_data, fmt='%f', delimiter=' ')

    elif format in ["las", "laz"]: #######
        try:
            # Ensure the first three columns are x, y, z
            points = input_data[:, :3]  # x, y, z are mandatory

            # Create LAS header and data
            header = laspy.LasHeader(point_format=6)  # Point format 6 supports additional fields
            las = laspy.LasData(header)
            las.x = points[:, 0]
            las.y = points[:, 1]
            las.z = points[:, 2]

            if input_data.shape[1] > 3:
                extra_fields = input_data[:, 3:]
                for i, col_data in enumerate(extra_fields.T, start=1):
                    field_name = f"extra_{i}"
                    dtype = col_data.dtype

                    # Determine LAS-compatible field type
                    if dtype.kind in {'i', 'u'}:  # Integer types
                        field_type = 'int32' if dtype.itemsize >= 4 else 'int16'
                    elif dtype.kind == 'f':  # Floating-point types
                        field_type = 'float64' if dtype.itemsize >= 8 else 'float32'
                    else:  # Fallback for unsupported types
                        field_type = 'uint8'

                    # Add as extra dimension
                    las.add_extra_dim(laspy.ExtraBytesParams(
                        name=field_name,
                        type=field_type
                    ))
                    las[field_name] = col_data

            las.write(savepath)
        except ImportError:
            raise ImportError("Saving to LAS/LAZ format requires the 'laspy' library. Install it via pip.")
    else:
        raise ValueError(f"Unsupported file format '{format}'. Supported formats: ply, pcd, txt, xyz, asc, las, laz, pts, xyzn, xyzrgb.")

    print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Point cloud successfully saved to: {savepath}. Shifted back by {shiftby}.")

@njit()
def shift_pointcloud(pc, shift_by):
    """Subtract a translation vector from the XYZ columns of a point cloud.

    Parameters
    ----------
    pc : np.ndarray
        Point cloud represented as an array whose first three columns are XYZ.
    shift_by : Sequence[float]
        Translation vector applied to each point.

    Returns
    -------
    np.ndarray
        The input array with shifted coordinates.
    """
    for i in range(pc.shape[0]):
        for j in range(3):
            pc[i, j] -= shift_by[j]
    return pc

@timedone
def ShiftPointCloud(input_data, sample_size=10000, shiftby=None,
                    operation="minus"):
    """Shift a point cloud by an explicit vector or its sampled centroid.

    Parameters
    ----------
    input_data : str or np.ndarray
        Source point cloud to translate.
    sample_size : int, optional
        Number of points sampled to estimate the mean when ``shiftby`` is ``None``.
        Defaults to ``10000``.
    shiftby : Sequence[float], optional
        Translation vector applied directly when provided.
    operation : {"minus", "plus"}, optional
        How to apply ``shiftby``. ``"minus"`` subtracts the vector (default), while
        ``"plus"`` adds it.

    Returns
    -------
    tuple[np.ndarray, list[float]]
        Shifted point cloud and the vector that was applied.
    """
    pointcloud = LoadPointCloud(input_data, return_type="np")
    pointcloud = np.ascontiguousarray(pointcloud)

    if shiftby is not None:
        shift_vector = np.array(shiftby, dtype=np.float64)  # Ensure precision
        if operation == "minus":
            shifted = shift_pointcloud(pointcloud.copy(), shift_vector)
            return shifted.astype(np.float32), shift_vector.tolist()
        elif operation == "plus":
            shifted = shift_pointcloud(pointcloud.copy(), -shift_vector)
            return shifted.astype(np.float64), shift_vector.tolist()
        else:
            raise ValueError("Invalid operation: use 'plus' or 'minus'")

    # Default behavior – estimate mean shift from sample
    n_points = pointcloud.shape[0]
    sample_indices = np.random.choice(n_points, size=min(sample_size, n_points), replace=False)
    sample_points = pointcloud[sample_indices, :3]
    mean_coords = sample_points.mean(axis=0)

    if all(abs(mean_coords) <= 1000):
        return pointcloud.astype(np.float32), [0, 0, 0]

    shifted = shift_pointcloud(pointcloud.copy(), mean_coords)
    return shifted.astype(np.float32), mean_coords.tolist()

def SORFilter(input_data, npoints=6, sd=1.0, *, use_float32=True, workers=-1,
              prebuilt_tree=None, return_mask=False):
    """
    Statistical Outlier Removal (SOR) using cKDTree.
    - Single process, multi-threaded (workers) -> Tkinter-friendly.
    - Optionally use float32 math to speed up & save memory.
    - Optionally reuse a prebuilt KD-tree.

    Parameters
    ----------
    input_data : str | np.ndarray
        Path or NxM array. Must have at least 3 columns (X,Y,Z).
    npoints : int
        k nearest neighbors to average (typical 6-12).
    sd : float
        Standard deviation multiplier that defines ``mean(mean_d) + sd * std(mean_d)`` as the rejection threshold.
    use_float32 : bool
        If True, build the KD-tree on float32 XYZ (faster/lighter).
    workers : int
        Threads for cKDTree.query. -1 = all cores (SciPy >= 1.6).
    prebuilt_tree : cKDTree | None
        Reuse an existing tree (must match current XYZ).
    return_mask : bool
        If True, return boolean mask instead of filtered points.

    Returns
    -------
    np.ndarray | np.ndarray[bool]
        Filtered points or mask.
    """
    pts = LoadPointCloud(input_data, return_type="np", fields="all")
    if pts.shape[1] < 3:
        raise ValueError("SORFilter: need at least 3 columns (X,Y,Z).")
    xyz = pts[:, :3]
    if use_float32:
        xyz = np.ascontiguousarray(xyz, dtype=np.float32)
    else:
        xyz = np.ascontiguousarray(xyz, dtype=np.float64)

    # Build or reuse KD-tree
    tree = prebuilt_tree if prebuilt_tree is not None else cKDTree(xyz)

    k = int(min(npoints + 1, max(2, xyz.shape[0])))
    # Query k+1 because first neighbor is the point itself
    try:
        dists, _ = tree.query(xyz, k=k, workers=workers)
    except TypeError:
        # Older SciPy without 'workers'
        dists, _ = tree.query(xyz, k=k)

    mean_d = dists[:, 1:].mean(axis=1)
    thr = mean_d.mean() + sd * mean_d.std()
    mask = (mean_d <= thr)

    return mask if return_mask else pts[mask]

# --- Fast voxelization (Numba, parallel) -------------------------------------

@numba.njit(parallel=True, fastmath=True, cache=True)
def compute_voxel_indices(xyz, voxel_size):
    """Compute integer voxel indices for the given coordinates.

    Parameters
    ----------
    xyz : np.ndarray
        Array of shape ``(N, 3)`` containing point coordinates.
    voxel_size : float
        Edge length of each voxel cube.

    Returns
    -------
    np.ndarray
        Integer voxel indices with shape ``(N, 3)``.
    """
    n = xyz.shape[0]
    out = np.empty((n, 3), dtype=np.int64)
    inv = 1.0 / voxel_size
    for i in numba.prange(n):
        out[i, 0] = np.floor(xyz[i, 0] * inv)
        out[i, 1] = np.floor(xyz[i, 1] * inv)
        out[i, 2] = np.floor(xyz[i, 2] * inv)
    return out

# --- Helpers -----------------------------------------------------------------

def _ascontig(a):  # small helper for C-contiguity
    """Return a C-contiguous view of ``a`` without copying when already contiguous.

    Parameters
    ----------
    a : np.ndarray
        Array to normalise.

    Returns
    -------
    np.ndarray
        Contiguous view of ``a`` (C-order).
    """
    return np.ascontiguousarray(a) if not a.flags.c_contiguous else a

def _packed64_keys(shifted):
    """Pack integer XYZ coordinates into 64-bit voxel keys.

    Parameters
    ----------
    shifted : np.ndarray
        Array of non-negative integer voxel coordinates.

    Returns
    -------
    tuple
        ``(keys, ok, shape)`` where ``keys`` is the packed array, ``ok`` signals
        whether packing succeeded without overflow, and ``shape`` is the derived
        grid dimensions.
    """
    xmax, ymax, zmax = shifted.max(axis=0)
    shape = (int(xmax) + 1, int(ymax) + 1, int(zmax) + 1)

    # Fit check: total voxel count must fit in signed int64
    prod = np.uint64(shape[0]) * np.uint64(shape[1]) * np.uint64(shape[2])
    ok = prod <= np.uint64(2**63 - 1)
    if not ok:
        return None, False, shape
    keys = np.ravel_multi_index(
        (shifted[:, 0], shifted[:, 1], shifted[:, 2]),
        dims=shape, mode='raise'
    )
    return keys, True, shape

def _unique_first_from_keys(keys, preserve_order=True):
    """Return indices of the first occurrence for each key in ``keys``.

    Parameters
    ----------
    keys : np.ndarray
        Array of hashable keys.
    preserve_order : bool, optional
        ``True`` to sort the output indices in ascending order. Defaults to ``True``.

    Returns
    -------
    np.ndarray
        Indices of the first occurrence for each unique key.
    """
    _, idx = np.unique(keys, return_index=True)
    if preserve_order:
        idx.sort()
    return idx

def _unique_first_lexsort(vox, preserve_order=True):
    """Provide a memory-conscious unique routine using lexsort on columns.

    Parameters
    ----------
    vox : np.ndarray
        Integer voxel coordinates.
    preserve_order : bool, optional
        ``True`` to sort the resulting indices. Defaults to ``True``.

    Returns
    -------
    np.ndarray
        Indices of the first occurrence for each voxel.
    """
    # Shift to non-negative
    vmin = vox.min(axis=0)
    shifted = vox - vmin

    maxs = shifted.max(axis=0).astype(np.uint64)
    if np.uint64(maxs.max()) <= np.uint64(2**32 - 1):
        dt = np.uint32
    else:
        dt = np.uint64

    x = shifted[:, 0].astype(dt, copy=False)
    y = shifted[:, 1].astype(dt, copy=False)
    z = shifted[:, 2].astype(dt, copy=False)

    order = np.lexsort((z, y, x))  # sort by x, then y, then z
    xs, ys, zs = x[order], y[order], z[order]

    keep = np.empty(order.size, dtype=bool)
    keep[0] = True
    keep[1:] = (xs[1:] != xs[:-1]) | (ys[1:] != ys[:-1]) | (zs[1:] != zs[:-1])
    idx_sorted = order[keep]
    if preserve_order:
        idx_sorted.sort()
    return idx_sorted

# --- Out-of-core (chunked) unique --------------------------------------------

def _spill_sorted_run(keys_chunk, idx_chunk, dirpath, run_id):
    """Persist a deduplicated run of sorted keys and indices to disk.

    Parameters
    ----------
    keys_chunk : np.ndarray
        Sorted or unsorted key values for the current chunk.
    idx_chunk : np.ndarray
        Matching point indices for ``keys_chunk``.
    dirpath : str
        Directory where the temporary run file should be stored.
    run_id : int
        Identifier appended to the run filename.
    """
    order = np.argsort(keys_chunk, kind='mergesort')  # stable
    ksorted = keys_chunk[order]
    is_first = np.empty(ksorted.size, dtype=bool)
    is_first[0] = True
    is_first[1:] = ksorted[1:] != ksorted[:-1]
    kept_local = order[is_first]
    np.save(os.path.join(dirpath, f"keys_{run_id}.npy"), ksorted[is_first])
    np.save(os.path.join(dirpath, f"idx_{run_id}.npy"), idx_chunk[kept_local])

def _kmerge_runs(run_files, preserve_order=True):
    """Merge sorted run files and emit the first index for each global key.

    Parameters
    ----------
    run_files : Iterable[tuple[str, str]]
        Iterable of ``(keys_path, idx_path)`` tuples produced by
        :func:`_spill_sorted_run`.
    preserve_order : bool, optional
        ``True`` to yield indices in ascending order. Defaults to ``True``.
    """
    # Open memmaps
    runs = []
    for kf, ifile in run_files:
        k = np.load(kf, mmap_mode='r')
        i = np.load(ifile, mmap_mode='r')
        if k.size > 0:
            runs.append([k, i, 0])  # (keys, idx, cursor)

    heap = []
    for rid, (k, i, cur) in enumerate(runs):
        heapq.heappush(heap, (int(k[cur]), rid))  # cast to int for heap comparability

    kept = []
    last_key = None
    while heap:
        key, rid = heapq.heappop(heap)
        k, i, cur = runs[rid]
        # consume all equal keys from this run until it changes; keep only the *first occurrence globally*
        if last_key != key:
            kept.append(int(i[cur]))
            last_key = key
        # advance cursor
        cur += 1
        runs[rid][2] = cur
        if cur < k.size:
            heapq.heappush(heap, (int(k[cur]), rid))

    kept = np.array(kept, dtype=np.int64)
    if preserve_order:
        kept.sort()
    return kept

def _unique_first_out_of_core(get_xyz_chunk, n_points, voxel_size,
                              chunk_size=10_000_000, tempdir=None, preserve_order=True):
    """Compute voxel uniqueness out-of-core by streaming chunks to disk.

    Parameters
    ----------
    get_xyz_chunk : Callable[[int, int], np.ndarray]
        Callback returning XYZ coordinates for the half-open range ``[start, stop)``.
    n_points : int
        Total number of points available through ``get_xyz_chunk``.
    voxel_size : float
        Edge length of the voxel grid.
    chunk_size : int, optional
        Number of points processed per chunk. Defaults to ``10_000_000``.
    tempdir : str or None, optional
        Directory for temporary run files. Defaults to ``None`` (system temp).
    preserve_order : bool, optional
        ``True`` to return indices sorted ascending. Defaults to ``True``.

    Returns
    -------
    np.ndarray
        Indices of the first occurrence of each voxel.
    """
    # First pass: compute global vmin and vmax to assess packed key feasibility
    vmin = np.array([np.inf, np.inf, np.inf])
    vmax = np.array([-np.inf, -np.inf, -np.inf])
    for start in range(0, n_points, chunk_size):
        stop = min(start + chunk_size, n_points)
        xyz = get_xyz_chunk(start, stop)
        vox = compute_voxel_indices(xyz, voxel_size)
        vmin = np.minimum(vmin, vox.min(axis=0))
        vmax = np.maximum(vmax, vox.max(axis=0))
        # free asap
        del xyz, vox

    vmin = vmin.astype(np.int64)
    vmax = vmax.astype(np.int64)
    shape = (int(vmax[0] - vmin[0] + 1),
             int(vmax[1] - vmin[1] + 1),
             int(vmax[2] - vmin[2] + 1))
    prod = np.uint64(shape[0]) * np.uint64(shape[1]) * np.uint64(shape[2])
    packed_ok = prod <= np.uint64(2**63 - 1)

    # Spill sorted, per-chunk deduped runs to disk
    tmpdir = tempfile.mkdtemp(prefix="rdp_runs_", dir=tempdir)
    run_files = []
    run_id = 0
    for start in range(0, n_points, chunk_size):
        stop = min(start + chunk_size, n_points)
        xyz = get_xyz_chunk(start, stop)
        vox = compute_voxel_indices(xyz, voxel_size)
        shifted = vox - vmin  # safe (non-negative) for all chunks

        if packed_ok:
            keys = np.ravel_multi_index(
                (shifted[:, 0], shifted[:, 1], shifted[:, 2]),
                dims=shape, mode='raise'
            )
        else:
            # If packed doesn't fit globally, pack a 128-bit-ish surrogate:
            # combine x into high 64, and y/z into low 64 when possible; else hash as fallback.
            # Prefer exactness: try y/z into 32 bits each if possible, else use a strong hash.
            ymax = shifted[:,1].max()
            zmax = shifted[:,2].max()
            if ymax <= (2**32 - 1) and zmax <= (2**32 - 1):
                keys = (shifted[:,0].astype(np.uint64) << np.uint64(32)) | shifted[:,1].astype(np.uint64)
                # mix in z to reduce collisions; then we still sort+dedupe by (x,y,z) later in merge
                keys = (keys << np.uint64(32)) | shifted[:,2].astype(np.uint64)
            else:
                # robust non-cryptographic 64-bit mix (Murmur-inspired); collisions extremely rare
                u = shifted.astype(np.uint64)
                keys = u[:,0]
                keys ^= (u[:,1] + np.uint64(0x9e3779b97f4a7c15) + (keys << np.uint64(6)) + (keys >> np.uint64(2)))
                keys ^= (u[:,2] + np.uint64(0x9e3779b97f4a7c15) + (keys << np.uint64(6)) + (keys >> np.uint64(2)))

        idx = np.arange(start, stop, dtype=np.int64)
        _spill_sorted_run(keys, idx, tmpdir, run_id)
        run_files.append((
            os.path.join(tmpdir, f"keys_{run_id}.npy"),
            os.path.join(tmpdir, f"idx_{run_id}.npy")
        ))
        run_id += 1
        del xyz, vox, shifted, keys, idx

    # Final merge keeping first key occurrence globally
    kept = _kmerge_runs(run_files, preserve_order=preserve_order)

    # Cleanup temp files
    try:
        for kf, ifile in run_files:
            try:
                os.remove(kf)
            except OSError:
                pass
            try:
                os.remove(ifile)
            except OSError:
                pass
        os.rmdir(tmpdir)
    except Exception:
        pass

    return kept

# --- Public API: Drop-in replacement -----------------------------------------
@timedone
def RemoveDuplicatePoints(cloud, min_distance=0.01, fields="all",
                          preserve_order=True,
                          out_of_core=False,
                          chunk_size=10_000_000,
                          tempdir=None):
    """
    Removes duplicate points using voxel hashing with RAM-efficient strategies.
    Keeps the first point per voxel.

    Parameters
    ----------
    cloud : np.ndarray or str
        NxM array or file path of the 3D point cloud.
    min_distance : float
        Minimum allowable distance (defines voxel size).
    fields : str
        Kept for API compatibility; all fields are retained.
    preserve_order : bool
        If True, final output preserves the original order of kept points.
    out_of_core : bool
        If True, use a chunked external-sort pipeline suited for 100M+ points or tight RAM.
    chunk_size : int
        Number of points per chunk when out_of_core=True.
    tempdir : str or None
        Temporary directory for run files (out_of_core mode).

    Returns
    -------
    np.ndarray
        Filtered point cloud with all attributes retained.
    """
    cloud = LoadPointCloud(cloud, "np", "all")
    if min_distance == 0:
        print(f"[{TimeNow()}] RemoveDuplicatePoints: Minimum distance equals 0, returning original cloud.")
        return cloud

    original_dtype = cloud.dtype
    xyz = _ascontig(cloud[:, :3])

    if out_of_core:
        # Provide a callable to fetch xyz chunks without copying all fields
        def _get_xyz_chunk(start, stop):
            return _ascontig(cloud[start:stop, :3])
        idx = _unique_first_out_of_core(
            get_xyz_chunk=_get_xyz_chunk,
            n_points=xyz.shape[0],
            voxel_size=min_distance,
            chunk_size=chunk_size,
            tempdir=tempdir,
            preserve_order=preserve_order
        )
        return cloud[idx].astype(original_dtype, copy=False)

    # In-RAM fast paths
    vox = compute_voxel_indices(xyz, min_distance)
    vmin = vox.min(axis=0)
    shifted = vox - vmin

    try:
        keys64, ok, _shape = _packed64_keys(shifted)
        if ok:
            idx = _unique_first_from_keys(keys64, preserve_order=preserve_order)
        else:
            idx = _unique_first_lexsort(vox, preserve_order=preserve_order)
    except MemoryError:
        # Automatic fallback to out-of-core
        def _get_xyz_chunk(start, stop):
            return _ascontig(cloud[start:stop, :3])
        idx = _unique_first_out_of_core(
            get_xyz_chunk=_get_xyz_chunk,
            n_points=xyz.shape[0],
            voxel_size=min_distance,
            chunk_size=chunk_size,
            tempdir=tempdir,
            preserve_order=preserve_order
        )

    return cloud[idx].astype(original_dtype, copy=False)







###Mesh###
def MeshToPointCloud(mesh, ptsdensity=1):
    """Sample points from a PyVista mesh at a specified surface density.

    Parameters
    ----------
    mesh : pv.PolyData
        Input mesh to sample.
    ptsdensity : float, optional
        Target number of samples per square unit. Defaults to ``1``.

    Returns
    -------
    np.ndarray
        Sampled point cloud with shape ``(N, 3)``.
    """
    
    def sample_points_in_triangle(v0, v1, v2, num_samples):
        """
        Sample points uniformly inside a triangle using barycentric coordinates.
        
        Parameters:
            v0, v1, v2 (np.ndarray): The three vertices of the triangle.
            num_samples (int): Number of points to sample.

        Returns:
            np.ndarray: Sampled points (N, 3).
        """
        r1 = np.sqrt(np.random.uniform(0, 1, num_samples))
        r2 = np.random.uniform(0, 1, num_samples)

        points = (1 - r1)[:, None] * v0 + (r1 * (1 - r2))[:, None] * v1 + (r1 * r2)[:, None] * v2
        return points
    
    if not isinstance(mesh, pv.PolyData):
        raise ValueError("Input mesh must be a PyVista PolyData object.")

    faces = mesh.faces.reshape(-1, 4)[:, 1:]  # Extract triangle indices
    vertices = mesh.points

    sampled_points = []

    for face in faces:
        v0, v1, v2 = vertices[face]
        
        # Compute triangle area using cross product
        area = 0.5 * np.linalg.norm(np.cross(v1 - v0, v2 - v0))
        
        # Number of points to sample in this triangle
        num_samples = max(1, int(ptsdensity * area))
        
        # Sample points in the triangle
        points = sample_points_in_triangle(v0, v1, v2, num_samples)
        sampled_points.append(points)

    # Combine all sampled points
    sampled_points = np.vstack(sampled_points)
    
    return sampled_points

def MeshToShapefile(mesh, shapefile_path: str, epsg: int = 32633, shiftby=(0.0, 0.0)):
    """Convert a mesh footprint to a polygon shapefile with optional XY shift.

    Parameters
    ----------
    mesh : str or pv.PolyData
        Input mesh path or PyVista object.
    shapefile_path : str
        Destination path for the output shapefile.
    epsg : int, optional
        EPSG code assigned to the output layer. Defaults to ``32633``.
    shiftby : tuple[float, float], optional
        XY translation applied before export. Defaults to ``(0.0, 0.0)``.
    """
    # Validate/normalize shift
    try:
        shift_x, shift_y = float(shiftby[0]), float(shiftby[1])
    except Exception:
        raise ValueError("shiftby must be a 2-tuple of numbers, e.g., (0.0, 0.0).")

    # Check if the input is a file path or a PyVista object
    if isinstance(mesh, str):
        mesh = pv.read(mesh)
    elif not isinstance(mesh, pv.PolyData):
        raise ValueError("Input mesh must be a file path or a PyVista PolyData object.")

    # Ensure the mesh points have 3 coordinates
    if mesh.points.shape[1] == 2:
        # Add a dummy Z-coordinate (e.g., zeros)
        points = np.hstack((mesh.points, np.zeros((mesh.points.shape[0], 1))))
    else:
        points = mesh.points

    # Extract XY for the convex hull
    xy_points = points[:, :2]
    if xy_points.shape[0] < 3:
        raise ValueError("Need at least 3 points to compute a polygon hull.")

    # Create a 2D convex hull of the points to form the polygon
    try:
        hull = ConvexHull(xy_points)
    except Exception as e:
        raise RuntimeError("Failed to compute convex hull (points may be collinear).") from e
    hull_points = points[hull.vertices]

    # Create a Polygon using Shapely (XY only)
    polygon = Polygon(hull_points[:, :2])

    # Apply XY shift to the output geometry (area is translation-invariant)
    if shift_x or shift_y:
        polygon = translate(polygon, xoff=shift_x, yoff=shift_y, zoff=0.0)

    # Calculate the area of the mesh (unshifted mesh)
    area = CalculateMeshArea(mesh)

    # Define the schema for the shapefile
    schema = {
        'geometry': 'Polygon',
        'properties': {'ID': 'int', 'Area': 'float'},
    }

    # Assign the specified EPSG code to the shapefile
    crs = CRS.from_epsg(epsg)

    # Ensure output directory exists
    os.makedirs(os.path.dirname(os.path.abspath(shapefile_path)), exist_ok=True)

    # Write the polygon to a shapefile using Fiona
    with fiona.open(shapefile_path, mode='w', driver='ESRI Shapefile', schema=schema, crs=crs) as shp:
        shp.write({
            'geometry': mapping(polygon),
            'properties': {'ID': 1, 'Area': float(area)},
        })

    print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Polygon shapefile saved to "
          f"{shapefile_path} with EPSG:{epsg} (shiftby=({shift_x}, {shift_y}))")


def UpdatePlotInfo(plot_shp_path: str, detected_trees_path: str) -> None:
    """Populate PlotInfo shapefile with tree counts, basal area, quadratic mean diameter (Dg), Michajlov height (Hg), and total volume."""
    try:
        if not os.path.exists(plot_shp_path):
            print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: PlotInfo shapefile not found at {plot_shp_path}.")
            return

        plot_gdf = gpd.read_file(plot_shp_path)
        if plot_gdf.empty:
            print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: PlotInfo shapefile is empty, skipping tree count update.")
            return

        tree_counts = [0] * len(plot_gdf)
        basal_areas = [0.0] * len(plot_gdf)
        plot_volumes = [0.0] * len(plot_gdf)
        total_trees = 0
        total_basal_area = 0.0
        total_volume = 0.0
        michajlov_sse = None
        model_dbh_samples = []
        model_height_samples = []

        if os.path.exists(detected_trees_path):
            trees_gdf = gpd.read_file(detected_trees_path)
            total_trees = int(len(trees_gdf))
            if not trees_gdf.empty:
                try:
                    if plot_gdf.crs and trees_gdf.crs and plot_gdf.crs != trees_gdf.crs:
                        trees_gdf = trees_gdf.to_crs(plot_gdf.crs)
                except Exception as crs_err:
                    print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: CRS alignment failed ({crs_err}); using total count fallback.")
                else:
                    trees_geom = trees_gdf.geometry
                    basal_values = np.zeros(total_trees, dtype=np.float64)
                    volume_values = np.zeros(total_trees, dtype=np.float64)

                    if {"DISC_D", "DISC_H"}.issubset(trees_gdf.columns):
                        disc_h = pd.to_numeric(trees_gdf["DISC_H"], errors="coerce")
                        disc_d = pd.to_numeric(trees_gdf["DISC_D"], errors="coerce")
                        tree_height = pd.to_numeric(trees_gdf["TREE_H"], errors="coerce") if "TREE_H" in trees_gdf.columns else None
                        valid_mask = (
                            disc_h.notna()
                            & disc_d.notna()
                            & (disc_d > 0)
                            & (disc_h.sub(1.3).abs() <= 0.01)
                        )
                        valid_idx = valid_mask.to_numpy()
                        if valid_idx.any():
                            diam_cm = disc_d[valid_mask].to_numpy(dtype=np.float64, copy=False)
                            basal_local = math.pi * (diam_cm / 200.0) ** 2
                            basal_values[valid_idx] = basal_local

                            if tree_height is not None:
                                height_vals = tree_height[valid_mask].to_numpy(dtype=np.float64, copy=False)
                                height_vals = np.nan_to_num(height_vals, nan=0.0)
                                height_vals[height_vals < 0] = 0.0
                                valid_height_mask = height_vals > 1.31
                                if np.any(valid_height_mask):
                                    model_dbh_samples.append(diam_cm[valid_height_mask])
                                    model_height_samples.append(height_vals[valid_height_mask])
                            else:
                                height_vals = np.zeros_like(diam_cm)

                            volume_values[valid_idx] = basal_local * height_vals * 0.4
                    else:
                        print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: DetectedTrees missing DISC_D/DISC_H; basal area set to zero.")

                    total_basal_area = float(basal_values.sum())
                    total_volume = float(volume_values.sum())

                    counts = []
                    for idx, geom in enumerate(plot_gdf.geometry):
                        if geom is None or geom.is_empty:
                            counts.append(0)
                            continue
                        try:
                            inside_mask = trees_geom.within(geom)
                        except Exception:
                            counts.append(0)
                            continue

                        inside_idx = inside_mask.to_numpy()
                        count = int(inside_idx.sum())
                        counts.append(count)
                        if count:
                            basal_areas[idx] = float(basal_values[inside_idx].sum())
                            plot_volumes[idx] = float(volume_values[inside_idx].sum())

                    if sum(counts) > 0:
                        tree_counts = counts

            if sum(tree_counts) == 0 and total_trees:
                tree_counts = [total_trees] * len(plot_gdf)
            if total_basal_area > 0 and all(b == 0.0 for b in basal_areas):
                basal_areas = [total_basal_area] * len(plot_gdf)
            if total_volume > 0 and all(v == 0.0 for v in plot_volumes):
                plot_volumes = [total_volume] * len(plot_gdf)
        else:
            print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: DetectedTrees shapefile not found at {detected_trees_path}; defaulting TreeCount to zero.")

        plot_gdf["TreeCount"] = [int(c) for c in tree_counts]
        plot_gdf["BasalArea"] = [float(b) for b in basal_areas]
        plot_gdf["TimberVol"] = [float(v) for v in plot_volumes]

        dg_values = []
        for count, basal in zip(tree_counts, basal_areas):
            if count > 0 and basal > 0:
                mean_area = basal / count
                dg_cm = math.sqrt((4.0 * mean_area) / math.pi) * 100.0
                dg_values.append(float(dg_cm))
            else:
                dg_values.append(0.0)

        hg_values = [0.0] * len(plot_gdf)
        michajlov_params = None
        if model_dbh_samples and model_height_samples:
            try:
                model_dbh = np.concatenate(model_dbh_samples)
                model_height = np.concatenate(model_height_samples)
            except ValueError:
                model_dbh = np.empty(0)
                model_height = np.empty(0)
            valid_model_mask = (
                (model_dbh > 0)
                & np.isfinite(model_dbh)
                & np.isfinite(model_height)
                & (model_height > 1.31)
            )
            if np.count_nonzero(valid_model_mask) >= 2:
                dbh_subset = model_dbh[valid_model_mask]
                height_subset = model_height[valid_model_mask]
                try:
                    def _michajlov_residuals(params, dbh_vals, height_vals):
                        a_param, b_param = params
                        preds = 1.3 + a_param * np.exp(-b_param / dbh_vals)
                        return preds - height_vals

                    a0 = max(float(height_subset.mean() - 1.3), 0.1)
                    b0 = max(float(np.median(dbh_subset)), 1.0)
                    result_fit = least_squares(
                        _michajlov_residuals,
                        x0=np.array([a0, b0], dtype=np.float64),
                        bounds=([0.0, 0.0], [np.inf, np.inf]),
                        args=(dbh_subset, height_subset),
                        max_nfev=2000,
                    )
                    if result_fit.success:
                        a_param, b_param = result_fit.x
                        michajlov_params = (float(a_param), float(b_param))
                        michajlov_sse = float(np.sum(result_fit.fun ** 2))
                    else:
                        print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Michajlov optimisation failed (status={result_fit.status}).")
                except Exception as fit_err:
                    print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Michajlov fit failed ({fit_err}).")

        if michajlov_params:
            a, b = michajlov_params
            for idx, dg in enumerate(dg_values):
                if dg > 0:
                    try:
                        hg = 1.3 + (a * math.exp(-b / dg))
                    except OverflowError:
                        hg = 0.0
                    if not math.isfinite(hg) or hg <= 0:
                        hg = 0.0
                    hg_values[idx] = float(hg)

        plot_gdf["Dg"] = dg_values
        plot_gdf["Hg"] = hg_values
        plot_gdf.to_file(plot_shp_path, driver="ESRI Shapefile")
        reported_basal = total_basal_area if total_basal_area > 0 else sum(basal_areas)
        reported_volume = total_volume if total_volume > 0 else sum(plot_volumes)
        valid_dg = [v for v in dg_values if v > 0]
        mean_dg = (sum(valid_dg) / len(valid_dg)) if valid_dg else 0.0
        valid_hg = [h for h in hg_values if h > 0]
        mean_hg = (sum(valid_hg) / len(valid_hg)) if valid_hg else 0.0
        params_str = (
            f"a={michajlov_params[0]:.4f}, b={michajlov_params[1]:.4f}"
            if michajlov_params
            else "a/b unavailable"
        )
        if michajlov_sse is not None:
            params_str = f"{params_str}, SSE={michajlov_sse:.4f}"
        result = {
            "michajlov_params": michajlov_params,
            "michajlov_sse": michajlov_sse,
            "mean_dg": mean_dg,
            "mean_hg": mean_hg,
            "total_basal_area": reported_basal,
            "total_volume": reported_volume,
        }
        print(
            f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: TreeCount/BasalArea/Dg/Hg/Volume updated for PlotInfo "
            f"(total trees={total_trees}, total basal area={reported_basal:.4f} m^2, mean Dg={mean_dg:.2f} cm, mean Hg={mean_hg:.2f} m, total volume={reported_volume:.4f} m^3, Michajlov {params_str})."
        )
        return result

    except Exception as e:
        print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Failed to update tree count/basal area/volume/Hg: {e}")
        return {"michajlov_params": None}


###Rasters###
def AssignCrsToRaster(rasterpath, epsg=32633):
    """Assign a coordinate reference system (CRS) to a raster file.

    Parameters
    ----------
    rasterpath : str
        File path of the raster to update.
    epsg : int, optional
        EPSG code to assign. Defaults to ``32633``.
    """
    try:
        # Open the raster file in update mode
        with rasterio.open(rasterpath, 'r+') as dataset:
            # Assign the CRS using the EPSG code
            dataset.crs = CRS.from_epsg(epsg)
            print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Successfully assigned EPSG:{epsg} to the raster.")

    except Exception as e:
        print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: An error occurred: {e}")

def RasterToPointCloud(raster_path):
    """Convert a single-band raster into XYZ points, skipping nodata values.

    Parameters
    ----------
    raster_path : str
        Path to the raster file to convert.

    Returns
    -------
    np.ndarray
        Array of ``(x, y, z)`` coordinates extracted from the raster.
    """
    with rasterio.open(raster_path) as src:
        band = src.read(1)
        rows, cols = np.where(band != src.nodata)
        z = band[rows, cols]
        x, y = src.xy(rows, cols)
        points = np.column_stack((x, y, z))

        # Filter out points with NaN values
        points = points[~np.isnan(points).any(axis=1)]
    return points

def SubtractRasters(raster1_path, raster2_path, output_path, epsg=32633, shiftby=(0, 0, 0)):
    """Subtract ``raster2`` from ``raster1`` and write the result to disk.

    Parameters
    ----------
    raster1_path : str
        Path to the minuend raster (for example a DSM).
    raster2_path : str
        Path to the subtrahend raster (for example a DTM).
    output_path : str
        Destination path for the output raster.
    epsg : int, optional
        EPSG code assigned to the output. Defaults to ``32633``.
    shiftby : tuple[float, float, float], optional
        XY shift applied to the output transform and an optional Z offset added to the result. Defaults to ``(0, 0, 0)``.
    """
    shift_x, shift_y, shift_z = shiftby

    # Open the first raster
    with rasterio.open(raster1_path) as src1:
        raster1_data = src1.read(1)  # Read the first band
        raster1_meta = src1.meta.copy()  # Get metadata
        transform = src1.transform

    # Open the second raster
    with rasterio.open(raster2_path) as src2:
        raster2_data = src2.read(1, out_shape=raster1_data.shape, resampling=Resampling.bilinear)  # Read and resample to match the first raster shape

    # Ensure the two rasters have the same shape
    if raster1_data.shape != raster2_data.shape:
        raise ValueError("The rasters do not have the same shape")

    # Subtract the raster values
    result_data = raster1_data - raster2_data

    # Update metadata and apply shift to transform
    raster1_meta.update(dtype=rasterio.float32)
    shifted_transform = transform._replace(
        c=transform.c + shift_x,
        f=transform.f + shift_y
    )
    raster1_meta.update(transform=shifted_transform)

    # Write the result to a new raster
    with rasterio.open(output_path, 'w', **raster1_meta) as dst:
        dst.write(result_data.astype(rasterio.float32), 1)

    AssignCrsToRaster(output_path, epsg=epsg)

    print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Rasters subtracted with shift ({shift_x}, {shift_y}, {shift_z}).")
    return result_data

@timedone
def WatershedCrownDelineation(rastertif, mintreeheight=5, smoothing_sigma=4, peak_local_max_footprint=(20, 20), epsg=32633):
    """Delineate tree crowns via watershed segmentation without seed points.

    Parameters
    ----------
    rastertif : str
        Path to the canopy-height raster.
    mintreeheight : float, optional
        Minimum height threshold for crown candidates. Defaults to ``5``.
    smoothing_sigma : float, optional
        Gaussian smoothing sigma applied before watershed. Defaults to ``4``.
    peak_local_max_footprint : tuple[int, int], optional
        Window size for local maxima detection. Defaults to ``(20, 20)``.
    epsg : int, optional
        EPSG code assigned to the output shapefile. Defaults to ``32633``.
    """
    def close_holes(image, fill_value=0):
        filled_image = image.copy()
        mask = (image == 0) | np.isnan(image)
        filled_image[mask] = fill_value
        return filled_image

    # Load the raster data
    with rasterio.open(rastertif) as src:
        raster_data = src.read(1).astype(float)
        transform = src.transform
        crs = src.crs

    # Close holes and apply smoothing
    raster_data_filled = close_holes(raster_data, fill_value=0)
    raster_data_smoothed = gaussian_filter(raster_data_filled, sigma=smoothing_sigma) if smoothing_sigma > 0 else raster_data_filled

    # Mask the raster to ignore areas below the minimum tree height
    mask = raster_data_smoothed >= mintreeheight
    masked_data = np.where(mask, raster_data_smoothed, 0)

    # Generate markers using local maxima
    distance = np.zeros_like(raster_data_smoothed)
    distance[mask] = raster_data_smoothed[mask]
    local_maxi = peak_local_max(distance, footprint=np.ones(peak_local_max_footprint), labels=mask)
    markers = np.zeros_like(raster_data_smoothed, dtype=int)
    markers[tuple(local_maxi.T)] = np.arange(1, local_maxi.shape[0] + 1)

    # Perform watershed segmentation
    labels = watershed(-distance, markers, mask=mask)

    # Fix data type for `shapes` function
    labels = labels.astype(np.int32)

    # Convert raster labels to polygons
    shapes_list = list(shapes(labels, transform=transform))
    polygons = [shape(geom) for geom, value in shapes_list if value != 0]
    values = [value for geom, value in shapes_list if value != 0]

    # Prepare output shapefile with polygon areas
    output_shapefile = os.path.join(os.path.dirname(rastertif), "TreeCrowns.shp") #os.path.splitext(os.path.basename(rastertif))[0] + "_TreeCrowns.shp")
    schema = {
        'geometry': 'Polygon',
        'properties': {'CrownID': 'int', 'Area': 'float'}
    }
    with fiona.open(output_shapefile, 'w', driver='ESRI Shapefile', crs=CRS.from_epsg(epsg), schema=schema) as shp:
        for poly, value in zip(polygons, values):
            shp.write({
                'geometry': mapping(poly),
                'properties': {
                    'CrownID': int(value),
                    'Area': poly.area  # Calculate polygon area
                }
            })

    #print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Done.")
    return labels, polygons


@timedone
def SaveTreeFootprintsShapefile(
    densecloud_labeled,
    output_dir,
    epsg=32633,
    pixel_size=0.05,        # used for raster fallback + decimation scale
    close_radius=2.0,       # raster fallback only
    pad_pixels=2,           # raster fallback only
    min_area=0.005,         # m²; skip tiny artifacts
    shapefile_name="TreeFootprints.shp",
    shiftby=(0.0, 0.0),     # add back global XY shift on save
    tree_id_field=-2,
    tree_height_field=-3
):
    """Generate stem footprint polygons per tree and save them as a shapefile.

    Parameters
    ----------
    densecloud_labeled : str or np.ndarray
        Point cloud with labelled tree points (TreeID in the penultimate column).
    output_dir : str
        Directory where the shapefile will be written.
    epsg : int, optional
        EPSG code assigned to the output layer. Defaults to ``32633``.
    pixel_size : float, optional
        Base voxel size for decimation and raster fallbacks. Defaults to ``0.05``.
    close_radius : float, optional
        Morphological closing radius used in raster fallback mode. Defaults to ``2.0``.
    pad_pixels : int, optional
        Padding applied during raster fallback. Defaults to ``2``.
    min_area : float, optional
        Minimum polygon area (square metres) to keep. Defaults to ``0.005``.
    shapefile_name : str, optional
        Filename for the output shapefile. Defaults to ``"TreeFootprints.shp"``.
    shiftby : tuple[float, float], optional
        XY translation applied before saving. Defaults to ``(0.0, 0.0)``.
    tree_id_field : int, optional
        Column index containing ``TreeID`` values. Defaults to ``-2`` (TreeID column after
        adding a terrain-distance field).
    tree_height_field : int or None, optional
        Column index with per-tree heights. Defaults to ``-3``. Pass ``None`` to skip storing
        heights in the output table.
    """


    # ---------- tunables ----------
    # decimate to this voxel (meters) before alpha-shape
    VOXEL = max(1e-3, pixel_size * 0.75)
    # cap points per stem before alpha-shape
    MAX_PTS = 1200
    # stems above this many raw points use raster fallback (super fast)
    RASTER_FALLBACK_N = 15000
    # alpha tightness factor (smaller -> tighter)
    ALPHA_C = 0.8
    # parallel workers
    MAX_WORKERS = max(1, (os.cpu_count() or 1) - 1)
    # --------------------------------

    densecloud_labeled = LoadPointCloud(densecloud_labeled, "np", "all")
    if densecloud_labeled is None or np.size(densecloud_labeled) == 0:
        raise ValueError("SaveTreeFootprintsShapefile: empty input.")

    tree_id_idx = int(tree_id_field)
    tree_height_idx = None if tree_height_field is None else int(tree_height_field)

    arr = np.ascontiguousarray(densecloud_labeled, dtype=np.float64)
    if not (-arr.shape[1] <= tree_id_idx < arr.shape[1]):
        raise ValueError(f"tree_id_field {tree_id_idx} is out of bounds for array with {arr.shape[1]} columns.")
    if tree_height_idx is not None and not (-arr.shape[1] <= tree_height_idx < arr.shape[1]):
        raise ValueError(f"tree_height_field {tree_height_idx} is out of bounds for array with {arr.shape[1]} columns.")
    assigned = arr[arr[:, tree_id_idx].astype(np.int32) != -1]
    if assigned.size == 0:
        raise ValueError("SaveTreeFootprintsShapefile: no assigned points (TreeID == -1 everywhere).")

    # group indices by TreeID (no Python dict of arrays – do it vectorized)
    tids_all = assigned[:, tree_id_idx].astype(np.int32)
    order = np.argsort(tids_all)
    tids_sorted = tids_all[order]
    starts = np.r_[0, np.flatnonzero(tids_sorted[1:] != tids_sorted[:-1]) + 1]
    ends = np.r_[starts[1:], tids_sorted.size]
    uniq_tids = tids_sorted[starts]

    shift_x, shift_y = float(shiftby[0]), float(shiftby[1])

    # helpers
    def _largest_no_holes(geom):
        if geom.is_empty:
            return geom
        if isinstance(geom, Polygon):
            return Polygon(geom.exterior)
        if isinstance(geom, MultiPolygon):
            parts = [Polygon(p.exterior) for p in geom.geoms if not p.is_empty]
            if not parts:
                return Polygon()
            areas = [p.area for p in parts]
            return parts[int(np.argmax(areas))]
        return geom

    def _auto_alpha(xy):
        # alpha ≈ c/(mean NN)^2, clamped
        n = xy.shape[0]
        if n < 4:
            return 0.0
        k = 4 if n >= 4 else n
        dists, _ = cKDTree(xy).query(xy, k=k, workers=-1)
        nn = dists[:, 1:k]  # skip self
        md = float(np.mean(nn))
        if md <= 0:
            return 0.0
        a = ALPHA_C / (md * md)
        return float(np.clip(a, 1e-3, 1e3))

    def _decimate_xy(xy, voxel):
        # voxel hash by local min
        mins = xy.min(axis=0)
        ij = np.floor((xy - mins) / voxel).astype(np.int64)
        # unique 2D grid cells
        key = (ij[:,0] << 32) ^ ij[:,1]
        _, idx = np.unique(key, return_index=True)
        return xy[idx]

    def _alpha_polygon(xy):
        # decimate
        if xy.shape[0] > 3:
            xy = _decimate_xy(xy, VOXEL)
        # cap
        if xy.shape[0] > MAX_PTS:
            sel = np.random.default_rng().choice(xy.shape[0], size=MAX_PTS, replace=False)
            xy = xy[sel]
        # alpha
        a = _auto_alpha(xy)
        try:
            hull = alphashape.alphashape(xy, a if a > 0 else 0.0)
        except Exception:
            hull = None
        if hull is None or hull.is_empty:
            # final fallback: convex via alphashape with 0.0
            try:
                hull = alphashape.alphashape(xy, 0.0)
            except Exception:
                hull = MultiPoint(xy).convex_hull
        hull = _largest_no_holes(hull)
        return hull

    def _disk(radius_px: int) -> np.ndarray:
        r = int(max(1, round(radius_px)))
        yy, xx = np.ogrid[-r:r+1, -r:r+1]
        return (xx*xx + yy*yy) <= (r*r)

    def _raster_polygon(xy):
        # fast fallback; uses your earlier idea
        px = float(pixel_size)
        xmin, ymin = xy.min(axis=0)
        xmax, ymax = xy.max(axis=0)
        # pad outward a little to avoid clipping
        pad = max(1, int(pad_pixels))
        nx = max(3, int(math.ceil((xmax - xmin)/px)) + 1 + 2*pad)
        ny = max(3, int(math.ceil((ymax - ymin)/px)) + 1 + 2*pad)
        xmin_p = xmin - pad * px
        xmax_p = xmin_p + nx * px
        ymax_p = ymax + pad * px
        ymin_p = ymax_p - ny * px
        cols = np.floor((xy[:,0] - xmin_p)/px).astype(np.int64)
        rows = np.floor((ymax_p - xy[:,1])/px).astype(np.int64)
        cols = np.clip(cols, 0, nx-1); rows = np.clip(rows, 0, ny-1)
        grid = np.zeros((ny, nx), dtype=np.uint8)
        grid[rows, cols] = 1
        selem = _disk(close_radius)
        if selem.size:
            grid = binary_closing(grid.astype(bool), structure=selem)
        grid = binary_fill_holes(grid).astype(np.uint8)
        transform = from_origin(xmin_p, ymax_p, px, px)
        polys = []
        for geom, val in shapes(grid, mask=(grid == 1), transform=transform):
            if int(val) == 1:
                g = shapely.geometry.shape(geom)  # NOTE: defined lazily later in worker to avoid import in outer scope
                if (not g.is_empty) and g.area >= min_area:
                    polys.append(g)
        if not polys:
            return Polygon()
        return _largest_no_holes(unary_union(polys))

    # worker per stem
    def _process_one(tid, s, e):
        pts = assigned[order[s:e]]
        if pts.shape[0] < 3:
            return None

        xy = pts[:, :2]

        # choose fast path
        if pts.shape[0] >= RASTER_FALLBACK_N:
            # raster fallback for huge stems
            hull = _raster_polygon(xy)
        else:
            hull = _alpha_polygon(xy)

        if hull.is_empty or hull.area < float(min_area):
            return None

        # apply XY shift
        if shift_x or shift_y:
            hull = translate(hull, xoff=shift_x, yoff=shift_y, zoff=0.0)

        # attributes
        if tree_height_idx is not None:
            if not (-pts.shape[1] <= tree_height_idx < pts.shape[1]):
                tree_h = np.nan
            else:
                try:
                    tree_h = float(np.nanmax(pts[:, tree_height_idx]))
                except Exception:
                    tree_h = np.nan
        else:
            tree_h = np.nan

        return {
            "TreeID": int(tid),
            "TreeH":  tree_h,
            "Pts":    int(pts.shape[0]),
            "Area":   float(hull.area),
            "geom":   hull
        }

    # run threaded
    recs, geoms = [], []
    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as ex:
        futs = {ex.submit(_process_one, int(uniq_tids[i]), int(starts[i]), int(ends[i])): i
                for i in range(uniq_tids.size)}
        for f in as_completed(futs):
            r = f.result()
            if r is None:
                continue
            recs.append({k: r[k] for k in ("TreeID","TreeH","Pts","Area")})
            geoms.append(r["geom"])

    if not geoms:
        raise RuntimeError("SaveTreeFootprintsShapefile: no polygons were created.")

    gdf = gpd.GeoDataFrame(recs, geometry=geoms, crs=f"EPSG:{epsg}")
    os.makedirs(output_dir, exist_ok=True)
    out_path = os.path.join(output_dir, shapefile_name)
    gdf.to_file(out_path, driver="ESRI Shapefile")
    print(f"[{TimeNow()}] SaveTreeFootprintsShapefile: saved {len(gdf)} footprints to {out_path}")
    return out_path


def AssignPointsToTrees3D(
    densecloud,
    repopulated_data,
    stem_id_field=-3,         # TreeID column in repopulated_data
    height_field=-2,          # above-terrain height in repopulated_data
    tree_height_field=-1,     # per-tree height column in repopulated_data
    min_height=0.5,
    height_margin=0.0,
    chunk_size=None,          # if None/<=0 -> auto-choose
    include_unassigned=True, # when False, final output contains NO -1 rows
    refine_cc3d=True,
    gap=0.05,                 # voxel size for per-tree CC3D
    cc3d_max_voxels=10_000_000,
    use_gpu=False             # attempt GPU acceleration for KNN passes (requires RAPIDS)
):
    """Assign dense cloud points to stems via a two-pass nearest neighbour search.

    The function auto-derives sensible neighbour counts and KD-tree settings
    from the input sizes, so only high-level switches remain in the signature.

    Parameters
    ----------
    densecloud : str or np.ndarray
        Point cloud to classify, typically `[X, Y, Z, ...]`.
    repopulated_data : str or np.ndarray
        Reference data containing stem IDs and per-tree attributes.
    stem_id_field : int, optional
        Column index of the stem identifier within `repopulated_data`. Defaults to `-3`.
    height_field : int, optional
        Column index storing heights above ground in `repopulated_data`. Defaults to `-2`.
    tree_height_field : int, optional
        Column index with per-tree heights. Defaults to `-1`.
    min_height : float, optional
        Minimum point height above ground to consider. Defaults to `0.5`.
    height_margin : float, optional
        Extra vertical tolerance above the tree height. Defaults to `0.0`.
    chunk_size : int or None, optional
        Override for processing chunk size. `None` chooses automatically.
    include_unassigned : bool, optional
        `True` to keep unassigned points (TreeID `-1`). Defaults to `False`.
    refine_cc3d : bool, optional
        `True` to run a connected-components refinement per tree. Defaults to `True`.
    gap : float, optional
        Voxel size for the CC3D refinement. Defaults to `0.05`.
    cc3d_max_voxels : int, optional
        Maximum voxel count allowed during CC3D refinement. Defaults to `10_000_000`.
    use_gpu : bool, optional
        When `True`, attempts to accelerate k-NN searches with RAPIDS cuML + CuPy.
        If the GPU toolchain is unavailable or errors, the function falls back to CPU.

    Returns
    -------
    np.ndarray
        Float32 array with appended `TreeHeight` and `TreeID` columns.
    """

    # ---------------- helpers ----------------

    def _choose_chunk_size(n_points, k, safety=0.35, min_chunk=250_000):
        """Keep (dist+idx) buffers for k-NN within a fraction of available RAM."""
        try:
            avail = psutil.virtual_memory().available
        except Exception:
            # conservative fallback: assume 8 GB available
            avail = 8 * (1024**3)
        # SciPy returns distances float64 and indices intp; ~16 bytes per neighbor
        bytes_per_row = max(k, 1) * 16
        target = max(int(avail * safety), 256 * (1024**2))  # >= 256 MB
        B = max(min_chunk, target // bytes_per_row)
        return int(min(n_points, max(B, 1)))

    def _auto_neighbor_counts(n_seeds, n_trees):
        """Return (seed_k, tree_k) derived from input size."""
        seed_k = int(round(max(n_seeds, 1) ** 0.5))
        seed_k = max(4, min(12, seed_k))
        tree_k = int(round(max(n_trees, 1) ** 0.5))
        tree_k = max(2, min(6, tree_k))
        return seed_k, tree_k

    def _auto_leafsize(n_points):
        """Pick a KD-tree leafsize that grows slowly with data size."""
        if n_points <= 1_000:
            return 16
        if n_points <= 10_000:
            return 32
        if n_points <= 100_000:
            return 48
        return 64

    def _cc3d_labels_guard(points_xyz_f32, voxel_size, max_voxels):
        """Connected components with dense-voxel cap; returns 1-based labels or all-ones if skipped."""
        try:
            import cc3d
        except Exception:
            # cc3d not present; treat as single component
            return np.ones(points_xyz_f32.shape[0], dtype=np.int32)

        if points_xyz_f32.shape[0] == 0:
            return np.array([], dtype=np.int32)

        mins = points_xyz_f32.min(axis=0) - voxel_size * 0.5
        coords = np.floor((points_xyz_f32 - mins) / voxel_size).astype(np.int32, copy=False)
        shape = coords.max(axis=0) + 1
        if np.prod(shape, dtype=np.int64) > max_voxels:
            # skip heavy CC to avoid memory blow-up
            return np.ones(coords.shape[0], dtype=np.int32)

        vol = np.zeros(shape, dtype=np.uint8)
        vol[coords[:, 0], coords[:, 1], coords[:, 2]] = 1
        labels = cc3d.connected_components(vol, connectivity=26).astype(np.int32, copy=False)
        return labels[coords[:, 0], coords[:, 1], coords[:, 2]]

    def _reassign_discarded_clusters(labeled_f32, clusters, voxel_size, max_voxels):
        """
        Reattach previously discarded CC3D fragments to the nearest assigned tree.

        Parameters
        ----------
        labeled_f32 : np.ndarray
            Dense cloud with tree IDs in the last column (float32).
        clusters : list[np.ndarray]
            Global index arrays of points that were removed from their original tree.
        voxel_size : float
            CC3D voxel size used for the refinement stage.
        max_voxels : int
            Maximum voxel count permitted when sub-clustering the fragments.
        """
        if not clusters:
            return

        mask_assigned = labeled_f32[:, -1] != -1.0
        if not np.any(mask_assigned):
            return

        assigned_xyz = labeled_f32[mask_assigned, :3].astype(np.float32, copy=False)
        assigned_tid = labeled_f32[mask_assigned, -1].astype(np.int32, copy=False)
        if assigned_xyz.shape[0] == 0:
            return

        tree = cKDTree(assigned_xyz)
        voxel_size = float(voxel_size)
        max_voxels = int(max_voxels)

        for comp_indices in clusters:
            local_idx = np.asarray(comp_indices, dtype=np.int64)
            if local_idx.size == 0:
                continue

            fragment_xyz = labeled_f32[local_idx, :3].astype(np.float32, copy=False)
            sub_labels = _cc3d_labels_guard(fragment_xyz, voxel_size, max_voxels)
            if sub_labels.size == 0:
                continue

            for lbl in np.unique(sub_labels):
                mask = sub_labels == lbl
                if not np.any(mask):
                    continue

                sub_idx = local_idx[mask]
                sub_xyz = fragment_xyz[mask]
                try:
                    dists, nn = tree.query(sub_xyz, k=1, workers=-1)
                except TypeError:  # older SciPy without workers kwarg
                    dists, nn = tree.query(sub_xyz, k=1)

                if np.isscalar(nn):
                    nn = np.array([nn], dtype=np.int64)
                    dists = np.array([dists], dtype=np.float64)

                valid = np.isfinite(dists)
                if not np.any(valid):
                    continue

                candidate_ids = assigned_tid[nn[valid]]
                if candidate_ids.size == 0:
                    continue

                uniq_ids, counts = np.unique(candidate_ids, return_counts=True)
                if uniq_ids.size == 0:
                    continue

                best_tid = int(uniq_ids[np.argmax(counts)])
                labeled_f32[sub_idx, -1] = float(best_tid)

    def _init_gpu_knn(seeds_xyz_f32, centroids_xy_f32, seed_k, tree_k):
        """
        Prepare GPU-based nearest-neighbour models using RAPIDS, if available.

        Returns
        -------
        dict or None
            Dictionary containing CuPy handle and fitted models, or ``None`` when
            GPU acceleration cannot be used.
        """
        if seeds_xyz_f32.size == 0:
            return None

        try:  # noqa: SIM105 - explicit import to surface informative error
            import cupy as cp  # type: ignore
            from cuml.neighbors import NearestNeighbors as cuNN  # type: ignore
        except Exception as exc:  # pragma: no cover - optional dependency
            warnings.warn(
                f"AssignPointsToTrees3D: GPU acceleration unavailable ({exc}). Falling back to CPU.",
                RuntimeWarning,
            )
            return None

        try:
            max_seed_n = max(1, int(seed_k))
            max_tree_n = max(1, int(tree_k))

            seeds_gpu = cp.asarray(seeds_xyz_f32, dtype=cp.float32)
            seed_nn = cuNN(metric="euclidean", n_neighbors=max_seed_n)
            seed_nn.fit(seeds_gpu)

            tree_nn = None
            if centroids_xy_f32.shape[0] > 0:
                centroids_gpu = cp.asarray(centroids_xy_f32, dtype=cp.float32)
                tree_nn = cuNN(metric="euclidean", n_neighbors=max_tree_n)
                tree_nn.fit(centroids_gpu)

            return {"cp": cp, "seed_nn": seed_nn, "tree_nn": tree_nn}
        except Exception as exc:  # pragma: no cover - GPU runtime errors
            warnings.warn(
                f"AssignPointsToTrees3D: GPU initialisation failed ({exc}). Falling back to CPU.",
                RuntimeWarning,
            )
            return None

    def _append_tree_height_and_finalize(arr_f32, uniq_tids, height_by_idx_f32):
        """
        arr_f32: [N, D+1] float32, last col = TreeID (float32; -1.0 for unassigned)
        uniq_tids: sorted unique tree IDs (int32)
        height_by_idx_f32: per-unique-tree heights aligned with uniq_tids
        returns [N', D+2] float32 with TreeHeight inserted before TreeID; drop -1 rows if requested.
        """
        if arr_f32.size == 0:
            return arr_f32

        tree_ids_int = arr_f32[:, -1].astype(np.int32, copy=False)
        th = np.full(arr_f32.shape[0], -1.0, dtype=np.float32)

        assigned_mask = tree_ids_int != -1
        if np.any(assigned_mask):
            tids = tree_ids_int[assigned_mask]
            idxs = np.searchsorted(uniq_tids, tids)  # map TID -> compact index
            th[assigned_mask] = height_by_idx_f32[idxs]

        core = arr_f32[:, :-1]
        tid_col = arr_f32[:, -1:].astype(np.float32, copy=False)
        out = np.hstack([core, th.reshape(-1, 1), tid_col]).astype(np.float32, copy=False)

        if include_unassigned:
            return out
        return out[out[:, -1].astype(np.int32) != -1]

    # ---------------- guards & dtype normalization ----------------

    densecloud = np.asarray(densecloud, dtype=np.float32)
    repopulated_data = np.asarray(repopulated_data)  # keep as-is; cast slices

    if repopulated_data.size == 0:
        out0 = np.hstack([densecloud, -np.ones((densecloud.shape[0], 1), dtype=np.float32)])
        # no uniq_tids/heights; finalize trivially
        return _append_tree_height_and_finalize(out0, uniq_tids=np.array([], dtype=np.int32),
                                                height_by_idx_f32=np.array([], dtype=np.float32))

    # ---------------- per-tree metadata (single pass over sorted groups) ----------------

    rep_ids = repopulated_data[:, stem_id_field].astype(np.int32, copy=False)
    uniq_tids = np.unique(rep_ids)  # sorted
    n_trees = uniq_tids.size

    bounds_min = np.empty(n_trees, dtype=np.float32)
    bounds_max = np.empty(n_trees, dtype=np.float32)
    centroids_xy = np.empty((n_trees, 2), dtype=np.float32)
    height_by_idx_f32 = np.full(n_trees, -1.0, dtype=np.float32)

    # sort by ID for grouped computation
    order = np.argsort(rep_ids.astype(np.int64, copy=False))
    rep_sorted = repopulated_data[order]
    ids_sorted = rep_sorted[:, stem_id_field].astype(np.int32, copy=False)

    changes = np.r_[True, ids_sorted[1:] != ids_sorted[:-1]]
    starts = np.nonzero(changes)[0]
    ends = np.r_[starts[1:], len(ids_sorted)]

    for s, e in zip(starts, ends):
        tid = int(ids_sorted[s])
        tidx = int(np.searchsorted(uniq_tids, tid))

        blk = rep_sorted[s:e]
        blk_xyz = blk[:, :3].astype(np.float32, copy=False)
        rel_h = blk[:, height_field].astype(np.float32, copy=False)

        # vertical bounds
        nearest_idx = int(np.argmin(np.abs(rel_h - np.float32(min_height))))
        minZ = float(blk_xyz[nearest_idx, 2])
        maxZ = float(np.max(blk_xyz[:, 2]) + float(height_margin))
        if maxZ < minZ:
            maxZ = minZ
        bounds_min[tidx] = np.float32(minZ)
        bounds_max[tidx] = np.float32(maxZ)

        # centroid XY
        centroids_xy[tidx] = blk_xyz[:, :2].mean(axis=0).astype(np.float32, copy=False)

        # per-tree original height
        if tree_height_field is not None:
            th_vals = blk[:, tree_height_field].astype(np.float32, copy=False)
            if th_vals.size > 0:
                finite = np.isfinite(th_vals)
                if finite.any():
                    height_by_idx_f32[tidx] = np.nanmax(th_vals)
                else:
                    height_by_idx_f32[tidx] = np.float32(-1.0)

    # ---------------- KD-Trees (float32) ----------------

    seeds_xyz = repopulated_data[:, :3].astype(np.float32, copy=False)
    n_seeds = seeds_xyz.shape[0]

    seed_k_guess, tree_k_guess = _auto_neighbor_counts(n_seeds, n_trees)
    leafsize_seeds = _auto_leafsize(n_seeds)
    leafsize_trees = _auto_leafsize(n_trees)

    safe_k = max(1, min(seed_k_guess, n_seeds)) if n_seeds else 1

    # Map each seed row's TreeID -> compact index via searchsorted (fast, vectorized)
    seeds_tid_idx = np.searchsorted(uniq_tids, rep_ids).astype(np.int32, copy=False)

    safe_k_tree = max(1, min(tree_k_guess, n_trees)) if n_trees else 1

    gpu_state = _init_gpu_knn(seeds_xyz, centroids_xy, safe_k, safe_k_tree) if use_gpu else None

    if gpu_state is not None:
        cp_mod = gpu_state["cp"]
        seed_nn_gpu = gpu_state["seed_nn"]
        tree_nn_gpu = gpu_state["tree_nn"]

        def _gpu_seed_query(xyz_block, k):
            query_gpu = cp_mod.asarray(xyz_block, dtype=cp_mod.float32)
            _, idx_gpu = seed_nn_gpu.kneighbors(query_gpu, k=int(k))
            return cp_mod.asnumpy(idx_gpu)

        def _gpu_tree_query(xy_block, k):
            if tree_nn_gpu is None:
                return None
            query_gpu = cp_mod.asarray(xy_block, dtype=cp_mod.float32)
            _, idx_gpu = tree_nn_gpu.kneighbors(query_gpu, k=int(k))
            return cp_mod.asnumpy(idx_gpu)
    else:
        seed_nn_gpu = tree_nn_gpu = None

    kdt_seeds = cKDTree(seeds_xyz, leafsize=leafsize_seeds)
    kdt_trees_xy = cKDTree(centroids_xy.astype(np.float32, copy=False), leafsize=leafsize_trees)

    # ---------------- assignment (chunked, two-pass KNN) ----------------

    if chunk_size is None or chunk_size <= 0:
        chunk_size = _choose_chunk_size(densecloud.shape[0], safe_k)

    def _assign_block(dc_block_f32):
        B = dc_block_f32.shape[0]
        assigned_tid = np.full(B, -1, dtype=np.int32)  # pre-allocate (int32 tree IDs)

        # PASS 1: nearest seed only (k=1)
        if gpu_state is not None:
            i1 = _gpu_seed_query(dc_block_f32[:, :3], k=1)
            i1 = np.asarray(i1).reshape(-1)
        else:
            _, i1 = kdt_seeds.query(dc_block_f32[:, :3], k=1, workers=-1)
            i1 = np.asarray(i1).reshape(-1)
        nearest_tree_idx = seeds_tid_idx[i1]  # (B,)
        z = dc_block_f32[:, 2]

        n_minZ = bounds_min[nearest_tree_idx]
        n_maxZ = bounds_max[nearest_tree_idx]

        inside_mask = (z >= n_minZ) & (z <= n_maxZ)
        assigned_tid[inside_mask] = uniq_tids[nearest_tree_idx[inside_mask]]

        # PASS 2: only for rows above the current vertical range
        above_mask = z > n_maxZ
        if np.any(above_mask):
            rows = np.nonzero(above_mask)[0]
            sub_xyz = dc_block_f32[rows, :3]
            if gpu_state is not None:
                neigh_idx = _gpu_seed_query(sub_xyz, k=safe_k)
            else:
                _, neigh_idx = kdt_seeds.query(sub_xyz, k=safe_k, workers=-1)
            neigh_idx = np.asarray(neigh_idx)
            if safe_k == 1:
                neigh_idx = neigh_idx[:, None]
            elif neigh_idx.ndim == 1:
                neigh_idx = neigh_idx[:, None]

            cand_tid_idx = seeds_tid_idx[neigh_idx]  # (R, k)
            z_above = z[rows][:, None]

            valid_seed = ((z_above >= bounds_min[cand_tid_idx]) &
                          (z_above <= bounds_max[cand_tid_idx]))
            has_ok_seed = valid_seed.any(axis=1)

            if np.any(has_ok_seed):
                first_ok = np.argmax(valid_seed[has_ok_seed], axis=1)
                pick_idx = cand_tid_idx[has_ok_seed, :][np.arange(first_ok.size), first_ok]
                assigned_tid[rows[has_ok_seed]] = uniq_tids[pick_idx]

            # Fallback to tree-centroid KNN (XY) for unresolved rows
            rows_fb = rows[~has_ok_seed]
            if rows_fb.size:
                if gpu_state is not None and tree_nn_gpu is not None:
                    neigh_tree_idx = _gpu_tree_query(dc_block_f32[rows_fb, :2], k=safe_k_tree)
                else:
                    _, neigh_tree_idx = kdt_trees_xy.query(dc_block_f32[rows_fb, :2],
                                                           k=safe_k_tree, workers=-1)
                neigh_tree_idx = np.asarray(neigh_tree_idx)
                if safe_k_tree == 1:
                    neigh_tree_idx = neigh_tree_idx[:, None]
                elif neigh_tree_idx.ndim == 1:
                    neigh_tree_idx = neigh_tree_idx[:, None]

                valid_tree = ((z[rows_fb, None] >= bounds_min[neigh_tree_idx]) &
                              (z[rows_fb, None] <= bounds_max[neigh_tree_idx]))
                has_ok_tree = valid_tree.any(axis=1)
                if np.any(has_ok_tree):
                    first_ok_fb = np.argmax(valid_tree[has_ok_tree], axis=1)
                    pick_fb = neigh_tree_idx[has_ok_tree, :][np.arange(first_ok_fb.size), first_ok_fb]
                    assigned_tid[rows_fb[has_ok_tree]] = uniq_tids[pick_fb]

        # Build output once per block (float32)
        if not include_unassigned:
            keep = assigned_tid != -1
            dc = dc_block_f32[keep, :]
            tid = assigned_tid[keep].astype(np.float32, copy=False).reshape(-1, 1)
        else:
            dc = dc_block_f32
            tid = assigned_tid.astype(np.float32, copy=False).reshape(-1, 1)

        return np.hstack([dc, tid]).astype(np.float32, copy=False)

    # Process in chunks
    if chunk_size >= densecloud.shape[0]:
        labeled = _assign_block(densecloud)
    else:
        pieces = []
        n = densecloud.shape[0]
        for s in range(0, n, chunk_size):
            e = min(s + chunk_size, n)
            pieces.append(_assign_block(densecloud[s:e]))
        labeled = (np.vstack(pieces).astype(np.float32, copy=False)
                   if pieces else np.empty((0, densecloud.shape[1] + 1), dtype=np.float32))

    # ---------------- optional per-tree CC3D refinement ----------------

    if refine_cc3d and labeled.size > 0:
        pts = labeled  # float32 [N, D+1], last col TreeID as float32
        tree_ids_final = pts[:, -1].astype(np.int32, copy=False)
        for tid in np.unique(tree_ids_final):
            if tid == -1:
                continue
            idxs = np.where(tree_ids_final == tid)[0]
            if idxs.size == 0:
                continue
            cloud_t = pts[idxs, :3]  # float32
            comp_lbls = _cc3d_labels_guard(cloud_t, gap, cc3d_max_voxels)
            if comp_lbls.size == 0:
                continue
            values, counts = np.unique(comp_lbls, return_counts=True)
            main_label = values[np.argmax(counts)]
            small_global = idxs[comp_lbls != main_label]
            if small_global.size > 0:
                pts[small_global, -1] = -1.0  # unassign smaller components
        labeled = pts

    # ---------------- min-height contact validation ----------------

    if labeled.size > 0:
        height_tol = 0.1  # metres
        span_tol = 0.1    # metres
        tree_ids_final = labeled[:, -1].astype(np.int32, copy=False)
        assigned_mask = tree_ids_final != -1
        if np.any(assigned_mask):
            assigned_idx = np.nonzero(assigned_mask)[0]
            tids_assigned = tree_ids_final[assigned_mask]
            dropped_contact = set()
            dropped_span = set()

            height_idx = None
            if height_field is not None:
                try:
                    cand_idx = int(height_field)
                except (TypeError, ValueError):
                    cand_idx = None
                if cand_idx is not None:
                    n_cols = labeled.shape[1]
                    if cand_idx < 0:
                        cand_idx += n_cols
                    if 0 <= cand_idx < n_cols - 1:
                        height_idx = cand_idx

            for tid in np.unique(tids_assigned):
                idx = np.searchsorted(uniq_tids, tid)
                if idx >= uniq_tids.size or uniq_tids[idx] != tid:
                    continue  # inconsistent metadata; skip
                tid_mask = tids_assigned == tid
                if not np.any(tid_mask):
                    continue
                row_idx = assigned_idx[tid_mask]
                z_points = labeled[row_idx, 2]
                min_z = bounds_min[idx]

                # Prefer validating against per-point heights above terrain when available.
                h_points = np.empty(0, dtype=np.float32)
                if height_idx is not None:
                    h_vals = labeled[row_idx, height_idx].astype(np.float32, copy=False)
                    h_points = h_vals[np.isfinite(h_vals)]

                if h_points.size > 0:
                    missing_contact = not np.any(np.abs(h_points - float(min_height)) <= height_tol)
                else:
                    missing_contact = not np.any(np.abs(z_points - min_z) <= height_tol)

                insufficient_span = False
                if height_idx is not None:
                    if h_points.size == 0:
                        insufficient_span = True
                    else:
                        span = float(np.max(h_points) - np.min(h_points))
                        insufficient_span = span < span_tol

                if missing_contact or insufficient_span:
                    labeled[row_idx, -1] = -1.0
                    if missing_contact:
                        dropped_contact.add(int(tid))
                    if insufficient_span:
                        dropped_span.add(int(tid))

            if dropped_contact:
                ids = sorted(dropped_contact)
                preview = ", ".join(map(str, ids[:5]))
                if len(ids) > 5:
                    preview += ", ..."
                warnings.warn(
                    (
                        f"AssignPointsToTrees3D: dropped {len(ids)} trees without points within "
                        f"+/-{height_tol:.2f} m of min-height level: {preview}"
                    ),
                    RuntimeWarning,
                )

            if dropped_span:
                ids = sorted(dropped_span)
                preview = ", ".join(map(str, ids[:5]))
                if len(ids) > 5:
                    preview += ", ..."
                warnings.warn(
                    (
                        f"AssignPointsToTrees3D: dropped {len(ids)} trees with height span < {span_tol:.2f} m "
                        f"in the provided height field: {preview}"
                    ),
                    RuntimeWarning,
                )

    # ---------------- append TreeHeight and finalize ----------------

    return _append_tree_height_and_finalize(labeled, uniq_tids, height_by_idx_f32)

###MAIN###
@MeasureProcessingTime
def EstimatePlotParameters(pointcloudpath, epsg=32633, reevaluate=False, segmentate=False, debug=False, rasterizestep=1, XSectionThickness=0.07, XSectionCount=3, XSectionStep=1, RANSACn=DEFAULT_RANSAC_ITERATIONS, RANSACd=DEFAULT_RANSAC_OUTLIER_THRESHOLD, WATERSHEDminheight=DEFAULT_WATERSHED_MIN_HEIGHT, dbhlimit=1.5, subsamplestep=0.05, chunksize=10, segmentationgap=0.05, segmentationminheight=DEFAULT_SEGMENTATION_MIN_HEIGHT, datatype="MLS/TLS Raw", keepfields="xyz", outpcdformat="txt"):
        """Run the full plot-processing pipeline: cleaning, disc fitting, and metric export.

        Parameters
        ----------
        pointcloudpath : str
            Path to the input point cloud file.
        epsg : int, optional
            EPSG code used for all outputs. Defaults to ``32633``.
        reevaluate : bool, optional
            ``True`` to reuse intermediate products from a previous run. Defaults to ``False``.
        segmentate : bool, optional
            ``True`` to trigger tree segmentation after processing. Defaults to ``False``.
        debug : bool, optional
            Enable verbose logging and debug exports. Defaults to ``False``.
        rasterizestep : float, optional
            Grid step (metres) for rasterisation stages. Defaults to ``1``.
        XSectionThickness : float, optional
            Thickness of cross-section slices (metres). Defaults to ``0.07``.
        XSectionCount : int, optional
            Number of cross-sections fitted per stem. Defaults to ``3``.
        XSectionStep : float, optional
            Vertical spacing between cross-sections (metres). Defaults to ``1``.
        RANSACn : int, optional
            Number of iterations for circle fitting. Defaults to ``DEFAULT_RANSAC_ITERATIONS``.
        RANSACd : float, optional
            Inlier tolerance for circle fitting (metres). Defaults to ``DEFAULT_RANSAC_OUTLIER_THRESHOLD``.
        WATERSHEDminheight : float, optional
            Minimum canopy height (metres) for crown delineation. Defaults to ``DEFAULT_WATERSHED_MIN_HEIGHT``.
        dbhlimit : float, optional
            Maximum diameter at breast height to keep (metres). Defaults to ``1.5``.
        subsamplestep : float, optional
            Spacing (metres) for initial subsampling. Defaults to ``0.05``.
        chunksize : int, optional
            Point chunk size used in streaming operations. Defaults to ``10``.
        segmentationgap : float, optional
            Spatial gap (metres) used for filtering non-tree objects during segmentation. Defaults to ``0.05``.
        segmentationminheight : float, optional
            Minimum above-ground height (metres) considered during segmentation. Defaults to ``DEFAULT_SEGMENTATION_MIN_HEIGHT``.
        datatype : str, optional
            Descriptor of the acquisition type (for example ``"MLS/TLS Raw"``). Defaults to ``"MLS/TLS Raw"``.
        keepfields : str, optional
            Field selection forwarded to :func:`LoadPointCloud`. Defaults to ``"xyz"``.
        outpcdformat : str, optional
            File extension for exported point clouds. Defaults to ``"txt"``.

        Returns
        -------
        None
            The routine writes its outputs to disk and prints progress messages.
        """
        start_time = time.time()
        start_dt = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        step_order = []
        step_durations = {}
        step_counts = {}
        step_annotations = {}

        def _record_step(step_name, duration):
            if step_name not in step_durations:
                step_durations[step_name] = 0.0
                step_counts[step_name] = 0
                step_order.append(step_name)
            step_durations[step_name] += duration
            step_counts[step_name] += 1

        def _set_step_annotation(step_name, message):
            if message:
                step_annotations[step_name] = message

        def _timed_call(step_name, func, *args, **kwargs):
            start = time.time()
            try:
                return func(*args, **kwargs)
            finally:
                _record_step(step_name, time.time() - start)

        def _format_duration(seconds):
            hours, rem = divmod(seconds, 3600)
            minutes, secs = divmod(rem, 60)
            return f"{int(hours):02d}:{int(minutes):02d}:{secs:05.2f}"

#    try:
        if "Dropbox" in pointcloudpath:
            StopDropbox()
        elif "OneDrive" in pointcloudpath:
            StopOnedrive()
        elif "Google Drive" in pointcloudpath:
            StopGoogleDrive()
        elif "iCloud" in pointcloudpath:
            StopiCloud()

        print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Started processing.")
        epsg = CheckEPSGIsMetric(epsg) #validate metric EPSG code was used. Angular projections are not supported

        check_stop() 
        if reevaluate == False:           
            cloud, folder = _timed_call("initial_cleanup", initial_cleanup, pointcloudpath, debug=debug, reevaluate=reevaluate,keepfields="xyz") #0
        elif reevaluate == True: #REEVALUATE IS DISCONTINUED, DOESNT WORK ANYMORE
            try:
                cloud, folder = _timed_call("initial_cleanup", initial_cleanup, pointcloudpath, debug=debug, reevaluate=reevaluate) #0
            except FileNotFoundError:
                print(f"[{TimeNow()}] {inspect.currentframe().f_code.co_name}: Data from previous run not found. Starting basic estimation.")
                folder = os.path.dirname(pointcloudpath)
                filename = os.path.splitext(os.path.basename(pointcloudpath))[0]
                reprocessingfolder = os.path.join(folder, f"{filename}-Processing-reevaluate")
                os.rmdir(reprocessingfolder)
                check_stop() 
                EstimatePlotParameters(pointcloudpath=pointcloudpath, epsg=epsg, reevaluate=False, segmentate=False, debug=debug, rasterizestep=rasterizestep, XSectionThickness=XSectionThickness, XSectionCount=XSectionCount, XSectionStep=XSectionStep, RANSACn=RANSACn, RANSACd=RANSACd, WATERSHEDminheight=WATERSHEDminheight, dbhlimit=dbhlimit, subsamplestep=subsamplestep, chunksize=chunksize, segmentationgap=segmentationgap, segmentationminheight=segmentationminheight, datatype=datatype, outpcdformat=outpcdformat)
                return
       
        #Setting up variables for processing functions
        if debug == False:
            debugdir = None
        else: 
            debugdir = folder #some function save outputs only if a directory is provided. Other functions save using SavePointCloud function

        # creating log file. It is done after initial cleanup, so that the log file is not causing trouble during the cleanup
        base = os.path.dirname(pointcloudpath)
        proc_folder = os.path.join(base, f"{os.path.splitext(os.path.basename(pointcloudpath))[0]}-Processing")
        log_file = os.path.join(proc_folder, "processing.log")

        print("EstimatePlotParameters: Started processing.")

        check_stop()
        #Some parameters are set based on the data type provided
        pts = len(cloud)
        if datatype == "MLS/TLS Raw":
            sorpts = math.ceil(pts/250000)
            sorsd = 0
            ptsfilter = 15
            CCfinestep = 0.05
        elif datatype == "MLS/TLS Cropped": ###Tweak
            sorpts = 6
            sorsd = 3 
            ptsfilter = 15
            CCfinestep = 0.05
        elif datatype in ["iPhone LiDAR", "CRP"]: ###Tweak
            XSectionCount = 2
            sorpts = 6
            sorsd = 1
            ptsfilter = 15
            CCfinestep = 0.05
        elif datatype == "UAV LiDAR":
            sorpts = 6
            sorsd = 1
            ptsfilter = 3
            CCfinestep = XSectionThickness
        else:
            sorpts = 6
            sorsd = 1
            ptsfilter = 15
            CCfinestep = 0.05
            print("DATA TYPE NOT SELECTED!")
        
        subsamplestep, XSectionThickness, CCstep = [subsamplestep, XSectionThickness, 0.5]
        check_stop() 
        #Main processing begins here
        if reevaluate == False:
            global shiftby #Used for shifting point cloud coordinates if it is too large
            cloud, shiftby = _timed_call("ShiftPointCloud", ShiftPointCloud, cloud)
            check_stop()

            cloud = _timed_call("LabelConnectedComponents", LabelConnectedComponents, cloud, CCstep, min_points=pts/100, keep_indices=1) #should filter out parts of the scan that are far from the main sample plot
            check_stop()
            cloud = _timed_call("RemoveField", RemoveField, cloud, -1) #removes the label field from LabelConnectedComponents
            #Trying to subsample clouds to united density and process with the filtering parameters
            densecloud = np.ascontiguousarray(_timed_call("LoadPointCloud", LoadPointCloud, cloud, "np")) #Using original densecloud takes a lot of time for processing, increasing processing time by hours, but potentially improving results
            cloud = _timed_call("RemoveDuplicatePoints", RemoveDuplicatePoints, cloud, min_distance=subsamplestep, fields=keepfields) #subsamples cloud to save computing resources in the following steps
            check_stop()
            if debug == True:
                SavePointCloud(cloud, os.path.join(folder, f"SubsampledPointCloud.{outpcdformat}"), shiftby=shiftby) #1

            check_stop()
            minima, maxima = _timed_call("RasterizeZminZmax (DTM)", RasterizeZminZmax, cloud, gridsize=rasterizestep, outputdir=debugdir, shiftby=shiftby, outpcdformat=outpcdformat) #2 #finding DTM
            minima = _timed_call("SORFilter (DTM)", SORFilter, minima, sorpts, sorsd) #3 #Filtering DTM outliers, to make the dtm accurate #Tweak once for cropped or crp iphone
            check_stop() 
            if datatype != "MLS/TLS Cropped":
                minima = _timed_call("SORFilter (DTM)", SORFilter, minima, 15, 1) #Twice for better filtering
                minima = _timed_call("SORFilter (DTM)", SORFilter, minima, 15, 1) #Three times for even better filtering, which is really crucial for correct cross sections extraction
            check_stop()
            if debug == True:
                SavePointCloud(minima, os.path.join(folder, f"SOR.{outpcdformat}"),shiftby=shiftby) #3
                _timed_call("PointcloudToRaster (DTM debug)", PointcloudToRaster, minima, 1, epsg=epsg, shiftby=shiftby, outputdir=folder) #DTM to raster
                RenameFile(os.path.join(folder,"cloud_raster.tif"),"DTMcrude") #4
                check_stop()
            dtmmesh = _timed_call("DelaunayMesh25D", DelaunayMesh25D, minima, outputdir=folder) #5 #DTM to mesh for better ground to point distance estimation
            _timed_call("MeshToShapefile", MeshToShapefile, dtmmesh, os.path.join(folder, "PlotInfo.shp"), epsg=epsg, shiftby=shiftby) #6 #Turning the plot extent into a polygon shapefile
            dtmmesh = _timed_call("MeshToPointCloud", MeshToPointCloud, dtmmesh, 50)
            check_stop() 
            if debug == True:
                SavePointCloud(dtmmesh,os.path.join(folder,f"DTMrefined.{outpcdformat}"),shiftby=shiftby)

            _timed_call("PointcloudToRaster (DTM refined)", PointcloudToRaster, dtmmesh, 1, epsg=epsg, shiftby=shiftby, outputdir=folder) #DTM to raster
            try:
                RenameFile(os.path.join(folder,"cloud_raster.tif"),"DTM") #4
            except:
                print()
            check_stop()

            cloud = _timed_call("CropCloudByExtent", CropCloudByExtent, cloud, os.path.join(folder,"cloud_delaunay_SHIFT.ply" )) #crop point cloud to only contain points within the reliable DTM area
            check_stop()
            if debug == True:
                SavePointCloud(cloud,os.path.join(folder, f"CropByDTM.{outpcdformat}"),shiftby=shiftby) #7

            if datatype not in ["iPhone LiDAR", "CRP"]: #iphone and CRP doesnt need this processing as it does not contain info about tree heights and crowns
                minima, maxima = _timed_call("RasterizeZminZmax (DSM)", RasterizeZminZmax, cloud, gridsize=rasterizestep, outputdir=debugdir, shiftby=shiftby, outpcdformat=outpcdformat) #8 finding DSM
                _timed_call("PointcloudToRaster (DSM)", PointcloudToRaster, maxima, 0.25, epsg=epsg, outputdir=folder, shiftby=shiftby) #9 DSM
                check_stop()
                try:
                    RenameFile(os.path.join(folder,"cloud_raster.tif"),"DSM") 
                except:
                    print()
                check_stop()
                chm = _timed_call("SubtractRasters", SubtractRasters, os.path.join(folder, "DSM.tif"), os.path.join(folder, "DTM.tif"), os.path.join(folder, "CHM.tif"), epsg=epsg) #10 #Making CHM by subtracting DSM and DTM
                check_stop()
                _timed_call("WatershedCrownDelineation", WatershedCrownDelineation, rastertif=os.path.join(folder,"CHM.tif"), mintreeheight=WATERSHEDminheight, epsg=epsg, smoothing_sigma=1, peak_local_max_footprint=(20,20)) #11 #Finding tree crowns to use for crown area calculation and individual tree segmentation #Tweak
            check_stop()
            
            flat = _timed_call("FlattenPointCloud", FlattenPointCloud, cloud, outputdir=debugdir, shiftby=shiftby, outpcdformat=outpcdformat) #12 #Flattening the point cloud to later detect tree stems
            check_stop()
            density = _timed_call("ComputeDensity", ComputeDensity, flat, outputdir=debugdir, shiftby=shiftby, mode = "2D", outpcdformat=outpcdformat) #13 #Detecting tree stems based on number of points in neighborhood
            del cloud, flat, minima, maxima   #Tweak if iphone nebude to hazet chybu?
            if datatype not in ["iPhone LiDAR", "CRP"]:
                del chm

        elif reevaluate == True: #Reusing the point cloud with density from previous run to save resources if possible
            density = cloud
            del cloud
            density, shiftby = _timed_call("ShiftPointCloud", ShiftPointCloud, density)
            check_stop()
            dtmmesh = os.path.join(os.path.dirname(pointcloudpath), f"{os.path.splitext(os.path.basename(pointcloudpath))[0]}-Processing", f"{os.path.splitext(os.path.basename(pointcloudpath))[0]}_cloud_delaunay.ply")
            _timed_call("MeshToShapefile", MeshToShapefile, dtmmesh, os.path.join(folder, "PlotInfo.shp"), epsg=epsg) #NEW

        # from here the processing for reevaluation and evaluation is the same again
        check_stop()

        density = _timed_call("ChunkPointCloudBySize", ChunkPointCloudBySize, density, chunk_size=chunksize)
        filterdensity = []
        for c in density:
            check_stop() 
            if c.size == 0:
                continue
            c = _timed_call("FilterByValue", FilterByValue, c, -1, "12.5%","100%", outputdir=None, shiftby=shiftby) #XX  #keeping only points with large number of neighbors-finding trees #Tweak the 15 % percentage, maybe create options for filtering aggresivity in future. Small agressivity leads to incomlete butts and omitted trees in some cases, but the individual stems are harder to determine and may fall into a single tree if closely neighboured.
            filterdensity.append(c)
        
        del density

        filterdensity = np.concatenate(filterdensity, axis=0)
        check_stop()
        filterdensity = _timed_call("LabelConnectedComponents (stems)", LabelConnectedComponents, filterdensity, voxel_size=0.05, min_points=1, keep_indices=-1) #13 #splitting the found stems to individual pointclouds
        component_labels = np.unique(filterdensity[:, -1])
        finefilterdensity = []

        for label in component_labels:
            check_stop() 
            ccpoints = filterdensity[filterdensity[:, -1] == label][:, :] #this should take points from filterdensity variable
            cbox = GetBoundingBox(ccpoints)
            if (cbox[1] - cbox[0] >= 4) or (cbox[3] - cbox[2] >= 4): #tweak
                ccpoints = _timed_call("FilterByValue", FilterByValue, ccpoints, -2, "25%","100%", outputdir=None, shiftby=shiftby) #tweak
                finefilterdensity.append(ccpoints)
            else:
                finefilterdensity.append(ccpoints)
        del filterdensity
        finefilterdensity = np.concatenate(finefilterdensity, axis=0)
        finefilterdensity = RemoveField(finefilterdensity, -1) #removing the field with old component labels
        finefilterdensity = RemoveField(finefilterdensity, -1) #removing the field with density values
        check_stop() 
        finefilterdensity = _timed_call("LabelConnectedComponents (fine stems)", LabelConnectedComponents, finefilterdensity, voxel_size=0.05, min_points=1, keep_indices=-1)


        if debug == True:
            SavePointCloud(finefilterdensity, os.path.join(folder, f"FilterDensity.{outpcdformat}"), shiftby=shiftby) #14

        finefilterdensity = RemoveField(finefilterdensity,2)
        check_stop()
        count = max(int(XSectionCount), 1)  # ensure we always have an iterable of heights
        disc_heights = [1.3 + i * XSectionStep for i in range(count)]

        # Extract unique connected component labels
        unique_labels = set()
        unique_labels = np.unique(finefilterdensity[:, -1]) 

        discsall = []
        dtmmesh = os.path.join(folder,"cloud_delaunay_SHIFT.ply")
        if debug == True:
            SavePointCloud(finefilterdensity, os.path.join(folder, f"PreprocessedStems.{outpcdformat}"),shiftby=shiftby) #15

        check_stop() 

        # First, compute terrain distances (and load the dense point cloud).
        terrain_data = _timed_call(
            "GetTerrainDistances",
            GetTerrainDistances,
            repopulated_trees=finefilterdensity,
            shiftby=shiftby,
            unique_labels=unique_labels,
            dtmmesh=dtmmesh,
            disc_heights=disc_heights,
            XSectionThickness=XSectionThickness,
            debugdir=debugdir,
            outpcdformat=outpcdformat,
        )
      
        # Then, extract the cross-sectional discs.
        repopulated_data = _timed_call(
            "MapScalarFields",
            MapScalarFields,
            source_pc=terrain_data,
            target_pc=densecloud,
            field_indices=[-1, -2, -4],
            distance_threshold=subsamplestep,
            drop_nan=True,
            shiftby=shiftby,
            save_path=None,
        ) #Map scalar fields from the dense point cloud to the terrain data

        if segmentate == False:
            repopulated_data = _ensure_tail_order(repopulated_data, (-1, -3, -2))

        if debug == True:
            SavePointCloud(repopulated_data, os.path.join(folder, f"RepopulatedStems.{outpcdformat}"), shiftby=shiftby)

        if segmentate == True:
            repopulated_data = _timed_call(
                "AssignPointsToTrees3D",
                AssignPointsToTrees3D,
                densecloud,
                repopulated_data,
                stem_id_field=-3,
                height_field=-2,
                tree_height_field=-1,
                min_height=segmentationminheight,
                include_unassigned=True,
                refine_cc3d=True,
                gap=segmentationgap,
            )  # bug needs to adjust based on datatype!
            if datatype not in ["iPhone LiDAR","CRP"]:
                _timed_call(
                    "SaveTreeFootprintsShapefile",
                    SaveTreeFootprintsShapefile,
                    repopulated_data,
                    output_dir=folder,
                    epsg=epsg,
                    pixel_size=0.05,
                    close_radius=2.0,
                    pad_pixels=2,
                    min_area=0.01,
                    shiftby=shiftby[:2] if shiftby is not None else (0, 0),
                    tree_id_field=-1,
                    tree_height_field=-2,
                )
            repopulated_data = _timed_call("CloudToMeshVerticalDistance", CloudToMeshVerticalDistance, repopulated_data, dtmmesh, shiftby=shiftby, max_dist=(max(disc_heights) + 0.5 * XSectionThickness) + 0.01) #Adding distance to ground as a field to the point cloud
            if repopulated_data.size and repopulated_data.shape[1] >= 2:
                tree_id_col = -2  # last column holds terrain distance, TreeID lives just before it
                tree_ids = repopulated_data[:, tree_id_col].astype(np.int32, copy=False)
                assigned_mask = tree_ids != -1
                dropped = int(np.count_nonzero(~assigned_mask))

                if debug or dropped == 0:
                    to_save = repopulated_data
                else:
                    to_save = np.ascontiguousarray(repopulated_data[assigned_mask])
                SavePointCloud(to_save, os.path.join(folder, f"DenseCloudTrees.{outpcdformat}"), shiftby=shiftby)

                if dropped:
                    repopulated_data = np.ascontiguousarray(repopulated_data[assigned_mask])
                    warnings.warn(
                        f"EstimatePlotParameters: removed {dropped} unassigned points (TreeID = -1) from further processing.",
                        RuntimeWarning,
                    )
            else:
                SavePointCloud(repopulated_data, os.path.join(folder, f"DenseCloudTrees.{outpcdformat}"), shiftby=shiftby)
            IdDiscsIndexLabels = -3
            IdDiscsIndexHeight = -1
        else:

            IdDiscsIndexLabels = -3
            IdDiscsIndexHeight = -1


        del terrain_data, densecloud


    ####INDEXY se meni
        discsall = _timed_call("ExtractCrossSections", ExtractCrossSections, repopulated_data, shiftby, disc_heights, XSectionThickness, debug, folder, outpcdformat=outpcdformat)
        discsall = _timed_call("IdentifyDiscs", IdentifyDiscs, discsall, labelsindex=IdDiscsIndexLabels, heightsindex=IdDiscsIndexHeight)
        discsall = _timed_call("FitCrossSections", FitCrossSections, discsall=discsall, RANSACn=RANSACn, RANSACd=RANSACd, CCfinestep=CCfinestep, ptsfilter=ptsfilter, datatype=datatype, XSectionThickness=XSectionThickness, segmentate=segmentate)
        check_stop()
        discsall = _timed_call("process_discsall", process_discsall, discsall, folder, debug=debug, shiftby=shiftby, outpcdformat=outpcdformat) #15 #sorting the cross sections ; bug- iphone and crp dont need tree height and hd
        discsall = _timed_call("filter_and_transform", filter_and_transform, discsall, max_d=dbhlimit) # modifying the data for export to shapefile
        check_stop()
        _timed_call("SaveToShapefile (TreeDiscs)", SaveToShapefile, discsall, folder, "TreeDiscs", epsg=epsg, shiftby=shiftby) #16 #saves all cross sections at all heights
        discs_dbh = _timed_call("filter_disc_height", filter_disc_height, discsall, dbhlim=dbhlimit) #keeps only cross sections at DBH and if it is not avaliable, uses data from higher levels to estimate DBH based on linear taper
        check_stop()
        _timed_call("SaveToShapefile (DetectedTrees)", SaveToShapefile, discs_dbh, folder, "DetectedTrees", epsg=epsg, shiftby=[0,0]) #17 #saves the tree info (DBH, height, etc.)
        plotinfo_stats = _timed_call(
            "UpdatePlotInfo",
            UpdatePlotInfo,
            os.path.join(folder, "PlotInfo.shp"),
            os.path.join(folder, "DetectedTrees.shp"),
        )
        if isinstance(plotinfo_stats, dict):
            params = plotinfo_stats.get("michajlov_params")
            sse_val = plotinfo_stats.get("michajlov_sse")
            if params:
                annotation = f" (a={params[0]:.4f}, b={params[1]:.4f}"
                if sse_val is not None:
                    annotation += f", SSE={sse_val:.4f}"
                annotation += ")"
            else:
                annotation = " (a/b unavailable)"
            _set_step_annotation("UpdatePlotInfo", annotation)
        if datatype not in ["iPhone LiDAR", "CRP"]:
            _timed_call("UpdateCrownIDs", UpdateCrownIDs, os.path.join(folder, "DetectedTrees.shp"), os.path.join(folder, "TreeCrowns.shp")) #Assigns crown ID to delineated crowns based on the ids of trees within the polygon

        ###Final cleanup###
        check_stop()
        if debug == False:
            if datatype not in ["iPhone LiDAR", "CRP"]:
                #os.remove(os.path.join(folder, "DTM.tif"))
                os.remove(os.path.join(folder, "DSM.tif"))
                os.remove(os.path.join(folder, "cloud_delaunay_SHIFT.ply"))
                os.remove(os.path.join(folder, "cloud_delaunay.ply"))
            elif datatype in ["iPhone LiDAR", "CRP"]:
                os.remove(os.path.join(folder, "cloud_delaunay_SHIFT.ply"))
                os.remove(os.path.join(folder, "cloud_delaunay.ply"))


        if debug == True and datatype not in ("iPhone LiDAR", "CRP"):
                os.rename (os.path.join(folder, f"SubsampledPointCloud.{outpcdformat}"),os.path.join(folder, f"01SubsamplePointCloud-CloudSS.{outpcdformat}")) #1
                os.rename (os.path.join(folder, f"cloud_rasterize_min.{outpcdformat}"),os.path.join(folder, f"02RasterizeZminZmax-CloudMin.{outpcdformat}")) #2
                os.rename (os.path.join(folder, f"SOR.{outpcdformat}"),os.path.join(folder, f"03SORFilter-CloudSOR.{outpcdformat}")) #3
                os.rename (os.path.join(folder, "DTM.tif"),os.path.join(folder, "04PointcloudToRaster-RasterDTM.tif")) #4 
                os.rename (os.path.join(folder, "DTMcrude.tif"),os.path.join(folder, "04PointcloudToRaster-RasterDTMcrude.tif")) #4
                os.rename (os.path.join(folder, f"DTMrefined.{outpcdformat}"),os.path.join(folder, f"04PointcloudToRaster-CloudDTMrefined.{outpcdformat}")) #4
                os.rename (os.path.join(folder, "cloud_delaunay.ply"),os.path.join(folder, "05DelaunayMesh25D-MeshDTM.ply")) #5
                os.rename (os.path.join(folder, "cloud_delaunay_SHIFT.ply"),os.path.join(folder, "05DelaunayMesh25D-MeshDTMShifted.ply")) #5
                #6
                os.rename (os.path.join(folder, f"CropByDTM.{outpcdformat}"),os.path.join(folder, f"07CropCloudByExtent-CloudCropByDTM.{outpcdformat}")) #7
                os.rename (os.path.join(folder, f"cloud_rasterize_max.{outpcdformat}"),os.path.join(folder, f"08RasterizeZminZmax-CloudMax.{outpcdformat}")) #8
                os.rename (os.path.join(folder, "DSM.tif"),os.path.join(folder, "09PointcloudToRaster-RasterDSM.tif")) #9 bug- is shifted to origin
                os.rename (os.path.join(folder, "CHM.tif"),os.path.join(folder, "10SubtractRasters-RasterCHM.tif")) #10 
                #11     
                os.rename (os.path.join(folder, f"cloud_flat.{outpcdformat}"),os.path.join(folder, f"12FlattenPointCloud-CloudFlat.{outpcdformat}")) #12
                os.rename (os.path.join(folder, f"cloud_density.{outpcdformat}"),os.path.join(folder, f"13ComputeDensity-CloudDensity.{outpcdformat}")) #13          
                os.rename (os.path.join(folder, f"FilterDensity.{outpcdformat}"),os.path.join(folder, f"14FilterByValue-CloudFilterDensity.{outpcdformat}")) #14 
                os.rename (os.path.join(folder, f"PreprocessedStems.{outpcdformat}"),os.path.join(folder, f"15UnflattenPointCloud-CloudPreprocessedStems.{outpcdformat}")) #15
                os.rename (os.path.join(folder, f"CloudTerrainDistances.{outpcdformat}"),os.path.join(folder, f"16GetTerrainDistances-CloudTerrainDistances.{outpcdformat}"))#16
                os.rename (os.path.join(folder, f"RepopulatedStems.{outpcdformat}"),os.path.join(folder, f"17MapScalarFields-CloudRepopulatedStems.{outpcdformat}"))#17
                if segmentate:
                    os.rename (os.path.join(folder, f"DenseCloudTrees.{outpcdformat}"),os.path.join(folder, f"18AssignPointsToTrees3D-DenseCloudTrees.{outpcdformat}"))#18
                    #19
                os.rename (os.path.join(folder, f"StemDiscsUnprocessed.{outpcdformat}"),os.path.join(folder, f"19ExtractCrossSections-CloudStemDiscsUnprocessed.{outpcdformat}"))#20
                os.rename (os.path.join(folder, f"StemDiscsProcessed.{outpcdformat}"),os.path.join(folder, f"20process_discsall-CloudStemDiscsProcessed.{outpcdformat}"))#21

                for f in os.listdir(os.path.join(folder)):
                    #1
                    #2
                    #3
                    #4
                    #5
                    if "PlotInfo" in f:
                        os.rename(os.path.join(folder,f),os.path.join(folder,f"06MeshToShapefile-{f}")) #6
                    #6
                    #7
                    #8
                    #9
                    #10
                    if "TreeCrowns" in f:
                        os.rename(os.path.join(folder,f),os.path.join(folder,f"11WatershedCrownDelineation-{f}")) #11
                    #12
                    #13
                    #14
                    #15
                    #16 
                    #17
                    #18 
                    if "TreeFootprints" in f: 
                        os.rename(os.path.join(folder,f),os.path.join(folder,f"19SaveTreeFootprintsShapefile-{f}")) #19                
                    if "grouped_" in f: 
                        os.rename(os.path.join(folder,f),os.path.join(folder,f"20process_discsall-{f}")) #20 in renames as well
                    if "TreeDiscs." in f: 
                        os.rename(os.path.join(folder,f),os.path.join(folder,f"21filter_and_transform-{f}")) #21
                    if "DetectedTrees." in f: 
                        os.rename(os.path.join(folder,f),os.path.join(folder,f"22filter_disc_height-{f}")) #22

        # Renaming iPhone / CRP case
        if debug == True and datatype in ("iPhone LiDAR", "CRP"):
                os.rename (os.path.join(folder, f"SubsampledPointCloud.{outpcdformat}"),os.path.join(folder, f"01SubsamplePointCloud-CloudSS.{outpcdformat}")) #1
                os.rename (os.path.join(folder, f"cloud_rasterize_min.txt"),os.path.join(folder, f"02RasterizeZminZmax-CloudMin.{outpcdformat}")) #2
                os.rename (os.path.join(folder, f"SOR.txt"),os.path.join(folder, f"03SORFilter-CloudSOR.{outpcdformat}")) #3
                os.rename (os.path.join(folder, "DTM.tif"),os.path.join(folder, "04PointcloudToRaster-RasterDTM.tif")) #4
                os.rename (os.path.join(folder, "DTMcrude.tif"),os.path.join(folder, "04PointcloudToRaster-RasterDTMcrude.tif")) #4
                os.rename (os.path.join(folder, f"DTMrefined.txt"),os.path.join(folder, f"04PointcloudToRaster-CloudDTMrefined.{outpcdformat}")) #4
                os.rename (os.path.join(folder, "cloud_delaunay.ply"),os.path.join(folder, "05DelaunayMesh25D-MeshDTM.ply")) #5
                os.rename (os.path.join(folder, "cloud_delaunay_SHIFT.ply"),os.path.join(folder, "05DelaunayMesh25D-MeshDTMShifted.ply")) #5
                #6
                os.rename (os.path.join(folder, f"CropByDTM.{outpcdformat}"),os.path.join(folder, f"07CropCloudByExtent-CloudCrop.{outpcdformat}")) #7
                os.rename (os.path.join(folder, f"cloud_rasterize_max.{outpcdformat}"),os.path.join(folder, f"08RasterizeZminZmax-CloudMax.{outpcdformat}")) #8
                os.rename (os.path.join(folder, f"cloud_flat.{outpcdformat}"),os.path.join(folder, f"09FlattenPointCloud-CloudFlat.{outpcdformat}")) #9
                os.rename (os.path.join(folder, f"cloud_density.{outpcdformat}"),os.path.join(folder, f"10ComputeDensity-CloudDensity.{outpcdformat}")) #10        
                os.rename (os.path.join(folder, f"FilterDensity.{outpcdformat}"),os.path.join(folder, f"11FilterByValue-CloudFilterDensity.{outpcdformat}")) #11
                os.rename (os.path.join(folder, f"PreprocessedStems.{outpcdformat}"),os.path.join(folder, f"12UnflattenPointCloud-CloudPreprocessedStems.{outpcdformat}")) #12
                os.rename (os.path.join(folder, f"CloudTerrainDistances.{outpcdformat}"),os.path.join(folder, f"13GetTerrainDistances-CloudTerrainDistances.{outpcdformat}"))#13
                os.rename (os.path.join(folder, f"RepopulatedStems.{outpcdformat}"),os.path.join(folder, f"14MapScalarFields-CloudRepopulatedStems.{outpcdformat}"))#14
                if segmentate:
                    os.rename (os.path.join(folder, f"DenseCloudTrees.{outpcdformat}"),os.path.join(folder, f"15AssignPointsToTrees3D-DenseCloudTrees.{outpcdformat}"))#15
                os.rename (os.path.join(folder, f"StemDiscsUnprocessed.{outpcdformat}"),os.path.join(folder, f"16ExtractCrossSection-CloudStemDiscsUnprocessed.{outpcdformat}"))#16
                os.rename (os.path.join(folder, f"StemDiscsProcessed.{outpcdformat}"),os.path.join(folder, f"17process_discsall-CloudStemDiscsProcessed.{outpcdformat}"))#17

                for f in os.listdir(os.path.join(folder)):
                    #1
                    #2
                    #3
                    #4
                    #5
                    if "PlotInfo" in f:
                        os.rename(os.path.join(folder,f),os.path.join(folder,f"06MeshToShapefile-{f}")) #6
                    #6
                    #7
                    #8
                    #9
                    #10
                    #11
                    #12
                    #13 in loop as well
                    #14
                    #15
                    #16
                    #17
                    # if "grouped_" in f: 
                    #     os.rename(os.path.join(folder,f),os.path.join(folder,f"17process_discsall-{f}")) #13 in renames as well
                    if "TreeDiscs." in f: 
                        os.rename(os.path.join(folder,f),os.path.join(folder,f"18filter_and_transform-{f}")) #18
                    if "DetectedTrees." in f: 
                        os.rename(os.path.join(folder,f),os.path.join(folder,f"19filter_disc_height-{f}")) #19

    
        elif debug == False:
            RenameFilesInDirectory(pointcloudpath)

        if segmentate == "Debug" and reevaluate== False:
            print("segmentate with debug files")
        if segmentate == "SegmentateOnly":
            print("segmentate with reevaluation to ensure polygons are available, debug trees available")

        elapsed = time.time() - start_time
        elapsed_str = datetime.fromtimestamp(elapsed, timezone.utc).strftime("%H:%M:%S")


        with open(log_file, "a") as f:
            f.write(
                f"File: {os.path.basename(pointcloudpath)} Started: {start_dt}, Duration: {elapsed_str}\n"
                f"Parameters: debug={debug}, segmentate={segmentate}, datatype={datatype}, "
                f"epsg={epsg}, subsamplestep={subsamplestep}, rasterizestep={rasterizestep}, "
                f"XSectionThickness={XSectionThickness}, XSectionCount={XSectionCount}, "
                f"XSectionStep={XSectionStep}, RANSACn={RANSACn}, RANSACd={RANSACd}, "
                f"WATERSHEDminheight={WATERSHEDminheight}, dbhlimit={dbhlimit}, "
                f"segmentationgap={segmentationgap}, segmentationminheight={segmentationminheight}, "
                f"chunksize={chunksize}\n"
                f"Number of points: {pts}\nGlobal shift: {shiftby}"
            )
        #LOG Append contents of DRlog.txt to processing.log
        drlog_path = "DRlog.txt"
        if os.path.exists(drlog_path):
            with open(drlog_path, "r") as drlog_file:
                drlog_contents = drlog_file.read()
            with open(log_file, "a") as processing_log:
                processing_log.write("\n\n=== Processing (v0.5) ===\n")
                processing_log.write(drlog_contents)

            os.remove(drlog_path)

        if step_order:
            timing_lines = []
            for step_name in step_order:
                duration = step_durations.get(step_name, 0.0)
                calls = step_counts.get(step_name, 0)
                formatted_duration = _format_duration(duration)
                label = step_name
                annotation = step_annotations.get(step_name)
                if annotation:
                    label = f"{label}{annotation}"
                if calls > 1:
                    timing_lines.append(f"  {label}: {formatted_duration} ({calls} calls)")
                else:
                    timing_lines.append(f"  {label}: {formatted_duration}")
            with open(log_file, "a") as processing_log:
                processing_log.write("\n\nProcessing stage durations:\n")
                processing_log.write("\n".join(timing_lines))
                processing_log.write("\n")

@jit(nopython=True)
def warmup(x):
    """Burn a few CPU cycles so first GUI render does not pay JIT cost.

    Parameters
    ----------
    x : int
        Divisor used in the dummy modulus loop.

    Returns
    -------
    int
        Dummy accumulator value; unused elsewhere.
    """
    total = 0
    for i in range(10000000):
        total += i % x
    return total

def DendRobotGUI():
    """Launch the Tkinter-based GUI front-end for DendRobot."""
    global pause_event
    warmup(1)
    dendrobot_image_data = base64.b64decode("")
    dendrobot_image = Image.open(BytesIO(dendrobot_image_data))
    # List to store Point Cloud Data Path entries
    pcdpath_entries = []
    tick_labels = []  # List to store tick labels for each entry
    additional_paths_visible = False
    additional_panel = None
    additional_paths_frame = None
    additional_paths_tree = None
    additional_paths_hint = None
    additional_item_data = {}
    MAX_ADDITIONAL_PATHS = 99  # Keep the total number of point clouds in line with previous limit
    ADDITIONAL_PANEL_WIDTH = 460
    ADDITIONAL_PANEL_HEIGHT = 220
    WINDOW_PADDING = 0
    dnd_available = TkinterDnD is not None and DND_FILES is not None
    expanded_window_geometry = None
    processing_thread = None
    orig_stdout = sys.stdout
    orig_stderr = sys.stderr

    console_logs = []
    console_window = None
    console_text_widget = None
    outputs_overview_window = None

    def _append_console_entry_ui(entry):
        """Append a single console entry to the console viewer if it is open."""
        nonlocal console_text_widget
        if console_text_widget and console_text_widget.winfo_exists():
            console_text_widget.config(state="normal")
            console_text_widget.insert(tk.END, entry + "\n")
            console_text_widget.config(state="disabled")
            console_text_widget.see(tk.END)

    def _refresh_console_view():
        """Load the current console log into the console viewer."""
        nonlocal console_text_widget
        if console_text_widget and console_text_widget.winfo_exists():
            console_text_widget.config(state="normal")
            console_text_widget.delete("1.0", tk.END)
            if console_logs:
                console_text_widget.insert(tk.END, "\n".join(console_logs) + "\n")
            console_text_widget.config(state="disabled")
            console_text_widget.see(tk.END)

    def _close_console_window():
        """Handle closing of the console viewer window."""
        nonlocal console_window, console_text_widget
        if console_window and console_window.winfo_exists():
            console_window.destroy()
        console_window = None
        console_text_widget = None

    def open_console_window():
        """Open (or focus) a scrollable window with the full console output."""
        nonlocal console_window, console_text_widget
        if console_window and console_window.winfo_exists():
            console_window.deiconify()
            console_window.lift()
            console_text_widget.see(tk.END)
            return

        console_window = tk.Toplevel(root)
        console_window.title("Console Output")
        console_window.geometry("800x400")
        console_window.protocol("WM_DELETE_WINDOW", _close_console_window)

        console_text_widget = tk.Text(console_window, wrap="none", state="disabled")
        console_text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        scrollbar = ttk.Scrollbar(console_window, orient="vertical", command=console_text_widget.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        console_text_widget.configure(yscrollcommand=scrollbar.set)

        _refresh_console_view()

    def _build_outputs_overview_text():
        lines = [
            "Processing Outputs Overview",
            "===========================",
            "",
            "Location",
            "--------",
            (
                "All files are written inside the '<input-name>-Processing' folder that is "
                "created next to the source point cloud."
            ),
            (
                "When the Debug checkbox is disabled the files are renamed to include the "
                "input file stem (for example 'plot01_TreeDiscs.shp'); with Debug enabled "
                "the stage names listed below are kept verbatim."
            ),
            "",
            "Core Shapefiles",
            "---------------",
            "TreeDiscs (`TreeDiscs.shp` together with the .dbf/.prj/.shx companions):",
            "  - Cross-section catalogue with one record per fitted disc.",
            "  - Fields:",
            "    - ID_TREE (int): sequential stem identifier produced by the pipeline.",
            "    - DISC_X / DISC_Y (float, metres): disc centroid in the project CRS.",
            "    - DISC_H (float, metres): slice height above ground (rounded to centimetres).",
            "    - DISC_D (float, centimetres): stem diameter derived from the fitted radius.",
            "    - TREE_H (float, metres): estimated total tree height for the stem.",
            "    - DISC_ERROR (float, metres): root-mean-square residual of the circle fit.",
            "    - h/d_index (float, m/cm): TREE_H divided by DISC_D.",
            "    - perimeter (float, metres): concave hull perimeter of the slice footprint.",
            "",
            (
                "DetectedTrees (`DetectedTrees.shp`, produced for all datatypes except iPhone "
                "LiDAR / CRP):"
            ),
            "  - One row per tree representing the disc at breast height (1.3 m).",
            (
                "  - Fields mirror `TreeDiscs`; here DISC_H is always 1.3 and DISC_D is the "
                "DBH in centimetres."
            ),
            "",
            "TreeCrowns (`TreeCrowns.shp`):",
            "  - Watershed-derived crown polygons.",
            "  - Fields:",
            "    - CrownID (int): identifier used during crown segmentation.",
            "    - Area (float, m^2): polygon area in square metres.",
            "",
            "PlotInfo (`PlotInfo.shp`):",
            "  - Plot footprint extracted from the refined DTM mesh.",
            "  - Fields include ID (int), Area (float, m^2), TreeCount (int), BasalArea (float, m^2), TreeVolume (float, m^3), DgCm (float, cm) and Hg (float, m) populated by UpdatePlotInfo when DetectedTrees are available.",
            "",
            "TreeFootprints (`TreeFootprints.shp`, only when `Segmentate` is enabled):",
            "  - Ground-level footprint for each segmented stem.",
            "  - Fields:",
            "    - TreeID (int): identifier shared with TreeDiscs/DetectedTrees.",
            "    - TreeH (float, metres): height associated with the stem.",
            "    - Pts (int): number of points supporting the footprint.",
            "    - Area (float, m^2): footprint polygon area.",
            "",
            "Point Clouds",
            "------------",
            "*.<ext> below uses the point-cloud format selected in the GUI (default 'txt').",
            (
                "DenseCloudTrees.<ext> (Segmentate only) stores XYZ, any original scalar fields, "
                "the assigned TreeID and the height-above-terrain column."
            ),
            (
                "RepopulatedStems.<ext> and CloudTerrainDistances.<ext> (debug mode) expose the "
                "stem skeleton with appended TreeID, tree height and distance-to-ground attributes."
            ),
            (
                "StemDiscsUnprocessed.<ext> / StemDiscsProcessed.<ext> (debug mode) keep the raw and "
                "fitted disc points; the last columns hold the fitted centre (X,Y), radius (m), "
                "RANSAC error (m) and concave-hull perimeter (m)."
            ),
            "",
            "Debug Exports (standard datasets)",
            "---------------------------------",
            "Files are kept when Debug is enabled and the data type is not iPhone LiDAR / CRP:",
            "  01SubsamplePointCloud-CloudSS.<ext>         - Voxel-subsampled cloud used for terrain modelling.",
            "  02RasterizeZminZmax-CloudMin.<ext>          - Minimum surface cloud before DTM filtering.",
            "  03SORFilter-CloudSOR.<ext>                  - Statistically filtered minima for DTM refinement.",
            (
                "  04PointcloudToRaster-RasterDTM.tif          - Refined terrain raster plus "
                "DTMcrude/CloudDTMrefined variants."
            ),
            "  05DelaunayMesh25D-MeshDTM(.ply)             - Triangulated DTM mesh (shifted and unshifted).",
            "  06MeshToShapefile-PlotInfo.*                - Plot footprint shapefile components.",
            "  07CropCloudByExtent-CloudCropByDTM.<ext>    - Source cloud cropped to the reliable DTM footprint.",
            "  08RasterizeZminZmax-CloudMax.<ext>          - Maximum surface cloud feeding the DSM.",
            "  09PointcloudToRaster-RasterDSM.tif          - Digital surface model raster.",
            (
                "  10SubtractRasters-RasterCHM.tif             - Canopy height model derived from "
                "DSM minus DTM."
            ),
            "  11WatershedCrownDelineation-TreeCrowns.*    - Crown polygons from watershed segmentation.",
            "  12FlattenPointCloud-CloudFlat.<ext>         - Ground-normalised cloud used for stem detection.",
            "  13ComputeDensity-CloudDensity.<ext>         - 2-D density response for stem candidate search.",
            "  14FilterByValue-CloudFilterDensity.<ext>    - Density cloud after percentile filtering.",
            (
                "  15UnflattenPointCloud-CloudPreprocessedStems.<ext> - Stem points restored to original "
                "elevation."
            ),
            (
                "  16GetTerrainDistances-CloudTerrainDistances.<ext> - Stem cores with per-point terrain "
                "distance and tree height."
            ),
            (
                "  17MapScalarFields-CloudRepopulatedStems.<ext> - Dense cloud with mapped TreeID/height "
                "attributes."
            ),
            "  18AssignPointsToTrees3D-DenseCloudTrees.<ext> - (Segmentate) dense cloud classified by TreeID.",
            "  19ExtractCrossSections-CloudStemDiscsUnprocessed.<ext> - Discs before fitting.",
            "  20process_discsall-CloudStemDiscsProcessed.<ext> - Discs after circle fitting.",
            (
                "  19process_discsall-grouped_*.txt            - Optional per-tree disc stacks when group "
                "export is enabled."
            ),
            "  20filter_and_transform-TreeDiscs.*          - TreeDiscs shapefile components.",
            "  21filter_disc_height-DetectedTrees.*        - DetectedTrees shapefile components.",
            "",
            "Debug Exports (iPhone LiDAR / CRP)",
            "----------------------------------",
            "Stages are similar but the CHM/crown steps are skipped:",
            "  01SubsamplePointCloud-CloudSS.<ext>         - Subsampled cloud.",
            "  02RasterizeZminZmax-CloudMin.<ext>          - Minimum surface samples.",
            "  03SORFilter-CloudSOR.<ext>                  - Filtered minima.",
            (
                "  04PointcloudToRaster-RasterDTM.tif          - Terrain raster plus "
                "DTMcrude/CloudDTMrefined variants."
            ),
            "  05DelaunayMesh25D-MeshDTM(.ply)             - DTM mesh exports.",
            "  06MeshToShapefile-PlotInfo.*                - Plot footprint.",
            "  07CropCloudByExtent-CloudCrop.<ext>         - Cropped cloud (DTM only).",
            "  08RasterizeZminZmax-CloudMax.<ext>          - Maximum surface cloud.",
            "  09FlattenPointCloud-CloudFlat.<ext>         - Flattened cloud for stem detection.",
            "  10ComputeDensity-CloudDensity.<ext>         - Density response.",
            "  11FilterByValue-CloudFilterDensity.<ext>    - Filtered density.",
            "  12UnflattenPointCloud-CloudPreprocessedStems.<ext> - Stem candidates.",
            "  13GetTerrainDistances-CloudTerrainDistances.<ext> - Terrain distances.",
            (
                "  14MapScalarFields-CloudRepopulatedStems.<ext> - Dense cloud with scalar transfer."
            ),
            "  15AssignPointsToTrees3D-DenseCloudTrees.<ext> - (Segmentate) dense cloud classified by TreeID.",
            "  16ExtractCrossSection-CloudStemDiscsUnprocessed.<ext> - Raw discs.",
            "  17process_discsall-CloudStemDiscsProcessed.<ext> - Fitted discs.",
            "  18filter_and_transform-TreeDiscs.*          - TreeDiscs shapefile components.",
            "  19filter_disc_height-DetectedTrees.*        - DetectedTrees shapefile components.",
            "",
            (
                "Tip: leave Debug disabled for production runs to keep only the final shapefiles "
                "and key point clouds, or enable it during development to inspect every intermediate artefact."
            ),
        ]
        return "\n".join(lines)

    def _handle_outputs_overview_destroy(event):
        nonlocal outputs_overview_window
        if outputs_overview_window is not None and event.widget is outputs_overview_window:
            outputs_overview_window = None

    def _close_outputs_overview():
        nonlocal outputs_overview_window
        if outputs_overview_window and outputs_overview_window.winfo_exists():
            outputs_overview_window.destroy()
        else:
            outputs_overview_window = None

    def open_outputs_overview():
        nonlocal outputs_overview_window
        if outputs_overview_window and outputs_overview_window.winfo_exists():
            outputs_overview_window.deiconify()
            outputs_overview_window.lift()
            return

        outputs_overview_window = tk.Toplevel(root)
        outputs_overview_window.title("Processing Outputs Overview")
        outputs_overview_window.minsize(520, 400)
        outputs_overview_window.geometry("720x560")
        outputs_overview_window.transient(root)
        outputs_overview_window.protocol("WM_DELETE_WINDOW", _close_outputs_overview)
        outputs_overview_window.bind("<Destroy>", _handle_outputs_overview_destroy)

        frame = ttk.Frame(outputs_overview_window)
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        text_widget = tk.Text(frame, wrap="word", state="normal")
        text_widget.insert("1.0", _build_outputs_overview_text())
        text_widget.configure(state="disabled")
        text_widget.grid(row=0, column=0, sticky="nsew")

        scrollbar = ttk.Scrollbar(frame, orient="vertical", command=text_widget.yview)
        scrollbar.grid(row=0, column=1, sticky="ns")
        text_widget.configure(yscrollcommand=scrollbar.set)

        frame.rowconfigure(0, weight=1)
        frame.columnconfigure(0, weight=1)

        outputs_overview_window.grab_set()

    ui_queue = Queue()

    def enqueue_ui(callback, *args, **kwargs):
        """Queue UI updates to ensure they run on Tk's main thread."""
        ui_queue.put((callback, args, kwargs))

    def process_ui_queue():
        """Drain queued UI updates and reschedule the next check."""
        try:
            while True:
                callback, args, kwargs = ui_queue.get_nowait()
                try:
                    callback(*args, **kwargs)
                except Exception:
                    traceback.print_exc()
        except Empty:
            pass
        try:
            root.after(50, process_ui_queue)
        except TclError:
            pass

    def run_background_task(
        start_status,
        success_status,
        failure_status,
        worker_fn,
        success_callback=None,
        failure_callback=None,
    ):
        """Execute a potentially long-running task off the UI thread."""
        try:
            status_label.config(text=start_status)
            root.update_idletasks()
        except TclError:
            pass

        def _worker():
            try:
                result = worker_fn()
            except Exception as exc:
                traceback.print_exc()
                enqueue_ui(status_label.config, text=failure_status)
                if failure_callback:
                    enqueue_ui(failure_callback, exc)
                else:
                    enqueue_ui(
                        messagebox.showerror,
                        "Error",
                        f"{failure_status}\n{exc}",
                    )
            else:
                enqueue_ui(status_label.config, text=success_status)
                if success_callback:
                    enqueue_ui(success_callback, result)

        thread = threading.Thread(target=_worker, daemon=True)
        thread.start()
    pause_event = threading.Event()
    pause_event.set()  # Initially set to allow processing

    def create_spinbox(parent, row, label_text, var, from_, to, increment, validate_func, tooltip_text, default_value):
        last_valid = tk.StringVar(value=str(default_value))

        def on_validate(P):
            if validate_func(P):
                last_valid.set(P)
                return True
            else:
                parent.after_idle(lambda: var.set(float(last_valid.get()) if '.' in last_valid.get() else int(last_valid.get())))
                return False

        label = tk.Label(parent, text=label_text)
        label.grid(row=row, column=0, sticky="w", padx=10, pady=5)

        spinbox = ttk.Spinbox(
            parent, from_=from_, to=to, increment=increment,
            textvariable=var,
            validate="key",
            validatecommand=(parent.register(on_validate), '%P'),
            width=8
        )
        spinbox.grid(row=row, column=1, padx=10, pady=5)
        spinbox.config(state="normal")
        var.set(default_value)
        create_tooltip(label, tooltip_text)
        return spinbox

    def ensure_combobox_horizontal_scroll(widget):
        """Attach a horizontal scrollbar to a ttk.Combobox dropdown."""
        try:
            popdown = widget.tk.call("ttk::combobox::PopdownWindow", widget)
            frame = f"{popdown}.f"
            listbox = f"{frame}.l"
        except tk.TclError:
            return

        try:
            scrollbar = f"{frame}.xscroll"
            exists = int(widget.tk.call("winfo", "exists", scrollbar))
            manager = widget.tk.call("winfo", "manager", listbox)
        except tk.TclError:
            return

        if not exists:
            try:
                widget.tk.call(
                    "ttk::scrollbar",
                    scrollbar,
                    "-orient",
                    "horizontal",
                    "-command",
                    f"{listbox} xview",
                )
                if manager == "grid":
                    widget.tk.call("grid", "columnconfigure", frame, 0, "-weight", 1)
                    widget.tk.call(
                        "grid",
                        scrollbar,
                        "-in",
                        frame,
                        "-row",
                        1,
                        "-column",
                        0,
                        "-sticky",
                        "ew",
                    )
                else:
                    widget.tk.call(
                        "pack",
                        scrollbar,
                        "-in",
                        frame,
                        "-side",
                        "bottom",
                        "-fill",
                        "x",
                    )
            except tk.TclError:
                return

        try:
            widget.tk.call(
                listbox,
                "configure",
                "-xscrollcommand",
                f"{scrollbar} set",
            )
        except tk.TclError:
            return

    def run_estimation():
        global stop_processing
        stop_processing = False  # Reset the stop flag at the start of each run
        pause_event.set()

        # Reset status indicators before starting a new estimation run
        for label in tick_labels:
            enqueue_ui(label.config, text="")
        if additional_paths_tree:
            for item_id in additional_paths_tree.get_children():
                enqueue_ui(additional_paths_tree.set, item_id, "status", "")
                enqueue_ui(additional_paths_tree.item, item_id, tags=())

        # Gather the input values from the GUI
        try:
            rasterizestep = float(rasterizestep_spinbox.get())
            segmentationgap = float(segmentationgap_spinbox.get())
            segmentationminheight = float(segmentationminheight_spinbox.get())
            XSectionThickness = float(XSectionThickness_spinbox.get())
            XSectionCount = int(XSectionCount_spinbox.get())
            XSectionStep = float(XSectionStep_spinbox.get())
            subsamplestep = float(SubsampleStep_spinbox.get())
            epsg = int(epsg_var.get().split()[0])
            segmentate = segmentate_var.get()
            debug = debug_var.get()
            datatype = datatype_menu.get()
            dbhlim = float(maxdbh_spinbox.get())
            chunksize = float(chunksize_spinbox.get())
        except Exception as e:
            enqueue_ui(status_label.config, text=f"Invalid Parameter Values: {str(e)}")
            return

        # Build the processing queue (primary entry first, then additional items)
        targets = []
        primary_path = initial_pcdpath_entry.get().strip()
        if primary_path and tick_labels:
            targets.append(("entry", os.path.normpath(primary_path), tick_labels[0]))

        if additional_paths_tree:
            for item_id in additional_paths_tree.get_children():
                full_path = additional_item_data.get(item_id)
                if full_path:
                    targets.append(("tree", os.path.normpath(full_path), item_id))

        if not targets:
            enqueue_ui(status_label.config, text="Please provide at least one point cloud path.")
            return

        # Process each Point Cloud Data Path
        for target_type, pointcloudpath, ui_ref in targets:
            try:
                check_stop()  # Check for stop or pause before processing each file
                if not pointcloudpath:
                    continue

                display_path = shorten_path(pointcloudpath)
                enqueue_ui(status_label.config, text=f"Processing {display_path}")

                start_time = time.time()
                EstimatePlotParameters(
                    pointcloudpath=pointcloudpath,
                    segmentate=segmentate,
                    debug=debug,
                    epsg=epsg,
                    subsamplestep=subsamplestep,
                    rasterizestep=rasterizestep,
                    segmentationgap=segmentationgap,
                    segmentationminheight=segmentationminheight,
                    XSectionThickness=float(XSectionThickness),
                    XSectionCount=int(XSectionCount),
                    XSectionStep=float(XSectionStep),
                    datatype=datatype,
                    dbhlimit=dbhlim,
                    chunksize=chunksize,
                )

                processing_time = time.time() - start_time  # Calculate the duration
                formatted_time = format_time(processing_time)

                if target_type == "entry":
                    enqueue_ui(ui_ref.config, text="✔️", fg="green")
                    enqueue_ui(create_tooltip, ui_ref, f"Processing time: {formatted_time}")
                else:
                    enqueue_ui(additional_paths_tree.set, ui_ref, "status", f"✔️ {formatted_time}")
                    enqueue_ui(additional_paths_tree.item, ui_ref, tags=("success",))

                enqueue_ui(status_label.config, text=f"Completed processing {display_path}")
                enqueue_ui(pause_button.config, state=tk.DISABLED)

            except StopProcessException as e:
                if target_type == "entry":
                    enqueue_ui(ui_ref.config, text="❌", fg="red")
                    enqueue_ui(create_tooltip, ui_ref, "Aborted by user")
                else:
                    enqueue_ui(additional_paths_tree.set, ui_ref, "status", "❌ Aborted")
                    enqueue_ui(additional_paths_tree.item, ui_ref, tags=("error",))
                enqueue_ui(status_label.config, text=f"Status: {str(e)}")
                break
            except Exception as e:
                if target_type == "entry":
                    enqueue_ui(ui_ref.config, text="❌", fg="red")
                    enqueue_ui(create_tooltip, ui_ref, f"Error: {str(e)}")
                else:
                    enqueue_ui(additional_paths_tree.set, ui_ref, "status", "❌ Error")
                    enqueue_ui(additional_paths_tree.item, ui_ref, tags=("error",))
                enqueue_ui(status_label.config, text=f"Error processing: {str(e)}")

            # Check for stop after each file
            check_stop()

    def open_file_dialog(entry_field, tick_label=None):
        """Open file dialog and set the selected path to the entry. Clear the tick label if provided."""
        filename = filedialog.askopenfilename()
        entry_field.delete(0, tk.END)
        entry_field.insert(0, filename)

        if tick_label is not None:
            tick_label.config(text="")

    def on_entry_change(event, tick_label):
        """Event handler to clear the tick label when the entry content changes."""
        tick_label.config(text="")

    def open_folder_dialog():
        return filedialog.askdirectory()

    def ensure_additional_paths_visible():
        nonlocal additional_paths_visible
        if additional_panel is None:
            return
        if not additional_paths_visible:
            additional_panel.place(relx=1.0, rely=0.0, x=-20, y=20, anchor="ne")
            additional_panel.lift()
            additional_paths_visible = True
            if expanded_window_geometry:
                root.geometry(expanded_window_geometry)
        refresh_additional_hint()

    def hide_additional_paths():
        nonlocal additional_paths_visible
        if additional_panel and additional_paths_visible:
            additional_panel.place_forget()
            additional_paths_visible = False
            if initial_window_geometry:
                root.geometry(initial_window_geometry)
            refresh_additional_hint()

    def refresh_additional_hint():
        if additional_paths_hint is None:
            return
        if additional_item_data:
            if additional_paths_hint.winfo_manager():
                additional_paths_hint.pack_forget()
        else:
            if additional_paths_hint.winfo_manager() == "":
                additional_paths_hint.pack(anchor="w", padx=8, pady=(4, 8))

    def clear_additional_paths():
        if additional_paths_tree:
            for item in additional_paths_tree.get_children():
                additional_paths_tree.delete(item)
            additional_item_data.clear()
        hide_additional_paths()

    def add_paths_to_tree(paths):
        if not additional_paths_tree:
            return 0

        existing = set(additional_item_data.values())
        queue = []

        for raw in paths:
            if not raw:
                continue
            normalized = os.path.normpath(raw)
            if os.path.isdir(normalized):
                continue
            if normalized in existing or normalized in queue:
                continue
            if len(additional_item_data) + len(queue) >= MAX_ADDITIONAL_PATHS:
                show_message(
                    root,
                    "Limit reached",
                    f"Maximal number of additional point clouds ({MAX_ADDITIONAL_PATHS}) reached.",
                )
                break
            queue.append(normalized)

        if not queue:
            refresh_additional_hint()
            return 0

        ensure_additional_paths_visible()
        added = 0

        for normalized in queue:
            item_id = additional_paths_tree.insert("", "end", values=(shorten_path(normalized), ""))
            additional_item_data[item_id] = normalized
            additional_paths_tree.item(item_id, tags=())
            existing.add(normalized)
            added += 1

        refresh_additional_hint()
        return added

    def autofill_folder(extension):
        root_dir = open_folder_dialog()
        if not root_dir:
            return

        file_paths = []
        for root, dirs, files in os.walk(root_dir):
            for file in files:
                if file.lower().endswith(f".{extension.lower()}"):
                    file_paths.append(os.path.join(root, file))

        if not file_paths:
            messagebox.showinfo("No Files Found", f"No .{extension} files were found in the selected folder.")
            return

        max_total = MAX_ADDITIONAL_PATHS + 1
        truncated = len(file_paths) > max_total
        file_paths = file_paths[:max_total]
        normalized = [os.path.normpath(p) for p in file_paths]

        if normalized:
            initial_pcdpath_entry.delete(0, tk.END)
            initial_pcdpath_entry.insert(0, normalized[0])
            if tick_labels:
                tick_labels[0].config(text="")

        clear_additional_paths()
        add_paths_to_tree(normalized[1:])

        if truncated:
            show_message(root, "Limit Reached", f"Only the first {max_total} files were added.")

    def add_pcdpath(file_paths=None):
        nonlocal additional_paths_visible
        if not additional_paths_tree:
            return

        if file_paths is None:
            if not additional_paths_visible:
                ensure_additional_paths_visible()
                return
            file_paths = filedialog.askopenfilenames()
        elif isinstance(file_paths, str):
            file_paths = [file_paths]
        else:
            file_paths = list(file_paths)

        if not file_paths:
            refresh_additional_hint()
            return

        added = add_paths_to_tree(file_paths)
        if added and additional_paths_tree:
            last_item = additional_paths_tree.get_children()[-1]
            additional_paths_tree.see(last_item)
            additional_paths_tree.selection_set(last_item)

    def remove_pcdpath():
        if not additional_paths_tree or not additional_item_data:
            hide_additional_paths()
            refresh_additional_hint()
            return

        selection = additional_paths_tree.selection()
        if not selection:
            show_message(root, "Select Path", "Select at least one additional path to remove.")
            return

        for item in list(selection):
            additional_paths_tree.delete(item)
            additional_item_data.pop(item, None)

        if not additional_item_data:
            hide_additional_paths()
        refresh_additional_hint()

    def show_message(window, title, message):
        # Create a Toplevel window
        message_window = tk.Toplevel(window)
        message_window.title(title)
        message_window.resizable(False, False)

        # Label with wrapped text
        label = tk.Label(
            message_window, text=message, padx=10, pady=10, justify="left", anchor="nw", wraplength=500
        )
        label.pack(expand=True, fill="both")

        # OK button
        ok_button = tk.Button(message_window, text="   OK   ", command=message_window.destroy)
        ok_button.pack(pady=(0, 10))

        # Force geometry update before positioning
        message_window.update_idletasks()

        # Get actual window size
        messagebox_width = message_window.winfo_width()
        messagebox_height = message_window.winfo_height()

        # Get parent window geometry
        main_window_x = window.winfo_rootx()
        main_window_y = window.winfo_rooty()
        main_window_width = window.winfo_width()
        main_window_height = window.winfo_height()

        # Center the message window over the parent
        x = main_window_x + (main_window_width // 2) - (messagebox_width // 2)
        y = main_window_y + (main_window_height // 2) - (messagebox_height // 2)

        message_window.geometry(f"+{x}+{y}")

        # Make it modal
        message_window.grab_set()

    def ask_for_extension():
        extension_window = tk.Toplevel(root)  # Create a new window on top of the main window
        extension_window.title("Select File Extension")
        
        # Set the size of the new window (e.g., 300x150)
        window_width = 300
        window_height = 150
        
        # Get the size of the main window (root) and calculate the position to center the new window
        main_window_x = root.winfo_x()
        main_window_y = root.winfo_y()
        main_window_width = root.winfo_width()
        main_window_height = root.winfo_height()

        # Calculate the position of the new window
        x = main_window_x + (main_window_width // 2) - (window_width // 2)
        y = main_window_y + (main_window_height // 2) - (window_height // 2)

        # Set the geometry of the new window to center it
        extension_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

        # Label to guide the user
        label = tk.Label(extension_window, text="Select files extension:")
        label.pack(pady=10)

        # Dropdown (combobox) for file extensions
        extension_var = tk.StringVar(value="laz")  # Default value is "laz"
        extension_dropdown = ttk.Combobox(extension_window, textvariable=extension_var)
        extension_dropdown['values'] = ("laz", "las", "txt", "ply", "pcd","xyz", "asc", "pts", "xyzn", "xyzrgb")
        extension_dropdown.pack(pady=10)
        # Function to confirm the extension selection and proceed to folder selection
        def confirm_extension():
            selected_extension = extension_var.get()
            extension_window.destroy()  # Close the pop-up window
            autofill_folder(selected_extension)  # Pass the selected extension to the autofill function

        # Confirm button to close the pop-up and start autofill
        confirm_button = tk.Button(extension_window, text="Confirm", command=confirm_extension)
        confirm_button.pack(pady=10)

    def shorten_path(file_path):
        """
        Shorten the file path to display only the drive, parent folder, and file name.
        """
        drive, tail = os.path.splitdrive(file_path)  # Extract the drive
        head, file_name = os.path.split(tail)  # Extract the file name and the rest of the path
        parent_folder = os.path.basename(os.path.dirname(file_path))  # Get the parent folder name

        # Construct the shortened path: Drive:\...ParentFolder\FileName
        shortened_path = f"{drive}\\...\\{parent_folder}\\{file_name}"
        return shortened_path

    def open_dir_dialog(entry_field):
        dirname = filedialog.askdirectory()
        entry_field.delete(0, tk.END)
        entry_field.insert(0, dirname)

    def reset_ui():
        # Define the initial values for all fields

        initial_values = {
            'pointcloudpath': "",  # Initial Point Cloud Data Path
            'reevaluate': False,
            'segmentate': False,
            'debug': False,
            'epsg': "32633 (UTM-Czechia, Slovakia, Poland, Austria, Croatia, Denmark, Germany)",
            'subsamplestep': 0.05,
            'rasterizestep': 1,
            'XSectionThickness': 0.07,
            'XSectionCount': 3,
            'XSectionStep': 1,
            'datatype': "MLS/TLS Raw",
            'maxdbh' : 1.5,
            'chunksize' : 10,
            'segmentationgap': 0.05,
            'segmentationminheight': DEFAULT_SEGMENTATION_MIN_HEIGHT,

        }

        # Clear and reset tick labels
        for label in tick_labels:
            label.config(text="")  # Clear tick marks
            # Unbind tooltips from labels
            label.unbind("<Enter>")
            label.unbind("<Leave>")

        # Reset the initial Point Cloud Data Path entry
        if pcdpath_entries:
            pcdpath_entries[0].delete(0, tk.END)
            pcdpath_entries[0].insert(0, initial_values['pointcloudpath'])

        # Remove any additional point clouds managed by the list widget
        clear_additional_paths()

        # Reset all parameter entries to their default values
        rasterizestep_spinbox.config(state="normal")
        rasterizestep_spinbox.set(initial_values['rasterizestep'])

        segmentationgap_var.set(initial_values['segmentationgap'])

        segmentationminheight_var.set(initial_values['segmentationminheight'])

        XSectionThickness_spinbox.config(state="normal")
        XSectionThickness_spinbox.set(initial_values['XSectionThickness'])

        maxdbh_spinbox.delete(0, tk.END)
        maxdbh_spinbox.insert(0, initial_values['maxdbh'])

        chunksize_spinbox.delete(0, tk.END)
        chunksize_spinbox.insert(0, initial_values['chunksize'])

        # Enable the spinbox and reset its value
        XSectionCount_spinbox.config(state="normal")  # Enable the spinbox
        XSectionCount_var.set(initial_values['XSectionCount'])  # Update the value using IntVar

        XSectionStep_spinbox.config(state="normal")  
        XSectionStep_var.set(initial_values['XSectionStep'])  

        SubsampleStep_spinbox.config(state="normal") 
        SubsampleStep_spinbox.set(initial_values['subsamplestep'])


        epsg_menu.set( initial_values['epsg'])

        datatype_menu.set(initial_values['datatype'])
        
        # Reset all Boolean (checkbox) values
        #reevaluate_var.set(initial_values['reevaluate'])
        segmentate_var.set(initial_values['segmentate'])
        update_segmentation_controls()
        debug_var.set(initial_values['debug'])

        # Reset the status label
        status_label.config(text="Status: Waiting to start processing...")

        # Reset the window geometry to its initial dimensions
        root.geometry(initial_window_geometry)

        # Inform the user that the UI has been reset
        show_message(root, "Reset", "UI has been reset to its initial values.")

    class StopProcessException(Exception):
        """Custom exception to stop the processing."""
        pass

    def append_console_log(message, level="INFO"):
        entry = f"{TimeNow()} - {level} - {message}"
        console_logs.append(entry)
        target = orig_stdout if level != "ERROR" else orig_stderr
        if target:
            try:
                target.write(entry + "\n")
                target.flush()
            except Exception:
                pass
        enqueue_ui(_append_console_entry_ui, entry)

    class PrintRedirect:
        def __init__(self, level="INFO"):
            self.level = level

        def write(self, msg):
            if msg.strip():  # Ignore empty messages
                append_console_log(msg.strip(), level=self.level)
        def flush(self):
            pass
    
    def stop_estimation():
        global stop_processing
        stop_processing = True  # Signal the worker thread to stop at the next check
        pause_event.set()       # Ensure a paused run can exit the wait loop

        def _disable_controls():
            pause_button.config(text="Pause", state=tk.DISABLED)
            stop_button.config(state=tk.DISABLED)

        enqueue_ui(_disable_controls)
        enqueue_ui(status_label.config, text="Status: Stopping current processing...")

    def start_run_estimation_thread():
        global stop_processing, pause_event
        # Disable the Run button to prevent multiple clicks
        run_button.config(state=tk.DISABLED)
        stop_processing = False
        pause_event.set()
        add_button.config(state=tk.DISABLED)
        remove_button.config(state=tk.DISABLED)
        reset_button.config(state=tk.DISABLED)
        stop_button.config(state=tk.NORMAL)
        pause_button.config(state=tk.NORMAL)
        # Start the estimation in a new thread
        thread = threading.Thread(target=run_estimation_with_reset)
        thread.start()

    def run_estimation_with_reset():
        try:
            run_estimation()
        finally:
            # Re-enable the Run button when estimation completes
            enqueue_ui(run_button.config, state=tk.NORMAL)
            enqueue_ui(add_button.config, state=tk.NORMAL)
            enqueue_ui(remove_button.config, state=tk.NORMAL)
            enqueue_ui(stop_button.config, state=tk.DISABLED)
            enqueue_ui(reset_button.config, state=tk.NORMAL)

    def create_tooltip(widget, text_getter):
        """Attach a tooltip to a widget that appears on hover."""
        def show_tooltip(event):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.geometry(f"+{event.x_root + 20}+{event.y_root + 10}")
            log_text = '\n'.join(console_logs[-5:]) if callable(text_getter) else text_getter
            label = tk.Label(tooltip, text=log_text, background="light green", relief="solid", borderwidth=1, wraplength=255, anchor="w", justify="left")
            label.pack()
            widget.tooltip = tooltip

        def hide_tooltip(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()

        widget.bind("<Enter>", show_tooltip)
        widget.bind("<Leave>", hide_tooltip)

    def create_tooltip_terminal(widget, text_getter):
        """Attach a tooltip to a widget that appears on hover and updates its content in real time."""
        
        def show_tooltip(event):
            # Create the tooltip window
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.geometry(f"+{event.x_root + 20}+{event.y_root + 10}")
            
            # Get the initial text; if text_getter is callable, call it to get the text.
            log_text = text_getter() if callable(text_getter) else text_getter
            label = tk.Label(
                tooltip,
                text=log_text,
                background="light green",
                relief="solid",
                borderwidth=1,
                wraplength=750,
                anchor="w",
                justify="left"
            )
            label.pack()
            
            # Store a reference to the tooltip in the widget
            widget.tooltip = tooltip

            def update_tooltip():
                # Only update if the tooltip still exists
                if tooltip.winfo_exists():
                    new_text = text_getter() if callable(text_getter) else text_getter
                    label.config(text=new_text)
                    # Schedule the next update (e.g., every 500 milliseconds)
                    tooltip.after(500, update_tooltip)
            
            # Start updating the tooltip text
            update_tooltip()

        def hide_tooltip(event):
            # Destroy the tooltip when the mouse leaves the widget
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()

        widget.bind("<Enter>", show_tooltip)
        widget.bind("<Leave>", hide_tooltip)

    def format_time(seconds):
        hours, remainder = divmod(seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{int(hours)}h {int(minutes)}m {int(seconds)}s"

    def toggle_pause():
        """Toggle the pause state and update the button label."""
        if pause_event.is_set():
            # Pause the process
            pause_event.clear()
            pause_button.config(text="Continue")
            status_label.config(text="Status: Processing paused...")
        else:
            # Resume the process
            pause_event.set()
            pause_button.config(text="Pause")
            status_label.config(text="Status: Processing resumed...")

    def on_datatype_change(event):
        if datatype_var.get() in ("iPhone LiDAR", "CRP"):
            XSectionCount_var.set(2)  # Set the value to 1
        elif datatype_var.get() in ("UAV LiDAR"):
            SubsampleStep_var.set(0.1)
            XSectionThickness_var.set(1)
            chunksize_var.set(100)
            XSectionCount_var.set(3)
        else:
            XSectionCount_var.set(3)  # Set the value to 6
            SubsampleStep_var.set(0.05)
            chunksize_var.set(10)
            XSectionThickness_var.set(0.07)
   
    def update_max_seen_height(*args):
        try:
            count = float(XSectionCount_var.get())
            step = float(XSectionStep_var.get())
            max_height = 1.3 + (count - 1) * step
            maxseenheight_label.config(text=f"≈ {round(max_height, 2)} m")
        except ValueError:
            maxseenheight_label.config(text="≈ invalid input")

    def validate_number(value, min_val, max_val, num_type=float, integer_only=False):
        """Generic numeric validator."""
        try:
            value = value.strip()
            if integer_only:
                if not value.isdigit():
                    return False
                value = int(value)
            else:
                value = num_type(value)
            return min_val <= value <= max_val
        except (ValueError, AttributeError):
            return False

    def make_validator(min_val, max_val, num_type=float, integer_only=False):
        """Factory returning a range-constrained validator."""
        def _validator(value):
            return validate_number(value, min_val, max_val, num_type=num_type, integer_only=integer_only)
        return _validator

    validate_subsamplestep = make_validator(0.01, 0.2)
    validate_xsectionthickness = make_validator(0.01, 1.0)
    validate_xsectioncount = make_validator(1, 5000, int, integer_only=True)
    validate_xsectionstep = make_validator(0.01, 2.0)
    validate_rasterizestept = make_validator(0.1, 5.0)
    validate_segmentationgap = make_validator(0.01, 1.0)
    validate_segmentationminheight = make_validator(0.0, 5.0)
    validate_chunksize = make_validator(1, 100.0)
    validate_maxdbh = make_validator(0.1, 5.0)
    def add_debug_borders(widget):
        """Recursively add borders to all child widgets for debugging."""
        try:
            widget.config(highlightthickness=1, highlightbackground="blue")
        except TclError:
            pass  # Skip widgets that do not support these options
        for child in widget.winfo_children():
            add_debug_borders(child)

    def on_epsg_change(event=None):
        """Handle selection or manual input of EPSG code."""
        user_input = epsg_var.get().strip()

        try:
            # Extract only the number before any text
            epsg_code = int(user_input.split()[0])
            print("Using EPSG code:", epsg_code)
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter a valid integer EPSG code or select from the menu.")
            return
        else:
            display_value = next(
                (label for label, value in EPSG_OPTIONS.items() if value == epsg_code),
                str(epsg_code),
            )
            if display_value != user_input:
                epsg_var.set(display_value)
    ####Function Menu Functions####
# ──────────────────────────────────────────────
    class MapDialog(simpledialog.Dialog):
        def body(self, master):
            # Source
            src_label = tk.Label(master, text="Source point cloud:")
            src_label.grid(row=0, sticky="w")
            self.src_var = tk.StringVar()
            tk.Entry(master, textvariable=self.src_var, width=50).grid(row=0, column=1)
            tk.Button(master, text="Browse…", command=self.browse_source).grid(row=0, column=2)
            create_tooltip(src_label, "Point cloud providing scalar fields to transfer.")

            # Target
            tgt_label = tk.Label(master, text="Target point cloud:")
            tgt_label.grid(row=1, sticky="w")
            self.tgt_var = tk.StringVar()
            tk.Entry(master, textvariable=self.tgt_var, width=50).grid(row=1, column=1)
            tk.Button(master, text="Browse…", command=self.browse_target).grid(row=1, column=2)
            create_tooltip(tgt_label, "Point cloud that will receive the mapped scalar fields.")

            # Save path
            save_label = tk.Label(master, text="Save output to:")
            save_label.grid(row=2, sticky="w")
            self.save_var = tk.StringVar()
            tk.Entry(master, textvariable=self.save_var, width=50).grid(row=2, column=1)
            tk.Button(master, text="Browse…", command=self.browse_save_pointcloud).grid(row=2, column=2)
            create_tooltip(save_label, "Optional path for writing the mapped target cloud.")

            # Field indices
            field_label = tk.Label(master, text="Field indices (comma-separated):")
            field_label.grid(row=3, sticky="w")
            self.field_indices_var = tk.StringVar()
            tk.Entry(master, textvariable=self.field_indices_var, width=50).grid(row=3, column=1, columnspan=2, sticky="w")
            create_tooltip(field_label, "Optional list of source scalar column indices to map. Leave empty to map all non-empty scalars.")

            # Distance threshold
            dist_label = tk.Label(master, text="Distance threshold (optional):")
            dist_label.grid(row=4, sticky="w")
            def _validate_distance(P):
                if not P.strip():
                    return True
                try:
                    float(P.replace(",", "."))
                    return True
                except ValueError:
                    return False

            self.distance_var = tk.StringVar(value="0")
            ttk.Spinbox(
                master,
                from_=0.0,
                to=1e9,
                increment=0.1,
                textvariable=self.distance_var,
                width=10,
                validate="key",
                validatecommand=(master.register(_validate_distance), "%P"),
            ).grid(row=4, column=1, sticky="w")
            create_tooltip(dist_label, "Maximum neighbour distance allowed for mapping. Points farther than this receive NaN.")

            # Drop NaN checkbox
            drop_label = tk.Label(master, text="Drop rows with NaN scalars:")
            drop_label.grid(row=5, sticky="w")
            self.drop_nan_var = tk.BooleanVar(value=False)
            tk.Checkbutton(master, variable=self.drop_nan_var).grid(row=5, column=1, sticky="w")
            create_tooltip(drop_label, "Enable to remove target points whose mapped scalar values contain NaN.")

            return None

        def browse_source(self):
            fn = filedialog.askopenfilename(
                filetypes=[("Point clouds","*.pcd *.ply *.txt *.xyz *.las *.laz *.asc *.e57"),("All files","*.*")]
            )
            if fn: self.src_var.set(fn)

        def browse_target(self):
            fn = filedialog.askopenfilename(
                filetypes=[("Point clouds","*.pcd *.ply *.txt *.xyz *.las *.laz *.asc *.e57"),("All files","*.*")]
            )
            if fn: self.tgt_var.set(fn)

        def browse_save_pointcloud(self):
            fn = filedialog.asksaveasfilename(
                defaultextension=".laz",
                filetypes=[
                    ("LAS (*.las)", "*.las"),
                    ("LAZ (*.laz)", "*.laz"),
                    ("PLY (*.ply)", "*.ply"),
                    ("PCD (*.pcd)", "*.pcd"),
                    ("TXT (*.txt)", "*.txt"),
                    ("XYZ (*.xyz)", "*.xyz"),
                    ("ASC (*.asc)", "*.asc"),
                    ("E57 (*.e57)", "*.e57"),
                    ("All files", "*.*"),
                ]
            )
            if fn: self.save_var.set(fn)

        def apply(self):
            # Pass all three back as a tuple
            self.result = (
                self.src_var.get(),
                self.tgt_var.get(),
                self.save_var.get() or None,
                self.field_indices_var.get().strip(),
                self.distance_var.get().strip(),
                self.drop_nan_var.get(),
            )

    def map_scalar_fields_dialog():
        dlg = MapDialog(root, title="Map Scalar Fields")
        if not dlg.result:
            return
        (
            source_pc,
            target_pc,
            save_path,
            field_indices_text,
            distance_text,
            drop_nan_flag,
        ) = dlg.result
        normalized_save = save_path or None

        # Parse field indices input
        field_indices = None
        if field_indices_text:
            tokens = [tok for tok in re.split(r"[,\s]+", field_indices_text) if tok]
            try:
                field_indices = [int(tok) for tok in tokens]
            except ValueError:
                messagebox.showerror("Invalid input", "Field indices must be integers separated by commas or spaces.")
                return

        # Parse distance threshold input
        distance_threshold = None
        if distance_text:
            try:
                distance_threshold = float(distance_text.replace(",", "."))
            except ValueError:
                messagebox.showerror("Invalid input", "Distance threshold must be a number.")
                return

        def worker():
            mapped = MapScalarFields(
                source_pc,
                target_pc,
                field_indices=field_indices,
                distance_threshold=distance_threshold,
                drop_nan=bool(drop_nan_flag),
                save_path=normalized_save,
                shiftby=None,
            )
            shape = tuple(mapped.shape) if hasattr(mapped, "shape") else None
            return {"shape": shape, "save_path": normalized_save}

        def on_success(info):
            shape = info.get("shape")
            msg = "Done!"
            if shape:
                msg += f" Result has shape {shape}."
            if info.get("save_path"):
                msg += f"\nSaved to:\n{info['save_path']}"
            messagebox.showinfo("Mapping Complete", msg)

        def on_failure(exc):
            messagebox.showerror("Error", f"Mapping failed:\n{exc}")

        run_background_task(
            start_status="Status: Mapping scalar fields...",
            success_status="Status: Scalar field mapping completed successfully.",
            failure_status="Status: Mapping scalar fields failed.",
            worker_fn=worker,
            success_callback=on_success,
            failure_callback=on_failure,
        )

    class CropDialog(simpledialog.Dialog):
        def body(self, master):
            # Source point cloud
            tk.Label(master, text="Input point cloud:").grid(row=0, sticky="w")
            self.cloud_var = tk.StringVar()
            tk.Entry(master, textvariable=self.cloud_var, width=50).grid(row=0, column=1)
            tk.Button(master, text="Browse…", command=self.browse_cloud).grid(row=0, column=2)

            # Extent source
            tk.Label(master, text="Extent polygon/raster:").grid(row=1, sticky="w")
            self.extent_var = tk.StringVar()
            tk.Entry(master, textvariable=self.extent_var, width=50).grid(row=1, column=1)
            tk.Button(master, text="Browse…", command=self.browse_extent).grid(row=1, column=2)

            # Cropping method
            tk.Label(master, text="Cropping method:").grid(row=2, sticky="w")
            self.method_var = tk.StringVar(value="concave")
            ttk.Combobox(
                master,
                textvariable=self.method_var,
                values=["convex", "concave"],
                state="readonly",
                width=10
            ).grid(row=2, column=1, sticky="w")

            # Save path
            tk.Label(master, text="Save output to:").grid(row=3, sticky="w")
            self.save_var = tk.StringVar()
            tk.Entry(master, textvariable=self.save_var, width=50).grid(row=3, column=1)
            tk.Button(master, text="Browse…", command=self.browse_save).grid(row=3, column=2)

            return None

        def browse_cloud(self):
            fn = filedialog.askopenfilename(
                filetypes=[("Point clouds","*.pcd *.ply *.txt *.xyz *.las *.laz *.asc *.pts *.xyzn *.xyzrgb *.e57 *.csv"),("All files","*.*")]
            )
            if fn:
                self.cloud_var.set(fn)

        def browse_extent(self):
            fn = filedialog.askopenfilename(
                filetypes=[("Extent (polygon, raster, or mesh)", "*.ply *.tif *.tiff *.txt *.xyz *.las *.laz *.asc *.pts *.pcd *.xyzn *.xyzrgb *.e57 *.csv"),("All files","*.*")]
            )
            if fn:
                self.extent_var.set(fn)

        def browse_save(self):
            fn = filedialog.asksaveasfilename(
                defaultextension=".laz",
                filetypes=[
                    ("LAS (*.las)", "*.las"),
                    ("LAZ (*.laz)", "*.laz"),
                    ("PLY (*.ply)", "*.ply"),
                    ("PCD (*.pcd)", "*.pcd"),
                    ("CSV (*.csv)", "*.csv"),
                    ("TXT (*.txt)", "*.txt"),
                    ("XYZ (*.xyz)", "*.xyz"),
                    ("ASC (*.asc)", "*.asc"),
                    ("E57 (*.e57)", "*.e57"),
                    ("All files", "*.*"),
                ]
            )
            if fn:
                self.save_var.set(fn)

        def apply(self):
            self.result = (
                self.cloud_var.get(),
                self.extent_var.get(),
                self.method_var.get(),
                self.save_var.get()
            )

    def crop_by_extent_dialog():
        dlg = CropDialog(root, title="Crop Point Cloud by Extent")
        if not dlg.result:
            return

        cloud_path, extent_path, method, save_path = dlg.result
        normalized_save = save_path or None

        def worker():
            norm_cloud = os.path.normpath(cloud_path)
            norm_extent = os.path.normpath(extent_path)
            cropped = CropCloudByExtent(norm_cloud, norm_extent, method=method)
            count = int(cropped.shape[0]) if hasattr(cropped, "shape") else len(cropped)
            if normalized_save:
                SavePointCloud(cropped, normalized_save)
            return {"count": count, "save_path": normalized_save}

        def on_success(info):
            msg = f"Done! Cropped point cloud has {info.get('count', 0)} points."
            if info.get("save_path"):
                msg += f"\nSaved to:\n{info['save_path']}"
            messagebox.showinfo("Cropping Complete", msg)

        def on_failure(exc):
            messagebox.showerror("Error", f"Cropping or saving failed:\n{exc}")

        run_background_task(
            start_status="Status: Cropping point cloud...",
            success_status="Status: Point cloud cropping completed successfully.",
            failure_status="Status: Cropping point cloud failed.",
            worker_fn=worker,
            success_callback=on_success,
            failure_callback=on_failure,
        )

    # Create the GUI window
    root = TkinterDnD.Tk() if dnd_available else tk.Tk()
    root.after(50, process_ui_queue)
    root.title("DendRobot v0.5")

    container = tk.Frame(root)
    container.pack(fill=tk.BOTH, expand=True)
    container.grid_rowconfigure(0, weight=1)
    container.grid_columnconfigure(0, weight=1)

    h_scroll = tk.Scrollbar(container, orient=tk.HORIZONTAL)
    v_scroll = tk.Scrollbar(container, orient=tk.VERTICAL)
    canvas = tk.Canvas(
        container,
        highlightthickness=0,
        xscrollcommand=h_scroll.set,
        yscrollcommand=v_scroll.set,
    )
    canvas.grid(row=0, column=0, sticky="nsew")
    h_scroll.config(command=canvas.xview)
    v_scroll.config(command=canvas.yview)
    h_scroll._visible = False
    v_scroll._visible = False

    content = tk.Frame(canvas)
    canvas_frame = canvas.create_window((0, 0), window=content, anchor="nw")

    def _sync_scrollbars():
        bbox = canvas.bbox("all")
        if not bbox:
            content_width = content_height = 0
        else:
            content_width = bbox[2] - bbox[0]
            content_height = bbox[3] - bbox[1]

        canvas_width = max(canvas.winfo_width(), 1)
        canvas_height = max(canvas.winfo_height(), 1)

        if canvas_width <= 1 and canvas_height <= 1:
            return

        need_h = content_width > canvas_width + 1
        need_v = content_height > canvas_height + 1

        if need_h and not h_scroll._visible:
            h_scroll.grid(row=1, column=0, columnspan=2, sticky="ew")
            h_scroll._visible = True
        elif not need_h and h_scroll._visible:
            h_scroll.grid_remove()
            h_scroll._visible = False

        if need_v and not v_scroll._visible:
            v_scroll.grid(row=0, column=1, sticky="ns")
            v_scroll._visible = True
        elif not need_v and v_scroll._visible:
            v_scroll.grid_remove()
            v_scroll._visible = False

    def _update_scrollregion(event=None):
        canvas.configure(scrollregion=canvas.bbox("all"))
        _sync_scrollbars()

    content.bind("<Configure>", _update_scrollregion)

    def _on_canvas_configure(event):
        if content.winfo_reqwidth() < event.width:
            canvas.itemconfigure(canvas_frame, width=event.width)
        _sync_scrollbars()

    canvas.bind("<Configure>", _on_canvas_configure)

    def _on_mousewheel(event):
        delta = int(-event.delta / 120) if event.delta else 0
        if delta != 0:
            if event.state & 0x0001:  # Shift key pressed
                canvas.xview_scroll(delta, "units")
            else:
                canvas.yview_scroll(delta, "units")

    canvas.bind_all("<MouseWheel>", _on_mousewheel)
    canvas.bind_all("<Shift-MouseWheel>", _on_mousewheel)
    canvas.bind_all("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
    canvas.bind_all("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))

    menubar = tk.Menu(root)
    functions_menu = tk.Menu(menubar, tearoff=False)
    functions_menu.add_command(label="Map Scalar Fields", command=map_scalar_fields_dialog)
    functions_menu.add_command(label="Crop Cloud by Extent", command=crop_by_extent_dialog)
    menubar.add_cascade(label="Functions", menu=functions_menu)


    help_menu = tk.Menu(menubar, tearoff=False)
    help_menu.add_command(label="See Console", command=open_console_window)
    help_menu.add_command(label="Processing Outputs Overview", command=open_outputs_overview)
    help_menu.add_command(label="About", command=lambda: show_message(root, "About DendRobot", "DendRobot v0.5\n\nA tool for automatical forest inventory based on 3D point clouds.\n\nDeveloped at Czech University of Life Sciences in Prague\nAsk for support at hrdinam@fld.czu.cz"))
    menubar.add_cascade(label="Help", menu=help_menu)

    root.config(menu=menubar)

    def add_spinbox(row, label_text, var_cls, from_, to, increment, validate_func, tooltip_text, default_value):
        """Create a labelled spinbox and return its Tk variable alongside the widget."""
        var = var_cls()
        spinbox = create_spinbox(
            content,
            row,
            label_text,
            var,
            from_,
            to,
            increment,
            validate_func,
            tooltip_text,
            default_value,
        )
        return var, spinbox

    advanced_widgets = []  # List to track advanced widgets 
    content.columnconfigure(3, weight=0, minsize=25)
    content.columnconfigure(4, weight=0, minsize=25)

    # Initial Point Cloud Data Path Entry
    pcdpath_label = tk.Label(content, text="Point Cloud Data Path:")  # Create a label for "Point Cloud Data Path"
    pcdpath_label.grid(row=0, column=0, sticky="w", padx=10, pady=20)
    initial_pcdpath_entry = tk.Entry(content, width=50)
    initial_pcdpath_entry.grid(row=0, column=1)
    pcdpath_entries.append(initial_pcdpath_entry)  # Add to the list
    # Browse Button for Point Cloud Data Path
    tk.Button(content, text="Browse", command=lambda: open_file_dialog(initial_pcdpath_entry, initial_tick_label)).grid(row=0, column=2)
    # Attach the tooltip to the "Point Cloud Data Path" label
    create_tooltip(pcdpath_label, "Select the point cloud for processing.\n(laz, las, txt, ply, pcd, xyz, asc, pts, xyzn, xyzrgb, csv, e57)")

    # Add tick label for the initial entry
    initial_tick_label = tk.Label(content, text="")
    initial_tick_label.grid(row=0, column=3)
    tick_labels.append(initial_tick_label)

    if dnd_available:
        def _handle_initial_entry_drop(event):
            """Support dropping files onto the primary point cloud entry."""
            dropped = [
                os.path.normpath(path)
                for path in initial_pcdpath_entry.tk.splitlist(event.data)
                if path
            ]
            files = [path for path in dropped if not os.path.isdir(path)]
            if not files:
                return "break"

            initial_pcdpath_entry.delete(0, tk.END)
            initial_pcdpath_entry.insert(0, files[0])
            if tick_labels:
                tick_labels[0].config(text="")

            if len(files) > 1:
                add_paths_to_tree(files[1:])
            return "break"

        initial_pcdpath_entry.drop_target_register(DND_FILES)
        initial_pcdpath_entry.dnd_bind("<<Drop>>", _handle_initial_entry_drop)

    # Panel hosting additional point cloud paths (hidden until activated)
    additional_panel = tk.Frame(content, width=ADDITIONAL_PANEL_WIDTH, height=ADDITIONAL_PANEL_HEIGHT)
    additional_panel.place_forget()
    additional_panel.pack_propagate(False)

    additional_paths_frame = ttk.LabelFrame(additional_panel, text="Additional Point Clouds")
    additional_paths_frame.pack(fill="both", expand=True)

    tree_container = tk.Frame(additional_paths_frame)
    tree_container.pack(fill="both", expand=True, padx=5, pady=5)

    additional_paths_tree = ttk.Treeview(
        tree_container,
        columns=("path", "status"),
        show="headings",
        selectmode="extended",
        height=6,
    )
    additional_paths_tree.heading("path", text="Path")
    additional_paths_tree.heading("status", text="Status")
    additional_paths_tree.column("path", width=ADDITIONAL_PANEL_WIDTH - 150, anchor="w")
    additional_paths_tree.column("status", width=120, anchor="center")
    additional_paths_tree.pack(side="left", fill="both", expand=True)
    additional_paths_tree.tag_configure("success", foreground="green")
    additional_paths_tree.tag_configure("error", foreground="red")

    additional_paths_scroll = ttk.Scrollbar(
        tree_container, orient="vertical", command=additional_paths_tree.yview
    )
    additional_paths_scroll.pack(side="right", fill="y")
    additional_paths_tree.configure(yscrollcommand=additional_paths_scroll.set)

    hint_text = "Use + to add more point clouds."
    if dnd_available:
        hint_text = "Use + to add files or drag and drop them here."
    additional_paths_hint = tk.Label(
        additional_paths_frame,
        text=hint_text,
        anchor="w",
        justify="left",
    )
    additional_paths_hint.pack(anchor="w", padx=8, pady=(4, 8))
    refresh_additional_hint()

    if dnd_available:
        def _handle_pointcloud_drop(event):
            files = additional_paths_tree.tk.splitlist(event.data)
            add_pcdpath([f for f in files if f])
            return "break"

        additional_paths_tree.drop_target_register(DND_FILES)
        additional_paths_tree.dnd_bind("<<Drop>>", _handle_pointcloud_drop)

    # Add "+" button to allow adding more point cloud data paths
    add_button = tk.Button(content, text="+", command=add_pcdpath)
    add_button.grid(row=0, column=4,padx=5,sticky="")
    # Adding the "-" button under the "+" button
    remove_button = tk.Button(content, text="-", command=remove_pcdpath)
    remove_button.grid(row=1, column=4, padx=5, pady=5, sticky="")
    # Create the Autofill button
    autofill_button = tk.Button(content, text="⇉", command=ask_for_extension)
    autofill_button.grid(row=2, column=4, padx=5, sticky="")
    create_tooltip(autofill_button, "Fill point clouds to entries from a folder and all its subfolders:\nRootFolder-\n         │-PlotFolder1\n         │-PlotFolder2\n         │-PlotFolder3\n              │-AnyOtherFiles\n              │→POINTCLOUD.laz←\n              │-Subfolder\n                   │→POINTCLOUD2.laz←")

    # Create a frame for the reevaluate, segmentate, debug, and advanced controls
    options_frame = tk.Frame(content)
    options_frame.grid(row=2, column=1, rowspan=1, pady=5)  # Adjust as needed for spacing

    # Reevaluate Checkbox and Tooltip
    # reevaluate_var = BooleanVar(value=False)
    # reevaluate_label = tk.Label(options_frame, text="Reevaluate:")
    # reevaluate_label.grid(row=0, column=0, sticky="s", padx=10)
    # reevaluate_checkbox = tk.Checkbutton(options_frame, variable=reevaluate_var)
    # reevaluate_checkbox.grid(row=1, column=0, padx=10, pady=5, sticky="s")
    # reevaluate_checkbox.config(state=tk.DISABLED)
    # create_tooltip(reevaluate_label, "Skips parts of point cloud processing, reuses data from previous run and recalculates the DBHs, heights, etc.")  # Attach tooltip to the label

    # Segmentate Checkbox and Tooltip
    segmentate_var = BooleanVar(value=False)
    segmentate_label = tk.Label(options_frame, text="Segmentate:")
    segmentate_label.grid(row=0, column=0, sticky="s", padx=10)
    segmentate_checkbox = tk.Checkbutton(options_frame, variable=segmentate_var)
    segmentate_checkbox.grid(row=1, column=0, padx=10, pady=5, sticky="s")
    segmentate_checkbox.config(state=tk.NORMAL)
    create_tooltip(segmentate_label, "Individual trees will be extracted from the point cloud and filtered.\nIncreases time consumption significantly.")  # Attach tooltip to the label

    # Debug Checkbox and Tooltip
    debug_var = BooleanVar(value=False)
    debug_label = tk.Label(options_frame, text="Debug:")
    debug_label.grid(row=0, column=2, sticky="s", padx=10)
    debug_checkbox = tk.Checkbutton(options_frame, variable=debug_var)
    debug_checkbox.grid(row=1, column=2, padx=10, pady=5, sticky="s")
    create_tooltip(debug_label, "The outputs will contain most of the intermediate files from processing steps.")  # Attach tooltip to the label


    # Horizontal black line (separator) under the Advanced Mode checkbox
    separator = tk.Frame(content, height=2, bd=1, relief="sunken", bg="black")
    separator.grid(row=3, column=0, columnspan=5, sticky="ew", pady=15)  # Spanning all columns to touch edges

    EPSG_OPTIONS = {
        "3067 (ETRS89/TM35FIN(E,N))": 3067, 
        "5514 (S-JTSK Krovak)": 5514,
        "32631 (UTM-Belgium)": 32631,
        "32630 (UTM-UK, Ghana)": 32630,
        "32631 (UTM-France)": 32631,
        "32632 (UTM-Norway, Swiss)": 32632,
        "32633 (UTM-Czechia, Slovakia, Poland, Austria, Croatia, Denmark, Germany)": 32633,
        "32634 (UTM-Poland, Sweden)": 32634,
        "32635 (UTM-Finland)": 32635,
        "32636 (UTM-Turkey)": 32636,
        "32637 (UTM-Russia)": 32637,
        "32643 (UTM-India)": 32643,
        "32650 (UTM-China)": 32650,
        "32618 (UTM-Canada, USA)": 32618,
        "32723 (UTM-Brazil)": 32723,
    }

    epsg_label = tk.Label(content, text="EPSG Code:")
    epsg_label.grid(row=4, column=0, sticky="w", padx=10, pady=5)
    # Create the combobox for the Data Type field
    epsg_var = tk.StringVar(value="32633 (UTM-Czechia, Slovakia, Poland, Austria, Croatia, Denmark, Germany)")  # Default value is "32633"
    epsg_menu = ttk.Combobox(
        content,
        textvariable=epsg_var,
        values=list(EPSG_OPTIONS.keys()),
        width=20  # Adjust width as needed
    )
    epsg_menu.grid(row=4, column=1, padx=10, pady=5)
    epsg_menu.configure(postcommand=lambda: ensure_combobox_horizontal_scroll(epsg_menu))

    epsg_menu.bind("<<ComboboxSelected>>", on_epsg_change)
    epsg_menu.bind("<Return>", on_epsg_change)
    # Data Type Dropdown (Combobox) for Selecting Only Valid Options
    create_tooltip(epsg_label, "Code of the reference system, the input point cloud is in. Use only projected systems (in metres, not angles). The output files will be assigned this reference system too. Choose from menu or write the code into the entry.")



    # Create the combobox for the Data Type field
    datatype_var = tk.StringVar(value="MLS/TLS Raw")  # Default value is "raw"
    datatype_menu = ttk.Combobox(
        content,
        textvariable=datatype_var,
        values=["MLS/TLS Raw", "MLS/TLS Cropped", "iPhone LiDAR", "CRP", "UAV LiDAR" ],
        state="readonly",  # Makes it readonly to prevent manual typing
        width=20
    )
    datatype_menu.grid(row=5, column=1, padx=10, pady=5)  # Adjust row and column to match your layout
    datatype_menu.set("MLS/TLS Raw")  # Set the default value
    # Bind the function to the Combobox's <<ComboboxSelected>> event
    datatype_menu.bind("<<ComboboxSelected>>", on_datatype_change)
    # Data Type Dropdown (Combobox) for Selecting Only Valid Options
    datatype_label = tk.Label(content, text="Data Type:")
    datatype_label.grid(row=5, column=0, sticky="w", padx=10, pady=5)
    create_tooltip(datatype_label, "This slightly modifies parameters of algorithm to better adapt to some features of different data sources. Use 'MLS/TLS Raw' if the point cloud wasn't cropped. If it was cropped, use 'MLS/TLS Cropped' to avoid losing peripheral trees. In case iPhone LiDAR or terrestrial photogrammetry Data use 'iPhone LiDAR' or 'CRP'. For UAV LiDAR there is an option too.")


  
    maxdbh_var, maxdbh_spinbox = add_spinbox(
        6,
        "Maximal DBH:",
        tk.DoubleVar,
        0.1,
        5.0,
        0.1,
        validate_maxdbh,
        "The limit for filtering out likely incorrectly fitted trees. Input in meters.",
        1.5,
    )

    SubsampleStep_var, SubsampleStep_spinbox = add_spinbox(
        7,
        "Subsampling Step:",
        tk.DoubleVar,
        0.01,
        0.2,
        0.01,
        validate_subsamplestep,
        "After subsampling only one point per Step will be kept, for faster processing. DBH is computed from the original dense cloud.\nKeep this value smaller than Cross Section Thickness step.",
        0.05,
    )

    chunksize_var, chunksize_spinbox = add_spinbox(
        8,
        "Filter-Chunk Size:",
        tk.DoubleVar,
        1.0,
        100.0,
        1.0,
        validate_chunksize,
        "The size of square-shaped areas that are each filtered to remove terrain and keep trees. Lower values may lead to better detection of understory, but also to greater ammount of unfiltered terrain, mainly in sparsely grown up places. Higher value leads to greater focus on main canopy level.",
        10.0,
    )

    rasterizestep_var, rasterizestep_spinbox = add_spinbox(
        9,
        "DTM Resolution:",
        tk.DoubleVar,
        0.5,
        5.0,
        0.5,
        validate_rasterizestept,
        "Defines the resolution of point cloud rasterization for DTM creation, expressed in its units (typically meters).\nToo low or too high value may cause issues.",
        1.0,
    )

    segmentationgap_var, segmentationgap_spinbox = add_spinbox(
        10,
        "Segmentation Gap:",
        tk.DoubleVar,
        0.01,
        1.0,
        0.01,
        validate_segmentationgap,
        "The spatial gap which is used for filtering non-tree objects. The lower, the more reliable segmentation, but larger potential loss of details.",
        0.05,
    )

    segmentationminheight_var, segmentationminheight_spinbox = add_spinbox(
        11,
        "Segmentation Min Height:",
        tk.DoubleVar,
        0.0,
        5.0,
        0.1,
        validate_segmentationminheight,
        "Points below this height above the terrain are ignored during segmentation to reduce ground artefacts. Use lower values only if there is not any undergrowth.",
        DEFAULT_SEGMENTATION_MIN_HEIGHT,
    )

    def update_segmentation_controls(*args):
        state = tk.NORMAL if segmentate_var.get() else tk.DISABLED
        segmentationgap_spinbox.config(state=state)
        segmentationminheight_spinbox.config(state=state)

    segmentate_var.trace_add("write", update_segmentation_controls)
    update_segmentation_controls()

    XSectionThickness_var, XSectionThickness_spinbox = add_spinbox(
        12,
        "Cross Section Thickness:",
        tk.DoubleVar,
        0.01,
        1.0,
        0.01,
        validate_xsectionthickness,
        "How thick disc will be used to compute DBH and tree location. Keep this value larger than Subsampling step.",
        0.07,
    )

    XSectionCount_var, XSectionCount_spinbox = add_spinbox(
        13,
        "Cross Sections Count:",
        tk.IntVar,
        1,
        5000,
        1,
        validate_xsectioncount,
        "Determines levels above terrain in meters, at which the diameters will be calculated. Breast height (1.3 m) is always used.\nAdditional levels are used for identification of trees in case DBH level is not available in a tree scan.",
        3,
    )
    XSectionCount_var.trace_add("write", update_max_seen_height)

    XSectionStep_var, XSectionStep_spinbox = add_spinbox(
        14,
        "Cross Sections Step:",
        tk.DoubleVar,
        0.01,
        2.0,
        0.1,
        validate_xsectionstep,
        "Determines how far from each other the diameter slices will be made. Breast height (1.3 m) is always used as the lowest position.",
        1.0,
    )
    XSectionStep_var.trace_add("write", update_max_seen_height)

    maxseenheight_label = tk.Label(content, text=": -- m")
    maxseenheight_label.grid(row=14, column=2, sticky="w", padx=10, pady=5)
    update_max_seen_height()
    create_tooltip(maxseenheight_label,"Based on cross section parameters estimates maximal height, that will be examinated on each tree for taper estimation.")

    # Horizontal black line (separator) above the Run Estimation button
    separator_above_run = tk.Frame(content, height=2, bd=1, relief="sunken", bg="black")
    separator_above_run.grid(row=17, column=0, columnspan=5, sticky="ew", pady=15)  # Spanning all columns to touch edges

    # Create a frame to hold the "Run" and "Stop" buttons for better layout control
    button_frame = tk.Frame(content)
    button_frame.grid(row=18, column=1,columnspan=3, rowspan=2, pady=(10, 30), sticky="nsew")

    # Run button
    bold_font = font.Font(weight="bold")
    run_button = tk.Button(button_frame, text="Run Estimation", font=bold_font, command=start_run_estimation_thread)
    run_button.grid(row=0, column=0, padx=5, sticky="s")
    create_tooltip(run_button,"Start processing")
    
    # Pause/Continue button
    pause_button = tk.Button(button_frame, text="Pause", font=bold_font, command=toggle_pause)
    pause_button.grid(row=0, column=1, padx=5, sticky="s")
    enqueue_ui(pause_button.config, state=tk.DISABLED)

    # Stop button
    stop_button = tk.Button(button_frame, text="Stop", font=bold_font, command=stop_estimation)
    stop_button.grid(row=0, column=2, padx=5, sticky="s")
    stop_button.config(state=tk.DISABLED) #Initially disabled

    # Reset button
    reset_button = tk.Button(content, text="↻", command=reset_ui)
    reset_button.grid(row=2, column=0, padx=5, sticky= "")
    create_tooltip(reset_button, "Reset to default values.")

    # Horizontal black line (separator) above the Run Estimation button
    separator_above_status = tk.Frame(content, height=2, bd=1, relief="sunken", bg="black")
    separator_above_status.grid(row=20, column=0, columnspan=5, sticky="ew", pady=15)  # Spanning all columns to touch edges

    # Status Label (Global)

    sys.stdout = PrintRedirect("INFO")
    sys.stderr = PrintRedirect("ERROR")
    append_console_log("Console output redirected to GUI log.")
    status_label = tk.Label(content, text="Status: Waiting to start processing...", font=("Helvetica", 10), wraplength=580)
    status_label.grid(row=21, column=0, columnspan=5, padx=10, pady=10, sticky="w")
    create_tooltip_terminal(status_label, lambda: '\n'.join(console_logs[-5:]))


    # Resize image (adjust these dimensions as per your space calculations, maintaining aspect ratio)
    max_width, max_height = 150, 200  # Example dimensions to fit into the right space
    dendrobot_image.thumbnail((max_width, max_height), Image.Resampling.LANCZOS)
    # Convert the image to a format Tkinter can use
    dendrobot_photo = ImageTk.PhotoImage(dendrobot_image)

    # Create a label to hold the image and place it at the designated position
    dendrobot_label = tk.Label(content, image=dendrobot_photo)
    dendrobot_label.image = dendrobot_photo  # Keep a reference to avoid garbage collection
    dendrobot_label.grid(row=5, rowspan=8, column=2, sticky="w", columnspan=3)
    dendrobot_label.lower()
    # Resize image while maintaining aspect ratio for the window icon
    icon_max_size = (32, 32)  # Icons are usually small, so 32x32 is a good size
    dendrobot_icon_image = dendrobot_image.copy()  # Make a copy for the icon use
    dendrobot_icon_image.thumbnail(icon_max_size)  # Resize for the icon

    # Convert the icon image to a format Tkinter can use
    dendrobot_icon_photo = ImageTk.PhotoImage(dendrobot_icon_image)


    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    root.iconphoto(False, dendrobot_icon_photo)

    root.update_idletasks()
    content_width = content.winfo_reqwidth()
    content_height = content.winfo_reqheight()

    relative_height = int(screen_height * 0.42)
    min_height = content_height + WINDOW_PADDING
    initial_height = max(relative_height, min_height)

    base_window_width = max(content_width + WINDOW_PADDING, int(screen_width * 0.34))
    initial_width = min(base_window_width, screen_width - 40)
    initial_window_geometry = f"{initial_width}x{initial_height}"

    expanded_window_width = min(initial_width + ADDITIONAL_PANEL_WIDTH + WINDOW_PADDING, screen_width - 20)
    if expanded_window_width < initial_width:
        expanded_window_width = initial_width
    expanded_window_geometry = f"{expanded_window_width}x{initial_height}"

    root.geometry(initial_window_geometry)

    root.after(0, _sync_scrollbars)


    # Call the function for the root window
    #add_debug_borders(root)
    # Start the GUI event loop
    root.mainloop()



###RUN###

###Single file

# cloud = r"D:\MarekHrdina\Dropbox\Projekty\testing-pcds\farotiny.laz"
# EstimatePlotParameters(cloud, debug=False,segmentate=False, epsg=3067, datatype="MLS/TLS Cropped", outpcdformat="txt")#, XSectionCount=500, XSectionStep=0.1, XSectionThickness=0.1)

###Run GUI###

DendRobotGUI() 

